module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "JkW7");
/******/ })
/************************************************************************/
/******/ ({

/***/ "/QC5":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "subscribers", function() { return subscribers; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getCurrentUrl", function() { return getCurrentUrl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "route", function() { return route; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Router", function() { return Router; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Route", function() { return Route; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Link", function() { return Link; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_preact__ = __webpack_require__("KM04");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_preact___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_preact__);


var EMPTY$1 = {};

function assign(obj, props) {
	// eslint-disable-next-line guard-for-in
	for (var i in props) {
		obj[i] = props[i];
	}
	return obj;
}

function exec(url, route, opts) {
	var reg = /(?:\?([^#]*))?(#.*)?$/,
	    c = url.match(reg),
	    matches = {},
	    ret;
	if (c && c[1]) {
		var p = c[1].split('&');
		for (var i = 0; i < p.length; i++) {
			var r = p[i].split('=');
			matches[decodeURIComponent(r[0])] = decodeURIComponent(r.slice(1).join('='));
		}
	}
	url = segmentize(url.replace(reg, ''));
	route = segmentize(route || '');
	var max = Math.max(url.length, route.length);
	for (var i$1 = 0; i$1 < max; i$1++) {
		if (route[i$1] && route[i$1].charAt(0) === ':') {
			var param = route[i$1].replace(/(^\:|[+*?]+$)/g, ''),
			    flags = (route[i$1].match(/[+*?]+$/) || EMPTY$1)[0] || '',
			    plus = ~flags.indexOf('+'),
			    star = ~flags.indexOf('*'),
			    val = url[i$1] || '';
			if (!val && !star && (flags.indexOf('?') < 0 || plus)) {
				ret = false;
				break;
			}
			matches[param] = decodeURIComponent(val);
			if (plus || star) {
				matches[param] = url.slice(i$1).map(decodeURIComponent).join('/');
				break;
			}
		} else if (route[i$1] !== url[i$1]) {
			ret = false;
			break;
		}
	}
	if (opts.default !== true && ret === false) {
		return false;
	}
	return matches;
}

function pathRankSort(a, b) {
	return a.rank < b.rank ? 1 : a.rank > b.rank ? -1 : a.index - b.index;
}

// filter out VNodes without attributes (which are unrankeable), and add `index`/`rank` properties to be used in sorting.
function prepareVNodeForRanking(vnode, index) {
	vnode.index = index;
	vnode.rank = rankChild(vnode);
	return vnode.attributes;
}

function segmentize(url) {
	return url.replace(/(^\/+|\/+$)/g, '').split('/');
}

function rankSegment(segment) {
	return segment.charAt(0) == ':' ? 1 + '*+?'.indexOf(segment.charAt(segment.length - 1)) || 4 : 5;
}

function rank(path) {
	return segmentize(path).map(rankSegment).join('');
}

function rankChild(vnode) {
	return vnode.attributes.default ? 0 : rank(vnode.attributes.path);
}

var customHistory = null;

var ROUTERS = [];

var subscribers = [];

var EMPTY = {};

function isPreactElement(node) {
	return node.__preactattr_ != null || typeof Symbol !== 'undefined' && node[Symbol.for('preactattr')] != null;
}

function setUrl(url, type) {
	if (type === void 0) type = 'push';

	if (customHistory && customHistory[type]) {
		customHistory[type](url);
	} else if (typeof history !== 'undefined' && history[type + 'State']) {
		history[type + 'State'](null, null, url);
	}
}

function getCurrentUrl() {
	var url;
	if (customHistory && customHistory.location) {
		url = customHistory.location;
	} else if (customHistory && customHistory.getCurrentLocation) {
		url = customHistory.getCurrentLocation();
	} else {
		url = typeof location !== 'undefined' ? location : EMPTY;
	}
	return "" + (url.pathname || '') + (url.search || '');
}

function route(url, replace) {
	if (replace === void 0) replace = false;

	if (typeof url !== 'string' && url.url) {
		replace = url.replace;
		url = url.url;
	}

	// only push URL into history if we can handle it
	if (canRoute(url)) {
		setUrl(url, replace ? 'replace' : 'push');
	}

	return routeTo(url);
}

/** Check if the given URL can be handled by any router instances. */
function canRoute(url) {
	for (var i = ROUTERS.length; i--;) {
		if (ROUTERS[i].canRoute(url)) {
			return true;
		}
	}
	return false;
}

/** Tell all router instances to handle the given URL.  */
function routeTo(url) {
	var didRoute = false;
	for (var i = 0; i < ROUTERS.length; i++) {
		if (ROUTERS[i].routeTo(url) === true) {
			didRoute = true;
		}
	}
	for (var i$1 = subscribers.length; i$1--;) {
		subscribers[i$1](url);
	}
	return didRoute;
}

function routeFromLink(node) {
	// only valid elements
	if (!node || !node.getAttribute) {
		return;
	}

	var href = node.getAttribute('href'),
	    target = node.getAttribute('target');

	// ignore links with targets and non-path URLs
	if (!href || !href.match(/^\//g) || target && !target.match(/^_?self$/i)) {
		return;
	}

	// attempt to route, if no match simply cede control to browser
	return route(href);
}

function handleLinkClick(e) {
	if (e.button == 0) {
		routeFromLink(e.currentTarget || e.target || this);
		return prevent(e);
	}
}

function prevent(e) {
	if (e) {
		if (e.stopImmediatePropagation) {
			e.stopImmediatePropagation();
		}
		if (e.stopPropagation) {
			e.stopPropagation();
		}
		e.preventDefault();
	}
	return false;
}

function delegateLinkHandler(e) {
	// ignore events the browser takes care of already:
	if (e.ctrlKey || e.metaKey || e.altKey || e.shiftKey || e.button !== 0) {
		return;
	}

	var t = e.target;
	do {
		if (String(t.nodeName).toUpperCase() === 'A' && t.getAttribute('href') && isPreactElement(t)) {
			if (t.hasAttribute('native')) {
				return;
			}
			// if link is handled by the router, prevent browser defaults
			if (routeFromLink(t)) {
				return prevent(e);
			}
		}
	} while (t = t.parentNode);
}

var eventListenersInitialized = false;

function initEventListeners() {
	if (eventListenersInitialized) {
		return;
	}

	if (typeof addEventListener === 'function') {
		if (!customHistory) {
			addEventListener('popstate', function () {
				routeTo(getCurrentUrl());
			});
		}
		addEventListener('click', delegateLinkHandler);
	}
	eventListenersInitialized = true;
}

var Router = function (Component$$1) {
	function Router(props) {
		Component$$1.call(this, props);
		if (props.history) {
			customHistory = props.history;
		}

		this.state = {
			url: props.url || getCurrentUrl()
		};

		initEventListeners();
	}

	if (Component$$1) Router.__proto__ = Component$$1;
	Router.prototype = Object.create(Component$$1 && Component$$1.prototype);
	Router.prototype.constructor = Router;

	Router.prototype.shouldComponentUpdate = function shouldComponentUpdate(props) {
		if (props.static !== true) {
			return true;
		}
		return props.url !== this.props.url || props.onChange !== this.props.onChange;
	};

	/** Check if the given URL can be matched against any children */
	Router.prototype.canRoute = function canRoute(url) {
		return this.getMatchingChildren(this.props.children, url, false).length > 0;
	};

	/** Re-render children with a new URL to match against. */
	Router.prototype.routeTo = function routeTo(url) {
		this._didRoute = false;
		this.setState({ url: url });

		// if we're in the middle of an update, don't synchronously re-route.
		if (this.updating) {
			return this.canRoute(url);
		}

		this.forceUpdate();
		return this._didRoute;
	};

	Router.prototype.componentWillMount = function componentWillMount() {
		ROUTERS.push(this);
		this.updating = true;
	};

	Router.prototype.componentDidMount = function componentDidMount() {
		var this$1 = this;

		if (customHistory) {
			this.unlisten = customHistory.listen(function (location) {
				this$1.routeTo("" + (location.pathname || '') + (location.search || ''));
			});
		}
		this.updating = false;
	};

	Router.prototype.componentWillUnmount = function componentWillUnmount() {
		if (typeof this.unlisten === 'function') {
			this.unlisten();
		}
		ROUTERS.splice(ROUTERS.indexOf(this), 1);
	};

	Router.prototype.componentWillUpdate = function componentWillUpdate() {
		this.updating = true;
	};

	Router.prototype.componentDidUpdate = function componentDidUpdate() {
		this.updating = false;
	};

	Router.prototype.getMatchingChildren = function getMatchingChildren(children, url, invoke) {
		return children.filter(prepareVNodeForRanking).sort(pathRankSort).map(function (vnode) {
			var matches = exec(url, vnode.attributes.path, vnode.attributes);
			if (matches) {
				if (invoke !== false) {
					var newProps = { url: url, matches: matches };
					assign(newProps, matches);
					delete newProps.ref;
					delete newProps.key;
					return Object(__WEBPACK_IMPORTED_MODULE_0_preact__["cloneElement"])(vnode, newProps);
				}
				return vnode;
			}
		}).filter(Boolean);
	};

	Router.prototype.render = function render(ref, ref$1) {
		var children = ref.children;
		var onChange = ref.onChange;
		var url = ref$1.url;

		var active = this.getMatchingChildren(children, url, true);

		var current = active[0] || null;
		this._didRoute = !!current;

		var previous = this.previousUrl;
		if (url !== previous) {
			this.previousUrl = url;
			if (typeof onChange === 'function') {
				onChange({
					router: this,
					url: url,
					previous: previous,
					active: active,
					current: current
				});
			}
		}

		return current;
	};

	return Router;
}(__WEBPACK_IMPORTED_MODULE_0_preact__["Component"]);

var Link = function Link(props) {
	return Object(__WEBPACK_IMPORTED_MODULE_0_preact__["h"])('a', assign({ onClick: handleLinkClick }, props));
};

var Route = function Route(props) {
	return Object(__WEBPACK_IMPORTED_MODULE_0_preact__["h"])(props.component, props);
};

Router.subscribers = subscribers;
Router.getCurrentUrl = getCurrentUrl;
Router.route = route;
Router.Router = Router;
Router.Route = Route;
Router.Link = Link;

/* harmony default export */ __webpack_exports__["default"] = (Router);
//# sourceMappingURL=preact-router.es.js.map

/***/ }),

/***/ "/Umn":
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin
module.exports = {"header":"header__3IhT1"};

/***/ }),

/***/ "JZ8d":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = symbolObservablePonyfill;
function symbolObservablePonyfill(root) {
	var result;
	var Symbol = root.Symbol;

	if (typeof Symbol === 'function') {
		if (Symbol.observable) {
			result = Symbol.observable;
		} else {
			result = Symbol('observable');
			Symbol.observable = result;
		}
	} else {
		result = '@@observable';
	}

	return result;
};

/***/ }),

/***/ "JkW7":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });

// EXTERNAL MODULE: ./style/index.css
var style = __webpack_require__("rq4c");
var style_default = /*#__PURE__*/__webpack_require__.n(style);

// EXTERNAL MODULE: ../node_modules/preact/dist/preact.min.js
var preact_min = __webpack_require__("KM04");
var preact_min_default = /*#__PURE__*/__webpack_require__.n(preact_min);

// EXTERNAL MODULE: ../node_modules/preact-router/dist/preact-router.es.js
var preact_router_es = __webpack_require__("/QC5");

// CONCATENATED MODULE: ../node_modules/preact-context/dist/esm/context-value-emitter.js
function createEmitter(initialValue, bitmaskFactory) {
    var registeredUpdaters = [];
    var value = initialValue;
    var diff = function diff(newValue) {
        return bitmaskFactory(value, newValue) | 0;
    };
    return {
        register: function register(updater) {
            registeredUpdaters.push(updater);
            updater(value, diff(value));
        },
        unregister: function unregister(updater) {
            registeredUpdaters = registeredUpdaters.filter(function (i) {
                return i !== updater;
            });
        },
        val: function val(newValue) {
            if (newValue === undefined || newValue == value) {
                return value;
            }
            var bitmask = diff(newValue);
            value = newValue;
            registeredUpdaters.forEach(function (up) {
                return up(newValue, bitmask);
            });
            return value;
        }
    };
}
var noopEmitter = {
    register: function register(_) {
        console.warn("Consumer used without a Provider");
    },
    unregister: function unregister(_) {
        // do nothing
    },
    val: function val(_) {
        //do nothing;
    }
};
// CONCATENATED MODULE: ../node_modules/preact-context/dist/esm/utils.js
/*
 * Extracts the children from the props and returns an object containing the
 * only element of the given array (preact always passes children as an array)
 * or null otherwise. The result contains always a reference to the original
 * array of children
 *
 * @param {RenderableProps<*>} props - the component's properties
 * @return {{ child: JSX.Element | null, children: JSX.Element[]}}
 */
function getOnlyChildAndChildren(props) {
  var children = props.children;
  var child = children.length === 1 ? children[0] : null;
  return { child: child, children: children };
}
// CONCATENATED MODULE: ../node_modules/preact-context/dist/esm/context.js
var __extends = this && this.__extends || function () {
    var _extendStatics = function extendStatics(d, b) {
        _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
            d.__proto__ = b;
        } || function (d, b) {
            for (var p in b) {
                if (b.hasOwnProperty(p)) d[p] = b[p];
            }
        };
        return _extendStatics(d, b);
    };
    return function (d, b) {
        _extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();



function getRenderer(props) {
    var child = getOnlyChildAndChildren(props).child;
    // TODO: "render" in props check is only done to make TS happy
    return child || "render" in props && props.render;
}
var MAX_SIGNED_31_BIT_INT = 1073741823;
var defaultBitmaskFactory = function defaultBitmaskFactory() {
    return MAX_SIGNED_31_BIT_INT;
};
var ids = 0;
function _createContext(value, bitmaskFactory) {
    var key = "_preactContextProvider-" + ids++;
    var Provider = /** @class */function (_super) {
        __extends(Provider, _super);
        function Provider(props) {
            var _this = _super.call(this, props) || this;
            _this._emitter = createEmitter(props.value, bitmaskFactory || defaultBitmaskFactory);
            return _this;
        }
        Provider.prototype.getChildContext = function () {
            var _a;
            return _a = {}, _a[key] = this._emitter, _a;
        };
        Provider.prototype.componentDidUpdate = function () {
            this._emitter.val(this.props.value);
        };
        Provider.prototype.render = function () {
            var _a = getOnlyChildAndChildren(this.props),
                child = _a.child,
                children = _a.children;
            if (child) {
                return child;
            }
            // preact does not support fragments,
            // therefore we wrap the children in a span
            return Object(preact_min["h"])("span", null, children);
        };
        return Provider;
    }(preact_min["Component"]);
    var Consumer = /** @class */function (_super) {
        __extends(Consumer, _super);
        function Consumer(props, ctx) {
            var _this = _super.call(this, props, ctx) || this;
            _this._updateContext = function (value, bitmask) {
                var unstable_observedBits = _this.props.unstable_observedBits;
                var observed = unstable_observedBits === undefined || unstable_observedBits === null ? MAX_SIGNED_31_BIT_INT : unstable_observedBits;
                observed = observed | 0;
                if ((observed & bitmask) === 0) {
                    return;
                }
                _this.setState({ value: value });
            };
            _this.state = { value: _this._getEmitter().val() || value };
            return _this;
        }
        Consumer.prototype.componentDidMount = function () {
            this._getEmitter().register(this._updateContext);
        };
        Consumer.prototype.shouldComponentUpdate = function (nextProps, nextState) {
            return this.state.value !== nextState.value || getRenderer(this.props) !== getRenderer(nextProps);
        };
        Consumer.prototype.componentWillUnmount = function () {
            this._getEmitter().unregister(this._updateContext);
        };
        Consumer.prototype.componentDidUpdate = function (_, __, prevCtx) {
            var previousProvider = prevCtx[key];
            if (previousProvider === this.context[key]) {
                return;
            }
            (previousProvider || noopEmitter).unregister(this._updateContext);
            this.componentDidMount();
        };
        Consumer.prototype.render = function () {
            // TODO: "render" in props check is only done to make TS happy
            var render = "render" in this.props && this.props.render;
            var r = getRenderer(this.props);
            if (render && render !== r) {
                console.warn("Both children and a render function are defined. Children will be used");
            }
            if (typeof r === "function") {
                return r(this.state.value);
            }
            console.warn("Consumer is expecting a function as one and only child but didn't find any");
        };
        Consumer.prototype._getEmitter = function () {
            return this.context[key] || noopEmitter;
        };
        return Consumer;
    }(preact_min["Component"]);
    return {
        Provider: Provider,
        Consumer: Consumer
    };
}
// named and default export in order to have less problems with bundlers
/* harmony default export */ var esm_context = (_createContext);
var createContext = _createContext;
// EXTERNAL MODULE: ../node_modules/symbol-observable/es/index.js
var es = __webpack_require__("LkZ7");

// CONCATENATED MODULE: ../node_modules/redux/es/redux.js


/**
 * These are private action types reserved by Redux.
 * For any unknown actions, you must return the current state.
 * If the current state is undefined, you must return the initial state.
 * Do not reference these action types directly in your code.
 */
var randomString = function randomString() {
  return Math.random().toString(36).substring(7).split('').join('.');
};

var ActionTypes = {
  INIT: "@@redux/INIT" + randomString(),
  REPLACE: "@@redux/REPLACE" + randomString(),
  PROBE_UNKNOWN_ACTION: function PROBE_UNKNOWN_ACTION() {
    return "@@redux/PROBE_UNKNOWN_ACTION" + randomString();
  }
};

/**
 * @param {any} obj The object to inspect.
 * @returns {boolean} True if the argument appears to be a plain object.
 */
function isPlainObject(obj) {
  if (typeof obj !== 'object' || obj === null) return false;
  var proto = obj;

  while (Object.getPrototypeOf(proto) !== null) {
    proto = Object.getPrototypeOf(proto);
  }

  return Object.getPrototypeOf(obj) === proto;
}

/**
 * Creates a Redux store that holds the state tree.
 * The only way to change the data in the store is to call `dispatch()` on it.
 *
 * There should only be a single store in your app. To specify how different
 * parts of the state tree respond to actions, you may combine several reducers
 * into a single reducer function by using `combineReducers`.
 *
 * @param {Function} reducer A function that returns the next state tree, given
 * the current state tree and the action to handle.
 *
 * @param {any} [preloadedState] The initial state. You may optionally specify it
 * to hydrate the state from the server in universal apps, or to restore a
 * previously serialized user session.
 * If you use `combineReducers` to produce the root reducer function, this must be
 * an object with the same shape as `combineReducers` keys.
 *
 * @param {Function} [enhancer] The store enhancer. You may optionally specify it
 * to enhance the store with third-party capabilities such as middleware,
 * time travel, persistence, etc. The only store enhancer that ships with Redux
 * is `applyMiddleware()`.
 *
 * @returns {Store} A Redux store that lets you read the state, dispatch actions
 * and subscribe to changes.
 */

function createStore(reducer, preloadedState, enhancer) {
  var _ref2;

  if (typeof preloadedState === 'function' && typeof enhancer === 'function' || typeof enhancer === 'function' && typeof arguments[3] === 'function') {
    throw new Error('It looks like you are passing several store enhancers to ' + 'createStore(). This is not supported. Instead, compose them ' + 'together to a single function');
  }

  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {
    enhancer = preloadedState;
    preloadedState = undefined;
  }

  if (typeof enhancer !== 'undefined') {
    if (typeof enhancer !== 'function') {
      throw new Error('Expected the enhancer to be a function.');
    }

    return enhancer(createStore)(reducer, preloadedState);
  }

  if (typeof reducer !== 'function') {
    throw new Error('Expected the reducer to be a function.');
  }

  var currentReducer = reducer;
  var currentState = preloadedState;
  var currentListeners = [];
  var nextListeners = currentListeners;
  var isDispatching = false;

  function ensureCanMutateNextListeners() {
    if (nextListeners === currentListeners) {
      nextListeners = currentListeners.slice();
    }
  }
  /**
   * Reads the state tree managed by the store.
   *
   * @returns {any} The current state tree of your application.
   */

  function getState() {
    if (isDispatching) {
      throw new Error('You may not call store.getState() while the reducer is executing. ' + 'The reducer has already received the state as an argument. ' + 'Pass it down from the top reducer instead of reading it from the store.');
    }

    return currentState;
  }
  /**
   * Adds a change listener. It will be called any time an action is dispatched,
   * and some part of the state tree may potentially have changed. You may then
   * call `getState()` to read the current state tree inside the callback.
   *
   * You may call `dispatch()` from a change listener, with the following
   * caveats:
   *
   * 1. The subscriptions are snapshotted just before every `dispatch()` call.
   * If you subscribe or unsubscribe while the listeners are being invoked, this
   * will not have any effect on the `dispatch()` that is currently in progress.
   * However, the next `dispatch()` call, whether nested or not, will use a more
   * recent snapshot of the subscription list.
   *
   * 2. The listener should not expect to see all state changes, as the state
   * might have been updated multiple times during a nested `dispatch()` before
   * the listener is called. It is, however, guaranteed that all subscribers
   * registered before the `dispatch()` started will be called with the latest
   * state by the time it exits.
   *
   * @param {Function} listener A callback to be invoked on every dispatch.
   * @returns {Function} A function to remove this change listener.
   */

  function subscribe(listener) {
    if (typeof listener !== 'function') {
      throw new Error('Expected the listener to be a function.');
    }

    if (isDispatching) {
      throw new Error('You may not call store.subscribe() while the reducer is executing. ' + 'If you would like to be notified after the store has been updated, subscribe from a ' + 'component and invoke store.getState() in the callback to access the latest state. ' + 'See https://redux.js.org/api-reference/store#subscribe(listener) for more details.');
    }

    var isSubscribed = true;
    ensureCanMutateNextListeners();
    nextListeners.push(listener);
    return function unsubscribe() {
      if (!isSubscribed) {
        return;
      }

      if (isDispatching) {
        throw new Error('You may not unsubscribe from a store listener while the reducer is executing. ' + 'See https://redux.js.org/api-reference/store#subscribe(listener) for more details.');
      }

      isSubscribed = false;
      ensureCanMutateNextListeners();
      var index = nextListeners.indexOf(listener);
      nextListeners.splice(index, 1);
    };
  }
  /**
   * Dispatches an action. It is the only way to trigger a state change.
   *
   * The `reducer` function, used to create the store, will be called with the
   * current state tree and the given `action`. Its return value will
   * be considered the **next** state of the tree, and the change listeners
   * will be notified.
   *
   * The base implementation only supports plain object actions. If you want to
   * dispatch a Promise, an Observable, a thunk, or something else, you need to
   * wrap your store creating function into the corresponding middleware. For
   * example, see the documentation for the `redux-thunk` package. Even the
   * middleware will eventually dispatch plain object actions using this method.
   *
   * @param {Object} action A plain object representing “what changed”. It is
   * a good idea to keep actions serializable so you can record and replay user
   * sessions, or use the time travelling `redux-devtools`. An action must have
   * a `type` property which may not be `undefined`. It is a good idea to use
   * string constants for action types.
   *
   * @returns {Object} For convenience, the same action object you dispatched.
   *
   * Note that, if you use a custom middleware, it may wrap `dispatch()` to
   * return something else (for example, a Promise you can await).
   */

  function dispatch(action) {
    if (!isPlainObject(action)) {
      throw new Error('Actions must be plain objects. ' + 'Use custom middleware for async actions.');
    }

    if (typeof action.type === 'undefined') {
      throw new Error('Actions may not have an undefined "type" property. ' + 'Have you misspelled a constant?');
    }

    if (isDispatching) {
      throw new Error('Reducers may not dispatch actions.');
    }

    try {
      isDispatching = true;
      currentState = currentReducer(currentState, action);
    } finally {
      isDispatching = false;
    }

    var listeners = currentListeners = nextListeners;

    for (var i = 0; i < listeners.length; i++) {
      var listener = listeners[i];
      listener();
    }

    return action;
  }
  /**
   * Replaces the reducer currently used by the store to calculate the state.
   *
   * You might need this if your app implements code splitting and you want to
   * load some of the reducers dynamically. You might also need this if you
   * implement a hot reloading mechanism for Redux.
   *
   * @param {Function} nextReducer The reducer for the store to use instead.
   * @returns {void}
   */

  function replaceReducer(nextReducer) {
    if (typeof nextReducer !== 'function') {
      throw new Error('Expected the nextReducer to be a function.');
    }

    currentReducer = nextReducer;
    dispatch({
      type: ActionTypes.REPLACE
    });
  }
  /**
   * Interoperability point for observable/reactive libraries.
   * @returns {observable} A minimal observable of state changes.
   * For more information, see the observable proposal:
   * https://github.com/tc39/proposal-observable
   */

  function observable() {
    var _ref;

    var outerSubscribe = subscribe;
    return _ref = {
      /**
       * The minimal observable subscription method.
       * @param {Object} observer Any object that can be used as an observer.
       * The observer object should have a `next` method.
       * @returns {subscription} An object with an `unsubscribe` method that can
       * be used to unsubscribe the observable from the store, and prevent further
       * emission of values from the observable.
       */
      subscribe: function subscribe(observer) {
        if (typeof observer !== 'object' || observer === null) {
          throw new TypeError('Expected the observer to be an object.');
        }

        function observeState() {
          if (observer.next) {
            observer.next(getState());
          }
        }

        observeState();
        var unsubscribe = outerSubscribe(observeState);
        return {
          unsubscribe: unsubscribe
        };
      }
    }, _ref[es["a" /* default */]] = function () {
      return this;
    }, _ref;
  } // When a store is created, an "INIT" action is dispatched so that every
  // reducer returns their initial state. This effectively populates
  // the initial state tree.


  dispatch({
    type: ActionTypes.INIT
  });
  return _ref2 = {
    dispatch: dispatch,
    subscribe: subscribe,
    getState: getState,
    replaceReducer: replaceReducer
  }, _ref2[es["a" /* default */]] = observable, _ref2;
}

/**
 * Prints a warning in the console if it exists.
 *
 * @param {String} message The warning message.
 * @returns {void}
 */
function warning(message) {
  /* eslint-disable no-console */
  if (typeof console !== 'undefined' && typeof console.error === 'function') {
    console.error(message);
  }
  /* eslint-enable no-console */

  try {
    // This error was thrown as a convenience so that if you enable
    // "break on all exceptions" in your console,
    // it would pause the execution at this line.
    throw new Error(message);
  } catch (e) {} // eslint-disable-line no-empty
}

function getUndefinedStateErrorMessage(key, action) {
  var actionType = action && action.type;
  var actionDescription = actionType && "action \"" + String(actionType) + "\"" || 'an action';
  return "Given " + actionDescription + ", reducer \"" + key + "\" returned undefined. " + "To ignore an action, you must explicitly return the previous state. " + "If you want this reducer to hold no value, you can return null instead of undefined.";
}

function getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {
  var reducerKeys = Object.keys(reducers);
  var argumentName = action && action.type === ActionTypes.INIT ? 'preloadedState argument passed to createStore' : 'previous state received by the reducer';

  if (reducerKeys.length === 0) {
    return 'Store does not have a valid reducer. Make sure the argument passed ' + 'to combineReducers is an object whose values are reducers.';
  }

  if (!isPlainObject(inputState)) {
    return "The " + argumentName + " has unexpected type of \"" + {}.toString.call(inputState).match(/\s([a-z|A-Z]+)/)[1] + "\". Expected argument to be an object with the following " + ("keys: \"" + reducerKeys.join('", "') + "\"");
  }

  var unexpectedKeys = Object.keys(inputState).filter(function (key) {
    return !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key];
  });
  unexpectedKeys.forEach(function (key) {
    unexpectedKeyCache[key] = true;
  });
  if (action && action.type === ActionTypes.REPLACE) return;

  if (unexpectedKeys.length > 0) {
    return "Unexpected " + (unexpectedKeys.length > 1 ? 'keys' : 'key') + " " + ("\"" + unexpectedKeys.join('", "') + "\" found in " + argumentName + ". ") + "Expected to find one of the known reducer keys instead: " + ("\"" + reducerKeys.join('", "') + "\". Unexpected keys will be ignored.");
  }
}

function assertReducerShape(reducers) {
  Object.keys(reducers).forEach(function (key) {
    var reducer = reducers[key];
    var initialState = reducer(undefined, {
      type: ActionTypes.INIT
    });

    if (typeof initialState === 'undefined') {
      throw new Error("Reducer \"" + key + "\" returned undefined during initialization. " + "If the state passed to the reducer is undefined, you must " + "explicitly return the initial state. The initial state may " + "not be undefined. If you don't want to set a value for this reducer, " + "you can use null instead of undefined.");
    }

    if (typeof reducer(undefined, {
      type: ActionTypes.PROBE_UNKNOWN_ACTION()
    }) === 'undefined') {
      throw new Error("Reducer \"" + key + "\" returned undefined when probed with a random type. " + ("Don't try to handle " + ActionTypes.INIT + " or other actions in \"redux/*\" ") + "namespace. They are considered private. Instead, you must return the " + "current state for any unknown actions, unless it is undefined, " + "in which case you must return the initial state, regardless of the " + "action type. The initial state may not be undefined, but can be null.");
    }
  });
}
/**
 * Turns an object whose values are different reducer functions, into a single
 * reducer function. It will call every child reducer, and gather their results
 * into a single state object, whose keys correspond to the keys of the passed
 * reducer functions.
 *
 * @param {Object} reducers An object whose values correspond to different
 * reducer functions that need to be combined into one. One handy way to obtain
 * it is to use ES6 `import * as reducers` syntax. The reducers may never return
 * undefined for any action. Instead, they should return their initial state
 * if the state passed to them was undefined, and the current state for any
 * unrecognized action.
 *
 * @returns {Function} A reducer function that invokes every reducer inside the
 * passed object, and builds a state object with the same shape.
 */

function combineReducers(reducers) {
  var reducerKeys = Object.keys(reducers);
  var finalReducers = {};

  for (var i = 0; i < reducerKeys.length; i++) {
    var key = reducerKeys[i];

    if (false) {
      if (typeof reducers[key] === 'undefined') {
        warning("No reducer provided for key \"" + key + "\"");
      }
    }

    if (typeof reducers[key] === 'function') {
      finalReducers[key] = reducers[key];
    }
  }

  var finalReducerKeys = Object.keys(finalReducers);
  var unexpectedKeyCache;

  if (false) {
    unexpectedKeyCache = {};
  }

  var shapeAssertionError;

  try {
    assertReducerShape(finalReducers);
  } catch (e) {
    shapeAssertionError = e;
  }

  return function combination(state, action) {
    if (state === void 0) {
      state = {};
    }

    if (shapeAssertionError) {
      throw shapeAssertionError;
    }

    if (false) {
      var warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);

      if (warningMessage) {
        warning(warningMessage);
      }
    }

    var hasChanged = false;
    var nextState = {};

    for (var _i = 0; _i < finalReducerKeys.length; _i++) {
      var _key = finalReducerKeys[_i];
      var reducer = finalReducers[_key];
      var previousStateForKey = state[_key];
      var nextStateForKey = reducer(previousStateForKey, action);

      if (typeof nextStateForKey === 'undefined') {
        var errorMessage = getUndefinedStateErrorMessage(_key, action);
        throw new Error(errorMessage);
      }

      nextState[_key] = nextStateForKey;
      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
    }

    return hasChanged ? nextState : state;
  };
}

function bindActionCreator(actionCreator, dispatch) {
  return function () {
    return dispatch(actionCreator.apply(this, arguments));
  };
}
/**
 * Turns an object whose values are action creators, into an object with the
 * same keys, but with every function wrapped into a `dispatch` call so they
 * may be invoked directly. This is just a convenience method, as you can call
 * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.
 *
 * For convenience, you can also pass a single function as the first argument,
 * and get a function in return.
 *
 * @param {Function|Object} actionCreators An object whose values are action
 * creator functions. One handy way to obtain it is to use ES6 `import * as`
 * syntax. You may also pass a single function.
 *
 * @param {Function} dispatch The `dispatch` function available on your Redux
 * store.
 *
 * @returns {Function|Object} The object mimicking the original object, but with
 * every action creator wrapped into the `dispatch` call. If you passed a
 * function as `actionCreators`, the return value will also be a single
 * function.
 */

function bindActionCreators(actionCreators, dispatch) {
  if (typeof actionCreators === 'function') {
    return bindActionCreator(actionCreators, dispatch);
  }

  if (typeof actionCreators !== 'object' || actionCreators === null) {
    throw new Error("bindActionCreators expected an object or a function, instead received " + (actionCreators === null ? 'null' : typeof actionCreators) + ". " + "Did you write \"import ActionCreators from\" instead of \"import * as ActionCreators from\"?");
  }

  var keys = Object.keys(actionCreators);
  var boundActionCreators = {};

  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    var actionCreator = actionCreators[key];

    if (typeof actionCreator === 'function') {
      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);
    }
  }

  return boundActionCreators;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);

    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }

    ownKeys.forEach(function (key) {
      _defineProperty(target, key, source[key]);
    });
  }

  return target;
}

/**
 * Composes single-argument functions from right to left. The rightmost
 * function can take multiple arguments as it provides the signature for
 * the resulting composite function.
 *
 * @param {...Function} funcs The functions to compose.
 * @returns {Function} A function obtained by composing the argument functions
 * from right to left. For example, compose(f, g, h) is identical to doing
 * (...args) => f(g(h(...args))).
 */
function compose() {
  for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {
    funcs[_key] = arguments[_key];
  }

  if (funcs.length === 0) {
    return function (arg) {
      return arg;
    };
  }

  if (funcs.length === 1) {
    return funcs[0];
  }

  return funcs.reduce(function (a, b) {
    return function () {
      return a(b.apply(void 0, arguments));
    };
  });
}

/**
 * Creates a store enhancer that applies middleware to the dispatch method
 * of the Redux store. This is handy for a variety of tasks, such as expressing
 * asynchronous actions in a concise manner, or logging every action payload.
 *
 * See `redux-thunk` package as an example of the Redux middleware.
 *
 * Because middleware is potentially asynchronous, this should be the first
 * store enhancer in the composition chain.
 *
 * Note that each middleware will be given the `dispatch` and `getState` functions
 * as named arguments.
 *
 * @param {...Function} middlewares The middleware chain to be applied.
 * @returns {Function} A store enhancer applying the middleware.
 */

function applyMiddleware() {
  for (var _len = arguments.length, middlewares = new Array(_len), _key = 0; _key < _len; _key++) {
    middlewares[_key] = arguments[_key];
  }

  return function (createStore) {
    return function () {
      var store = createStore.apply(void 0, arguments);

      var _dispatch = function dispatch() {
        throw new Error("Dispatching while constructing your middleware is not allowed. " + "Other middleware would not be applied to this dispatch.");
      };

      var middlewareAPI = {
        getState: store.getState,
        dispatch: function dispatch() {
          return _dispatch.apply(void 0, arguments);
        }
      };
      var chain = middlewares.map(function (middleware) {
        return middleware(middlewareAPI);
      });
      _dispatch = compose.apply(void 0, chain)(store.dispatch);
      return _objectSpread({}, store, {
        dispatch: _dispatch
      });
    };
  };
}

/*
 * This is a dummy function to check if the function name has been altered by minification.
 * If the function has been minified and NODE_ENV !== 'production', warn the user.
 */

function isCrushed() {}

if (false) {
  warning('You are currently using minified code outside of NODE_ENV === "production". ' + 'This means that you are running a slower development build of Redux. ' + 'You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify ' + 'or setting mode to production in webpack (https://webpack.js.org/concepts/mode/) ' + 'to ensure you have the correct code for your production build.');
}


// CONCATENATED MODULE: ../node_modules/preact-redux/dist/preact-redux.esm.js




function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function invariant() {}

var React = {
  createContext: createContext,
  forwardRef: invariant,
  createElement: preact_min["h"]
};

var ReactReduxContext = React.createContext(null);

var preact_redux_esm_Provider = function (_Component) {
  _inheritsLoose(Provider, _Component);
  function Provider(props) {
    var _this;
    _this = _Component.call(this, props) || this;
    var store = props.store;
    _this.state = {
      storeState: store.getState(),
      store: store
    };
    return _this;
  }
  var _proto = Provider.prototype;
  _proto.componentDidMount = function componentDidMount() {
    this._isMounted = true;
    this.subscribe();
  };
  _proto.componentWillUnmount = function componentWillUnmount() {
    if (this.unsubscribe) this.unsubscribe();
    this._isMounted = false;
  };
  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    if (this.props.store !== prevProps.store) {
      if (this.unsubscribe) this.unsubscribe();
      this.subscribe();
    }
  };
  _proto.subscribe = function subscribe() {
    var _this2 = this;
    var store = this.props.store;
    this.unsubscribe = store.subscribe(function () {
      var newStoreState = store.getState();
      if (!_this2._isMounted) {
        return;
      }
      _this2.setState(function (providerState) {
        if (providerState.storeState === newStoreState) {
          return null;
        }
        return {
          storeState: newStoreState
        };
      });
    });
    var postMountStoreState = store.getState();
    if (postMountStoreState !== this.state.storeState) {
      this.setState({
        storeState: postMountStoreState
      });
    }
  };
  _proto.render = function render() {
    var Context = this.props.context || ReactReduxContext;
    return React.createElement(Context.Provider, {
      value: this.state
    }, this.props.children);
  };
  return Provider;
}(preact_min["Component"]);

function unwrapExports(x) {
  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

function createCommonjsModule(fn, module) {
  return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var reactIs_production_min = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", {
    value: !0
  });
  var c = 60103,
      d = 60106,
      e = 60107,
      f = 60108,
      g = 60114,
      h = 60109,
      k = 60110,
      l = 60111,
      m = 60111,
      n = 60112,
      p = 60113,
      q = 60115,
      r = 60116;
  function t(a) {
    if ("object" === typeof a && null !== a) {
      var u = a.$$typeof;
      switch (u) {
        case c:
          switch (a = a.type, a) {
            case l:
            case m:
            case e:
            case g:
            case f:
            case p:
              return a;
            default:
              switch (a = a && a.$$typeof, a) {
                case k:
                case n:
                case h:
                  return a;
                default:
                  return u;
              }
          }
        case r:
        case q:
        case d:
          return u;
      }
    }
  }
  function v(a) {
    return t(a) === m;
  }
  exports.typeOf = t;
  exports.AsyncMode = l;
  exports.ConcurrentMode = m;
  exports.ContextConsumer = k;
  exports.ContextProvider = h;
  exports.Element = c;
  exports.ForwardRef = n;
  exports.Fragment = e;
  exports.Lazy = r;
  exports.Memo = q;
  exports.Portal = d;
  exports.Profiler = g;
  exports.StrictMode = f;
  exports.Suspense = p;
  exports.isValidElementType = function (a) {
    return "string" === typeof a || "function" === typeof a || a === e || a === m || a === g || a === f || a === p || "object" === typeof a && null !== a && (a.$$typeof === r || a.$$typeof === q || a.$$typeof === h || a.$$typeof === k || a.$$typeof === n);
  };
  exports.isAsyncMode = function (a) {
    return v(a) || t(a) === l;
  };
  exports.isConcurrentMode = v;
  exports.isContextConsumer = function (a) {
    return t(a) === k;
  };
  exports.isContextProvider = function (a) {
    return t(a) === h;
  };
  exports.isElement = function (a) {
    return "object" === typeof a && null !== a && a.$$typeof === c;
  };
  exports.isForwardRef = function (a) {
    return t(a) === n;
  };
  exports.isFragment = function (a) {
    return t(a) === e;
  };
  exports.isLazy = function (a) {
    return t(a) === r;
  };
  exports.isMemo = function (a) {
    return t(a) === q;
  };
  exports.isPortal = function (a) {
    return t(a) === d;
  };
  exports.isProfiler = function (a) {
    return t(a) === g;
  };
  exports.isStrictMode = function (a) {
    return t(a) === f;
  };
  exports.isSuspense = function (a) {
    return t(a) === p;
  };
});
unwrapExports(reactIs_production_min);
var reactIs_production_min_1 = reactIs_production_min.typeOf;
var reactIs_production_min_2 = reactIs_production_min.AsyncMode;
var reactIs_production_min_3 = reactIs_production_min.ConcurrentMode;
var reactIs_production_min_4 = reactIs_production_min.ContextConsumer;
var reactIs_production_min_5 = reactIs_production_min.ContextProvider;
var reactIs_production_min_6 = reactIs_production_min.Element;
var reactIs_production_min_7 = reactIs_production_min.ForwardRef;
var reactIs_production_min_8 = reactIs_production_min.Fragment;
var reactIs_production_min_9 = reactIs_production_min.Lazy;
var reactIs_production_min_10 = reactIs_production_min.Memo;
var reactIs_production_min_11 = reactIs_production_min.Portal;
var reactIs_production_min_12 = reactIs_production_min.Profiler;
var reactIs_production_min_13 = reactIs_production_min.StrictMode;
var reactIs_production_min_14 = reactIs_production_min.Suspense;
var reactIs_production_min_15 = reactIs_production_min.isValidElementType;
var reactIs_production_min_16 = reactIs_production_min.isAsyncMode;
var reactIs_production_min_17 = reactIs_production_min.isConcurrentMode;
var reactIs_production_min_18 = reactIs_production_min.isContextConsumer;
var reactIs_production_min_19 = reactIs_production_min.isContextProvider;
var reactIs_production_min_20 = reactIs_production_min.isElement;
var reactIs_production_min_21 = reactIs_production_min.isForwardRef;
var reactIs_production_min_22 = reactIs_production_min.isFragment;
var reactIs_production_min_23 = reactIs_production_min.isLazy;
var reactIs_production_min_24 = reactIs_production_min.isMemo;
var reactIs_production_min_25 = reactIs_production_min.isPortal;
var reactIs_production_min_26 = reactIs_production_min.isProfiler;
var reactIs_production_min_27 = reactIs_production_min.isStrictMode;
var reactIs_production_min_28 = reactIs_production_min.isSuspense;

var reactIs = createCommonjsModule(function (module) {
  {
    module.exports = reactIs_production_min;
  }
});
var reactIs_1 = reactIs.isValidElementType;
var reactIs_2 = reactIs.isContextConsumer;

var REACT_STATICS = {
  childContextTypes: true,
  contextType: true,
  contextTypes: true,
  defaultProps: true,
  displayName: true,
  getDefaultProps: true,
  getDerivedStateFromError: true,
  getDerivedStateFromProps: true,
  mixins: true,
  propTypes: true,
  type: true
};
var KNOWN_STATICS = {
  name: true,
  length: true,
  prototype: true,
  caller: true,
  callee: true,
  arguments: true,
  arity: true
};
var FORWARD_REF_STATICS = {
  '$$typeof': true,
  render: true,
  defaultProps: true,
  displayName: true,
  propTypes: true
};
var MEMO_STATICS = {
  '$$typeof': true,
  compare: true,
  defaultProps: true,
  displayName: true,
  propTypes: true,
  type: true
};
var TYPE_STATICS = {};
TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
function getStatics(component) {
  if (reactIs.isMemo(component)) {
    return MEMO_STATICS;
  }
  return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;
}
var defineProperty = Object.defineProperty;
var getOwnPropertyNames = Object.getOwnPropertyNames;
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
var getPrototypeOf = Object.getPrototypeOf;
var objectPrototype = Object.prototype;
function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
  if (typeof sourceComponent !== 'string') {
    if (objectPrototype) {
      var inheritedComponent = getPrototypeOf(sourceComponent);
      if (inheritedComponent && inheritedComponent !== objectPrototype) {
        hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
      }
    }
    var keys = getOwnPropertyNames(sourceComponent);
    if (getOwnPropertySymbols) {
      keys = keys.concat(getOwnPropertySymbols(sourceComponent));
    }
    var targetStatics = getStatics(targetComponent);
    var sourceStatics = getStatics(sourceComponent);
    for (var i = 0; i < keys.length; ++i) {
      var key = keys[i];
      if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
        var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
        try {
          defineProperty(targetComponent, key, descriptor);
        } catch (e) {}
      }
    }
    return targetComponent;
  }
  return targetComponent;
}
var hoistNonReactStatics_cjs = hoistNonReactStatics;

function connectAdvanced(selectorFactory, _temp) {
  var _ref = _temp === void 0 ? {} : _temp,
      _ref$getDisplayName = _ref.getDisplayName,
      getDisplayName = _ref$getDisplayName === void 0 ? function (name) {
    return "ConnectAdvanced(" + name + ")";
  } : _ref$getDisplayName,
      _ref$methodName = _ref.methodName,
      methodName = _ref$methodName === void 0 ? 'connectAdvanced' : _ref$methodName,
      _ref$renderCountProp = _ref.renderCountProp,
      renderCountProp = _ref$renderCountProp === void 0 ? undefined : _ref$renderCountProp,
      _ref$shouldHandleStat = _ref.shouldHandleStateChanges,
      shouldHandleStateChanges = _ref$shouldHandleStat === void 0 ? true : _ref$shouldHandleStat,
      _ref$storeKey = _ref.storeKey,
      storeKey = _ref$storeKey === void 0 ? 'store' : _ref$storeKey,
      _ref$withRef = _ref.withRef,
      _ref$forwardRef = _ref.forwardRef,
      forwardRef = _ref$forwardRef === void 0 ? false : _ref$forwardRef,
      _ref$context = _ref.context,
      context = _ref$context === void 0 ? ReactReduxContext : _ref$context,
      connectOptions = _objectWithoutPropertiesLoose(_ref, ["getDisplayName", "methodName", "renderCountProp", "shouldHandleStateChanges", "storeKey", "withRef", "forwardRef", "context"]);
  var customStoreWarningMessage = 'To use a custom Redux store for specific components,  create a custom React context with ' + "React.createContext(), and pass the context object to React Redux's Provider and specific components" + ' like:  <Provider context={MyContext}><ConnectedComponent context={MyContext} /></Provider>. ' + 'You may also pass a {context : MyContext} option to connect';
  var Context = context;
  return function wrapWithConnect(WrappedComponent) {
    var wrappedComponentName = WrappedComponent.displayName || WrappedComponent.name || 'Component';
    var displayName = getDisplayName(wrappedComponentName);
    var selectorFactoryOptions = _extends({}, connectOptions, {
      getDisplayName: getDisplayName,
      methodName: methodName,
      renderCountProp: renderCountProp,
      shouldHandleStateChanges: shouldHandleStateChanges,
      storeKey: storeKey,
      displayName: displayName,
      wrappedComponentName: wrappedComponentName,
      WrappedComponent: WrappedComponent
    });
    var pure = connectOptions.pure;
    var OuterBaseComponent = preact_min["Component"];
    if (pure) {
      OuterBaseComponent = preact_min["Component"];
    }
    function makeDerivedPropsSelector() {
      var lastProps;
      var lastState;
      var lastDerivedProps;
      var lastStore;
      var lastSelectorFactoryOptions;
      var sourceSelector;
      return function selectDerivedProps(state, props, store, selectorFactoryOptions) {
        if (pure && lastProps === props && lastState === state) {
          return lastDerivedProps;
        }
        if (store !== lastStore || lastSelectorFactoryOptions !== selectorFactoryOptions) {
          lastStore = store;
          lastSelectorFactoryOptions = selectorFactoryOptions;
          sourceSelector = selectorFactory(store.dispatch, selectorFactoryOptions);
        }
        lastProps = props;
        lastState = state;
        var nextProps = sourceSelector(state, props);
        lastDerivedProps = nextProps;
        return lastDerivedProps;
      };
    }
    function makeChildElementSelector() {
      var lastChildProps, lastForwardRef, lastChildElement, lastComponent;
      return function selectChildElement(WrappedComponent, childProps, forwardRef) {
        if (childProps !== lastChildProps || forwardRef !== lastForwardRef || lastComponent !== WrappedComponent) {
          lastChildProps = childProps;
          lastForwardRef = forwardRef;
          lastComponent = WrappedComponent;
          lastChildElement = React.createElement(WrappedComponent, _extends({}, childProps, {
            ref: forwardRef
          }));
        }
        return lastChildElement;
      };
    }
    var Connect = function (_OuterBaseComponent) {
      _inheritsLoose(Connect, _OuterBaseComponent);
      function Connect(props) {
        var _this;
        _this = _OuterBaseComponent.call(this, props) || this;
        invariant(forwardRef ? !props.wrapperProps[storeKey] : !props[storeKey], 'Passing redux store in props has been removed and does not do anything. ' + customStoreWarningMessage);
        _this.selectDerivedProps = makeDerivedPropsSelector();
        _this.selectChildElement = makeChildElementSelector();
        _this.indirectRenderWrappedComponent = _this.indirectRenderWrappedComponent.bind(_assertThisInitialized(_this));
        return _this;
      }
      var _proto = Connect.prototype;
      _proto.indirectRenderWrappedComponent = function indirectRenderWrappedComponent(value) {
        return this.renderWrappedComponent(value);
      };
      _proto.renderWrappedComponent = function renderWrappedComponent(value) {
        var storeState = value.storeState,
            store = value.store;
        var wrapperProps = this.props;
        var forwardedRef;
        if (forwardRef) {
          wrapperProps = this.props.wrapperProps;
          forwardedRef = this.props.forwardedRef;
        }
        var derivedProps = this.selectDerivedProps(storeState, wrapperProps, store, selectorFactoryOptions);
        return this.selectChildElement(WrappedComponent, derivedProps, forwardedRef);
      };
      _proto.render = function render() {
        var ContextToUse = this.props.context && this.props.context.Consumer && reactIs_2(React.createElement(this.props.context.Consumer, null)) ? this.props.context : Context;
        return React.createElement(ContextToUse.Consumer, null, this.indirectRenderWrappedComponent);
      };
      return Connect;
    }(OuterBaseComponent);
    Connect.WrappedComponent = WrappedComponent;
    Connect.displayName = displayName;
    if (forwardRef) {
      var forwarded = React.forwardRef(function forwardConnectRef(props, ref) {
        return React.createElement(Connect, {
          wrapperProps: props,
          forwardedRef: ref
        });
      });
      forwarded.displayName = displayName;
      forwarded.WrappedComponent = WrappedComponent;
      return hoistNonReactStatics_cjs(forwarded, WrappedComponent);
    }
    return hoistNonReactStatics_cjs(Connect, WrappedComponent);
  };
}

var hasOwn = Object.prototype.hasOwnProperty;
function is(x, y) {
  if (x === y) {
    return x !== 0 || y !== 0 || 1 / x === 1 / y;
  } else {
    return x !== x && y !== y;
  }
}
function shallowEqual(objA, objB) {
  if (is(objA, objB)) return true;
  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
    return false;
  }
  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);
  if (keysA.length !== keysB.length) return false;
  for (var i = 0; i < keysA.length; i++) {
    if (!hasOwn.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
      return false;
    }
  }
  return true;
}

function wrapMapToPropsConstant(getConstant) {
  return function initConstantSelector(dispatch, options) {
    var constant = getConstant(dispatch, options);
    function constantSelector() {
      return constant;
    }
    constantSelector.dependsOnOwnProps = false;
    return constantSelector;
  };
}
function getDependsOnOwnProps(mapToProps) {
  return mapToProps.dependsOnOwnProps !== null && mapToProps.dependsOnOwnProps !== undefined ? Boolean(mapToProps.dependsOnOwnProps) : mapToProps.length !== 1;
}
function wrapMapToPropsFunc(mapToProps, methodName) {
  return function initProxySelector(dispatch, _ref) {
    var displayName = _ref.displayName;
    var proxy = function mapToPropsProxy(stateOrDispatch, ownProps) {
      return proxy.dependsOnOwnProps ? proxy.mapToProps(stateOrDispatch, ownProps) : proxy.mapToProps(stateOrDispatch);
    };
    proxy.dependsOnOwnProps = true;
    proxy.mapToProps = function detectFactoryAndVerify(stateOrDispatch, ownProps) {
      proxy.mapToProps = mapToProps;
      proxy.dependsOnOwnProps = getDependsOnOwnProps(mapToProps);
      var props = proxy(stateOrDispatch, ownProps);
      if (typeof props === 'function') {
        proxy.mapToProps = props;
        proxy.dependsOnOwnProps = getDependsOnOwnProps(props);
        props = proxy(stateOrDispatch, ownProps);
      }
      return props;
    };
    return proxy;
  };
}

function whenMapDispatchToPropsIsFunction(mapDispatchToProps) {
  return typeof mapDispatchToProps === 'function' ? wrapMapToPropsFunc(mapDispatchToProps, 'mapDispatchToProps') : undefined;
}
function whenMapDispatchToPropsIsMissing(mapDispatchToProps) {
  return !mapDispatchToProps ? wrapMapToPropsConstant(function (dispatch) {
    return {
      dispatch: dispatch
    };
  }) : undefined;
}
function whenMapDispatchToPropsIsObject(mapDispatchToProps) {
  return mapDispatchToProps && typeof mapDispatchToProps === 'object' ? wrapMapToPropsConstant(function (dispatch) {
    return bindActionCreators(mapDispatchToProps, dispatch);
  }) : undefined;
}
var defaultMapDispatchToPropsFactories = [whenMapDispatchToPropsIsFunction, whenMapDispatchToPropsIsMissing, whenMapDispatchToPropsIsObject];

function whenMapStateToPropsIsFunction(mapStateToProps) {
  return typeof mapStateToProps === 'function' ? wrapMapToPropsFunc(mapStateToProps, 'mapStateToProps') : undefined;
}
function whenMapStateToPropsIsMissing(mapStateToProps) {
  return !mapStateToProps ? wrapMapToPropsConstant(function () {
    return {};
  }) : undefined;
}
var defaultMapStateToPropsFactories = [whenMapStateToPropsIsFunction, whenMapStateToPropsIsMissing];

function defaultMergeProps(stateProps, dispatchProps, ownProps) {
  return _extends({}, ownProps, stateProps, dispatchProps);
}
function wrapMergePropsFunc(mergeProps) {
  return function initMergePropsProxy(dispatch, _ref) {
    var displayName = _ref.displayName,
        pure = _ref.pure,
        areMergedPropsEqual = _ref.areMergedPropsEqual;
    var hasRunOnce = false;
    var mergedProps;
    return function mergePropsProxy(stateProps, dispatchProps, ownProps) {
      var nextMergedProps = mergeProps(stateProps, dispatchProps, ownProps);
      if (hasRunOnce) {
        if (!pure || !areMergedPropsEqual(nextMergedProps, mergedProps)) mergedProps = nextMergedProps;
      } else {
        hasRunOnce = true;
        mergedProps = nextMergedProps;
      }
      return mergedProps;
    };
  };
}
function whenMergePropsIsFunction(mergeProps) {
  return typeof mergeProps === 'function' ? wrapMergePropsFunc(mergeProps) : undefined;
}
function whenMergePropsIsOmitted(mergeProps) {
  return !mergeProps ? function () {
    return defaultMergeProps;
  } : undefined;
}
var defaultMergePropsFactories = [whenMergePropsIsFunction, whenMergePropsIsOmitted];

function impureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch) {
  return function impureFinalPropsSelector(state, ownProps) {
    return mergeProps(mapStateToProps(state, ownProps), mapDispatchToProps(dispatch, ownProps), ownProps);
  };
}
function pureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, _ref) {
  var areStatesEqual = _ref.areStatesEqual,
      areOwnPropsEqual = _ref.areOwnPropsEqual,
      areStatePropsEqual = _ref.areStatePropsEqual;
  var hasRunAtLeastOnce = false;
  var state;
  var ownProps;
  var stateProps;
  var dispatchProps;
  var mergedProps;
  function handleFirstCall(firstState, firstOwnProps) {
    state = firstState;
    ownProps = firstOwnProps;
    stateProps = mapStateToProps(state, ownProps);
    dispatchProps = mapDispatchToProps(dispatch, ownProps);
    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
    hasRunAtLeastOnce = true;
    return mergedProps;
  }
  function handleNewPropsAndNewState() {
    stateProps = mapStateToProps(state, ownProps);
    if (mapDispatchToProps.dependsOnOwnProps) dispatchProps = mapDispatchToProps(dispatch, ownProps);
    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
    return mergedProps;
  }
  function handleNewProps() {
    if (mapStateToProps.dependsOnOwnProps) stateProps = mapStateToProps(state, ownProps);
    if (mapDispatchToProps.dependsOnOwnProps) dispatchProps = mapDispatchToProps(dispatch, ownProps);
    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
    return mergedProps;
  }
  function handleNewState() {
    var nextStateProps = mapStateToProps(state, ownProps);
    var statePropsChanged = !areStatePropsEqual(nextStateProps, stateProps);
    stateProps = nextStateProps;
    if (statePropsChanged) mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
    return mergedProps;
  }
  function handleSubsequentCalls(nextState, nextOwnProps) {
    var propsChanged = !areOwnPropsEqual(nextOwnProps, ownProps);
    var stateChanged = !areStatesEqual(nextState, state);
    state = nextState;
    ownProps = nextOwnProps;
    if (propsChanged && stateChanged) return handleNewPropsAndNewState();
    if (propsChanged) return handleNewProps();
    if (stateChanged) return handleNewState();
    return mergedProps;
  }
  return function pureFinalPropsSelector(nextState, nextOwnProps) {
    return hasRunAtLeastOnce ? handleSubsequentCalls(nextState, nextOwnProps) : handleFirstCall(nextState, nextOwnProps);
  };
}
function finalPropsSelectorFactory(dispatch, _ref2) {
  var initMapStateToProps = _ref2.initMapStateToProps,
      initMapDispatchToProps = _ref2.initMapDispatchToProps,
      initMergeProps = _ref2.initMergeProps,
      options = _objectWithoutPropertiesLoose(_ref2, ["initMapStateToProps", "initMapDispatchToProps", "initMergeProps"]);
  var mapStateToProps = initMapStateToProps(dispatch, options);
  var mapDispatchToProps = initMapDispatchToProps(dispatch, options);
  var mergeProps = initMergeProps(dispatch, options);
  var selectorFactory = options.pure ? pureFinalPropsSelectorFactory : impureFinalPropsSelectorFactory;
  return selectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, options);
}

function match(arg, factories, name) {
  for (var i = factories.length - 1; i >= 0; i--) {
    var result = factories[i](arg);
    if (result) return result;
  }
  return function (dispatch, options) {
    throw new Error("Invalid value of type " + typeof arg + " for " + name + " argument when connecting component " + options.wrappedComponentName + ".");
  };
}
function strictEqual(a, b) {
  return a === b;
}
function createConnect(_temp) {
  var _ref = _temp === void 0 ? {} : _temp,
      _ref$connectHOC = _ref.connectHOC,
      connectHOC = _ref$connectHOC === void 0 ? connectAdvanced : _ref$connectHOC,
      _ref$mapStateToPropsF = _ref.mapStateToPropsFactories,
      mapStateToPropsFactories = _ref$mapStateToPropsF === void 0 ? defaultMapStateToPropsFactories : _ref$mapStateToPropsF,
      _ref$mapDispatchToPro = _ref.mapDispatchToPropsFactories,
      mapDispatchToPropsFactories = _ref$mapDispatchToPro === void 0 ? defaultMapDispatchToPropsFactories : _ref$mapDispatchToPro,
      _ref$mergePropsFactor = _ref.mergePropsFactories,
      mergePropsFactories = _ref$mergePropsFactor === void 0 ? defaultMergePropsFactories : _ref$mergePropsFactor,
      _ref$selectorFactory = _ref.selectorFactory,
      selectorFactory = _ref$selectorFactory === void 0 ? finalPropsSelectorFactory : _ref$selectorFactory;
  return function connect(mapStateToProps, mapDispatchToProps, mergeProps, _temp2) {
    var _ref2 = _temp2 === void 0 ? {} : _temp2,
        _ref2$pure = _ref2.pure,
        pure = _ref2$pure === void 0 ? true : _ref2$pure,
        _ref2$areStatesEqual = _ref2.areStatesEqual,
        areStatesEqual = _ref2$areStatesEqual === void 0 ? strictEqual : _ref2$areStatesEqual,
        _ref2$areOwnPropsEqua = _ref2.areOwnPropsEqual,
        areOwnPropsEqual = _ref2$areOwnPropsEqua === void 0 ? shallowEqual : _ref2$areOwnPropsEqua,
        _ref2$areStatePropsEq = _ref2.areStatePropsEqual,
        areStatePropsEqual = _ref2$areStatePropsEq === void 0 ? shallowEqual : _ref2$areStatePropsEq,
        _ref2$areMergedPropsE = _ref2.areMergedPropsEqual,
        areMergedPropsEqual = _ref2$areMergedPropsE === void 0 ? shallowEqual : _ref2$areMergedPropsE,
        extraOptions = _objectWithoutPropertiesLoose(_ref2, ["pure", "areStatesEqual", "areOwnPropsEqual", "areStatePropsEqual", "areMergedPropsEqual"]);
    var initMapStateToProps = match(mapStateToProps, mapStateToPropsFactories, 'mapStateToProps');
    var initMapDispatchToProps = match(mapDispatchToProps, mapDispatchToPropsFactories, 'mapDispatchToProps');
    var initMergeProps = match(mergeProps, mergePropsFactories, 'mergeProps');
    return connectHOC(selectorFactory, _extends({
      methodName: 'connect',
      getDisplayName: function getDisplayName(name) {
        return "Connect(" + name + ")";
      },
      shouldHandleStateChanges: Boolean(mapStateToProps),
      initMapStateToProps: initMapStateToProps,
      initMapDispatchToProps: initMapDispatchToProps,
      initMergeProps: initMergeProps,
      pure: pure,
      areStatesEqual: areStatesEqual,
      areOwnPropsEqual: areOwnPropsEqual,
      areStatePropsEqual: areStatePropsEqual,
      areMergedPropsEqual: areMergedPropsEqual
    }, extraOptions));
  };
}
var connect = createConnect();

var index = {
  Provider: preact_redux_esm_Provider,
  connect: connect,
  connectAdvanced: connectAdvanced,
  ReactReduxContext: ReactReduxContext
};

/* harmony default export */ var preact_redux_esm = (index);

//# sourceMappingURL=preact-redux.esm.js.map
// CONCATENATED MODULE: ../node_modules/redux-thunk/es/index.js
function createThunkMiddleware(extraArgument) {
  return function (_ref) {
    var dispatch = _ref.dispatch,
        getState = _ref.getState;
    return function (next) {
      return function (action) {
        if (typeof action === 'function') {
          return action(dispatch, getState, extraArgument);
        }

        return next(action);
      };
    };
  };
}

var thunk = createThunkMiddleware();
thunk.withExtraArgument = createThunkMiddleware;

/* harmony default export */ var redux_thunk_es = (thunk);
// CONCATENATED MODULE: ./components/header/headerActionCreator.js
var homeActions = {
  PERSON_DATA: "PERSON_DATA"
};

var setPersonData = function setPersonData(personData) {
  return {
    type: homeActions.PERSON_DATA,
    payload: personData
  };
};

var headerActionCreator_watchPersonData = function watchPersonData() {
  return function (dispatch) {
    //   console.log("dsa.fjjbadskfjanbsd");
    dispatch(setPersonData({ name: "Yash" }));
  };
};
// CONCATENATED MODULE: ./components/header/headerReducer.js
var headerReducer__extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



var initialState = {
  personData: { name: " Yash in comp" }
};

var headerReducer_headerReducer = function headerReducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
  var action = arguments[1];

  //   console.log("lasdnfljadsnfjlnsdljfnjadsnfnasdjnfsdf", action);
  switch (action.type) {
    case homeActions.PERSON_DATA:
      //   console.log(homeActions);
      return headerReducer__extends({}, state, { personData: action.payload });
    default:
      return state;
  }
};

/* harmony default export */ var header_headerReducer = (headerReducer_headerReducer);
// CONCATENATED MODULE: ./actions/videoActions.js


var videoActions = {
  SET_VIDEO_PLAYER_DATA: "SET_VIDEO_PLAYER_DATA"
};

var setVideoPlayerDataAction = function setVideoPlayerDataAction(videoData) {
  return {
    type: videoActions.SET_VIDEO_PLAYER_DATA,
    payload: videoData
  };
};

var videoActions_setVideoPlayerData = function setVideoPlayerData(videoData) {
  return function (dispatch) {
    //   console.log("dsa.fjjbadskfjanbsd");
    dispatch(setVideoPlayerDataAction(videoData));
    Object(preact_router_es["route"])("/videoplayer");
    console.log(videoData);
  };
};
// CONCATENATED MODULE: ./reducers/videoReducer.js
var videoReducer__extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



var videoReducer_initialState = {
  videoData: { url: null }
};

var videoReducer_videoReducer = function videoReducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : videoReducer_initialState;
  var action = arguments[1];

  switch (action.type) {
    case videoActions.SET_VIDEO_PLAYER_DATA:
      //   console.log(homeActions);
      return videoReducer__extends({}, state, { videoData: action.payload });
    default:
      return state;
  }
};

/* harmony default export */ var reducers_videoReducer = (videoReducer_videoReducer);
// CONCATENATED MODULE: ./redux/rootReducer.js





var rootReducer = combineReducers({
  homeState: header_headerReducer,
  videoState: reducers_videoReducer
});

/* harmony default export */ var redux_rootReducer = (rootReducer);
// EXTERNAL MODULE: ../node_modules/redux-logger/dist/redux-logger.js
var redux_logger = __webpack_require__("XYJE");
var redux_logger_default = /*#__PURE__*/__webpack_require__.n(redux_logger);

// CONCATENATED MODULE: ./redux/app-redux.js





var store = createStore(redux_rootReducer, applyMiddleware(redux_thunk_es, redux_logger["logger"]));


// EXTERNAL MODULE: ../node_modules/preact-router/match.js
var preact_router_match = __webpack_require__("sw5u");
var match_default = /*#__PURE__*/__webpack_require__.n(preact_router_match);

// EXTERNAL MODULE: ./components/header/style.scss
var header_style = __webpack_require__("/Umn");
var header_style_default = /*#__PURE__*/__webpack_require__.n(header_style);

// CONCATENATED MODULE: ./components/header/index.js


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }







var header_Header = function (_Component) {
  _inherits(Header, _Component);

  function Header() {
    _classCallCheck(this, Header);

    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
  }

  Header.prototype.componentDidMount = function componentDidMount() {
    this.props.watchPersonData();
  };

  Header.prototype.render = function render(props) {
    console.log(props);
    return Object(preact_min["h"])(
      "header",
      { "class": header_style_default.a.header },
      Object(preact_min["h"])(
        "nav",
        null,
        Object(preact_min["h"])(
          preact_router_match["Link"],
          { activeClassName: header_style_default.a.active, href: "/" },
          "Home"
        ),
        Object(preact_min["h"])(
          preact_router_match["Link"],
          { activeClassName: header_style_default.a.active, href: "/profile" },
          "Me"
        ),
        Object(preact_min["h"])(
          preact_router_match["Link"],
          { activeClassName: header_style_default.a.active, href: "/profile/john" },
          "John"
        )
      )
    );
  };

  return Header;
}(preact_min["Component"]);

var mapStateToProps = function mapStateToProps(state) {
  return {
    personData: state.homeState.personData
  };
};

var header_mapDispatchToProps = function mapDispatchToProps(dispatch) {
  return {
    watchPersonData: function watchPersonData() {
      return dispatch(headerActionCreator_watchPersonData());
    }
  };
};

/* harmony default export */ var header = (connect(mapStateToProps, header_mapDispatchToProps)(header_Header));
// EXTERNAL MODULE: ./routes/home/style.scss
var home_style = __webpack_require__("Lglr");
var home_style_default = /*#__PURE__*/__webpack_require__.n(home_style);

// CONCATENATED MODULE: ./constants/applicationConstants.js
var liveStreamMockUrl = "https://d3v28xe0wivrcx.cloudfront.net/out/v1/dd25dfe136e141fb8c576c9f17f133cb/index.m3u8";

var mockItems = [{
  src: "https://res.cloudinary.com/www-curefit-com/image/upload/w_300,ar_1.85,fl_progressive,f_auto,q_auto/dpr_2/v1/cult-media/v2web/workouts/22_id/D_CLP_2019-04-02T12:55:54.538Z.png"
}, {
  src: "https://res.cloudinary.com/www-curefit-com/image/upload/w_300,ar_1.85,fl_progressive,f_auto,q_auto/dpr_2/v1/cult-media/v2web/workouts/57_id/D_CLP_2018-08-02T12:37:43.989Z.png"
}, {
  src: "https://res.cloudinary.com/www-curefit-com/image/upload/w_300,ar_1.85,fl_progressive,f_auto,q_auto/dpr_2/v1/cult-media/v2web/workouts/84_id/D_CLP_2019-04-02T12:52:39.013Z.png"
}, {
  src: "https://res.cloudinary.com/www-curefit-com/image/upload/w_300,ar_1.85,fl_progressive,f_auto,q_auto/dpr_2/v1/cult-media/v2web/workouts/5_id/D_CLP_2019-04-03T12:59:20.308Z.png"
}, {
  src: "https://res.cloudinary.com/www-curefit-com/image/upload/w_300,ar_1.85,fl_progressive,f_auto,q_auto/dpr_2/v1/cult-media/v2web/workouts/99_id/D_CLP_2019-04-02T12:57:02.812Z.png"
}, {
  src: "https://res.cloudinary.com/www-curefit-com/image/upload/w_300,ar_1.85,fl_progressive,f_auto,q_auto/dpr_2/v1/cult-media/v2web/workouts/sports_conditioning/d_sports_conditioning_clp_v3.jpg"
}];
// EXTERNAL MODULE: ../node_modules/hls.js/dist/hls.js
var dist_hls = __webpack_require__("ME5n");
var hls_default = /*#__PURE__*/__webpack_require__.n(dist_hls);

// CONCATENATED MODULE: ./utils/liveStreamUtil.js



var liveStreamUtil_loadHLSForSupportingBrowser = function loadHLSForSupportingBrowser(videoElement) {
  var hls = new hls_default.a();
  hls.loadSource(liveStreamMockUrl);
  hls.attachMedia(videoElement);
  hls.on(hls_default.a.Events.MANIFEST_PARSED, function () {
    videoElement.play();
  });
};

var liveStreamUtil_loadHLSForUnsupportingBrowser = function loadHLSForUnsupportingBrowser(videoElement) {
  videoElement.src = liveStreamMockUrl;
  videoElement.addEventListener("loadedmetadata", function () {
    videoElement.play();
  });
};

var liveStreamUtil_addLiveStreamSupport = function addLiveStreamSupport(videoElement) {
  if (hls_default.a.isSupported()) {
    liveStreamUtil_loadHLSForSupportingBrowser(videoElement);
  } else if (videoElement.canPlayType("application/vnd.apple.mpegurl")) {
    liveStreamUtil_loadHLSForUnsupportingBrowser(videoElement);
  }
};

var removeLoadMetadataEventListner = function removeLoadMetadataEventListner(videoElement) {
  videoElement.addEventListener("loadedmetadata", function () {
    videoElement.play();
  });
};
// EXTERNAL MODULE: ./components/playerView/playerView.scss
var playerView = __webpack_require__("wHSP");
var playerView_default = /*#__PURE__*/__webpack_require__.n(playerView);

// CONCATENATED MODULE: ./components/playerView/playerView.js


function playerView__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function playerView__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function playerView__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }



// const videoUrl = require("./sample_video.mp4");



var remoteActions = {
  UP: 38,
  DOWN: 40,
  LEFT: 37,
  RIGHT: 39,
  SELECT: 13,
  BACK: 8,
  REWIND: 227,
  PLAY_PAUSE: 179,
  FAST_FORWARD: 228
};

var playerView_PlayerView = function (_Component) {
  playerView__inherits(PlayerView, _Component);

  function PlayerView(props) {
    playerView__classCallCheck(this, PlayerView);

    var _this = playerView__possibleConstructorReturn(this, _Component.call(this, props));

    _this.playPauseVideo = function () {
      if (_this.videoRef.paused) {
        _this.videoRef.play();
        _this.videoRef.innerHTML = "Pause";
      } else {
        _this.videoRef.pause();
        _this.videoRef.innerHTML = "Play";
      }
    };

    _this.increaseSeekBarByTenSeconds = function () {
      var videoRef = _this.videoRef;
      var seekBarRef = _this.seekBarRef;
      debugger;
      var time = videoRef.duration * (seekBarRef.value / 100);
      videoRef.currentTime = time + 10;
    };

    _this.decreaseSeekBarByTenSeconds = function () {
      var videoRef = _this.videoRef;
      var seekBarRef = _this.seekBarRef;
      debugger;
      var time = videoRef.duration * (seekBarRef.value / 100);
      videoRef.currentTime = time - 10;
    };

    _this.handleSeekbarChange = function (seekBar) {
      debugger;
      console.log(seekBar);
      var videoRef = _this.videoRef;
      debugger;
      var time = videoRef.duration * (seekBar.target.value / 100);
      videoRef.currentTime = time;
    };

    _this.handleVideoTimeUpdate = function () {
      var videoRef = _this.videoRef;
      var seekBarRef = _this.seekBarRef;
      var value = 100 / videoRef.duration * videoRef.currentTime;
      seekBarRef.value = value;
    };

    _this.handleMouseDown = function () {
      var videoRef = _this.videoRef;
      videoRef.pause();
    };

    _this.handleMouseUp = function () {
      var videoRef = _this.videoRef;
      videoRef.play();
    };

    debugger;
    // this.videoRef = React.createRef();
    // this.seekBarRef = React.createRef();
    _this.playPauseVideo = _this.playPauseVideo.bind(_this);
    return _this;
  }

  PlayerView.prototype.componentDidMount = function componentDidMount() {
    var that = this;
    window.addEventListener("keyup", function (e) {
      console.log(e);
      if (e.keyCode === remoteActions.SELECT) {
        that.playPauseVideo();
      } else if (e.keyCode === remoteActions.REWIND) {
        that.decreaseSeekBarByTenSeconds();
      } else if (e.keyCode === remoteActions.FAST_FORWARD) {
        that.increaseSeekBarByTenSeconds();
      } else if (e.keyCode === remoteActions.LEFT) {
        that.decreaseSeekBarByTenSeconds();
      } else if (e.keyCode === remoteActions.RIGHT) {
        that.increaseSeekBarByTenSeconds();
      } else if (e.keyCode === remoteActions.PLAY_PAUSE) {
        that.playPauseVideo();
      }
    });
    if (this.props.live) {
      var video = document.getElementById("liveVideo");
      liveStreamUtil_addLiveStreamSupport(video);
    }
  };

  PlayerView.prototype.componentWillUnmount = function componentWillUnmount() {
    if (this.props.live) {
      var video = document.getElementById("liveVideo");
      removeLoadMetadataEventListner(video);
    }
  };

  PlayerView.prototype.render = function render(props) {
    var _this2 = this;

    console.log(this.seekBarRef);
    var src = props.src;

    if (this.seekBarRef) {
      console.log(this.seekBarRef.value);
    }
    console.log(src);
    return Object(preact_min["h"])(
      "div",
      null,
      !props.live ? Object(preact_min["h"])(
        "video",
        {
          onKeyUp: function onKeyUp(e) {
            console.log(e);
          },
          onTimeUpdate: this.handleVideoTimeUpdate,
          id: "custom_video"
          //   controls="controls"
          , style: {
            position: "absolute",
            top: "0",
            left: "0",
            width: "100%",
            zIndex: 9
          },
          ref: function ref(videoRef) {
            return _this2.videoRef = videoRef;
          }
          // src={require("./sample_video.mp4")}
          // src={src}
          // src="https://video-dev.github.io/streams/x36xhzz/x36xhzz.m3u8"
          //   autoPlay
        },
        Object(preact_min["h"])("source", { src: src, type: "video/mp4" })
      ) : Object(preact_min["h"])("video", {
        onKeyUp: function onKeyUp(e) {
          console.log(e);
        },
        onTimeUpdate: this.handleVideoTimeUpdate,
        style: {
          position: "absolute",
          top: "0",
          left: "0",
          width: "100%",
          zIndex: 9
        },
        ref: function ref(videoRef) {
          return _this2.videoRef = videoRef;
        },
        id: "liveVideo"
      }),
      Object(preact_min["h"])(
        "div",
        { id: "vide_controls_bar", className: playerView_default.a.video_controls },
        Object(preact_min["h"])(
          "button",
          {
            style: { width: "10vw", color: "white" },
            id: "playpausebtn",
            onClick: this.playPauseVideo
          },
          "Pause"
        ),
        Object(preact_min["h"])(
          "button",
          { style: { width: "90vw", padding: "1rem" } },
          Object(preact_min["h"])("input", {
            style: { width: "100%" },
            ref: function ref(seekBarRef) {
              return _this2.seekBarRef = seekBarRef;
            },
            onChange: this.handleSeekbarChange,
            onMouseDown: this.handleMouseDown,
            onMouseUp: this.handleMouseUp,
            type: "range",
            id: "seek-bar",
            value: "0"
          })
        )
      )
    );
  };

  return PlayerView;
}(preact_min["Component"]);

var playerView_mapStateToProps = function mapStateToProps(state) {
  return {
    src: state.videoState.videoData.src
  };
};

var playerView_mapDispatchToProps = function mapDispatchToProps(dispatch) {
  return {
    setVideoPlayerData: function (_setVideoPlayerData) {
      function setVideoPlayerData(_x) {
        return _setVideoPlayerData.apply(this, arguments);
      }

      setVideoPlayerData.toString = function () {
        return _setVideoPlayerData.toString();
      };

      return setVideoPlayerData;
    }(function (videoData) {
      return dispatch(setVideoPlayerData(videoData));
    })
  };
};

/* harmony default export */ var playerView_playerView = (connect(playerView_mapStateToProps, playerView_mapDispatchToProps)(playerView_PlayerView));
// EXTERNAL MODULE: ./components/shovelerView/shovelerView.scss
var shovelerView = __webpack_require__("wV7G");
var shovelerView_default = /*#__PURE__*/__webpack_require__.n(shovelerView);

// EXTERNAL MODULE: ../node_modules/jquery/dist/jquery.js
var jquery = __webpack_require__("juYr");
var jquery_default = /*#__PURE__*/__webpack_require__.n(jquery);

// CONCATENATED MODULE: ./components/shovelerView/shovelerView.js


function shovelerView__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function shovelerView__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function shovelerView__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }












// const videoImg = require("../../l11.jpg");

var shovelerView_ShovelerView = function (_Component) {
  shovelerView__inherits(ShovelerView, _Component);

  function ShovelerView(props) {
    shovelerView__classCallCheck(this, ShovelerView);

    var _this = shovelerView__possibleConstructorReturn(this, _Component.call(this, props));

    _this.scrollCarousel = function (e) {
      var parentElement = e.currentTarget.parentElement;
      var _e$target = e.target,
          offsetLeft = _e$target.offsetLeft,
          offsetTop = _e$target.offsetTop;

      console.log(e, offsetTop);
      jquery_default()(parentElement).animate({
        scrollLeft: offsetLeft - 100
        // scrollTop: offsetTop - 100
      }, 300);
    };

    _this.handleButtonFocus = function (e, item) {
      _this.scrollCarousel(e);
    };

    _this.handleOnKeyUp = function (e, item) {
      if (e.keyCode === 39) {
        _this.scrollCarousel(e);
      } else if (e.keyCode === 37) {
        _this.scrollCarousel(e);
      } else if (e.keyCode === 38) {
        //   this.scrollToUp();
      } else if (e.keyCode === 40) {
        //   this.scrollToDown();
      }
    };

    _this.state = {
      playVideo: false,
      scrollRight: false
    };
    return _this;
  }

  ShovelerView.prototype.componentDidMount = function componentDidMount() {}
  // window.addEventListener("keyup", e => {
  //   if (e.keyCode === 37) {
  //     var leftPos = $(".video_container_scroll").scrollLeft();
  //     $(".video_container_scroll").animate(
  //       {
  //         scrollLeft: leftPos - 1000
  //       },
  //       800
  //     );
  //   } else if (e.keyCode === 39) {
  //     var leftPos = $(".video_container_scroll").scrollLeft();
  //     $(".video_container_scroll").animate(
  //       {
  //         scrollLeft: leftPos + 1000
  //       },
  //       800
  //     );
  //   }
  // });


  //   vwToPx(value) {
  //     const w = window,
  //       d = document,
  //       e = d.documentElement,
  //       g = d.getElementsByTagName("body")[0],
  //       x = w.innerWidth || e.clientWidth || g.clientWidth,
  //       y = w.innerHeight || e.clientHeight || g.clientHeight;
  //     return (x * value) / 100;
  //   }

  //   scrollToRight = () => {
  //     const leftPos = $(`div[Key="${this.props.Key}"]`).scrollLeft();
  //     $(`div[Key="${this.props.Key}"]`).animate(
  //       {
  //         scrollLeft: leftPos + 380
  //       },
  //       300
  //     );
  //   };

  //   scrollToLeft = () => {
  //     const leftPos = $(`div[Key="${this.props.Key}"]`).scrollLeft();
  //     console.log(leftPos);
  //     $(`div[Key="${this.props.Key}"]`).animate(
  //       {
  //         scrollLeft: leftPos - 380
  //       },
  //       300
  //     );
  //   };

  //   scrollToDown = () => {
  //     const topPos = $(`div[Key="${this.props.Key}"]`).scrollTop();
  //     console.log(topPos, $(`div[Key="${this.props.Key}"]`));
  //     $(`div[Key="${this.props.Key}"]`).animate(
  //       {
  //         scrollTop: topPos + 700
  //       },
  //       300
  //     );
  //   };

  //   scrollToUp = () => {
  //     const topPos = $(`div[Key="${this.props.Key}"]`).scrollTop();
  //     console.log(topPos, $(`div[Key="${this.props.Key}"]`));
  //     $(`div[Key="${this.props.Key}"]`).animate(
  //       {
  //         scrollTop: topPos - 700
  //       },
  //       300
  //     );
  //   };

  ;

  ShovelerView.prototype.render = function render(props) {
    var _this2 = this;

    var rowNumber = props.rowNumber,
        colNumber = props.colNumber,
        play = props.play,
        items = props.items,
        live = props.live,
        setVideoPlayerData = props.setVideoPlayerData;
    var playVideo = this.state.playVideo;

    console.log(props);

    return Object(preact_min["h"])(
      "div",
      {
        className: shovelerView_default.a.video_container_scroll,
        style: {
          display: "inline-flex",
          flexDirection: "row",
          maxWidth: "100vw",
          //   height: "30vh",
          overflowX: "scroll",
          marginTop: "1rem"
        }
      },
      items.map(function (item, state, context) {
        return Object(preact_min["h"])(
          "button",
          {
            className: shovelerView_default.a.buttonImage,
            onFocus: function onFocus(e) {
              return _this2.handleButtonFocus(e, item);
            },
            onKeyUp: function onKeyUp(e) {
              return _this2.handleOnKeyUp(e, item);
            }
            // onClick={e => {
            //   //   setVideoPlayerData({ src: liveStreamMockUrl });
            //   setVideoPlayerData({
            //     src:
            //       "http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ElephantsDream.mp4"
            //   });

            //   //   route("/videoplayer");
            //   //   this.setState({ playVideo: true, src: liveStreamMockUrl });
            // }}
          },
          Object(preact_min["h"])("img", {
            className: shovelerView_default.a.imageClass,
            src: item.src || "https://res.cloudinary.com/www-curefit-com/image/upload/w_300,ar_1.85,fl_progressive,f_auto,q_auto/dpr_2/v1/cult-media/v2web/workouts/22_id/D_CLP_2019-04-02T12:55:54.538Z.png",
            alt: "logo"
          })
        );
      })
    );
  };

  return ShovelerView;
}(preact_min["Component"]);

var shovelerView_mapStateToProps = function mapStateToProps(state) {
  return {
    videoState: state.videoState
  };
};

var shovelerView_mapDispatchToProps = function mapDispatchToProps(dispatch) {
  return {
    setVideoPlayerData: function setVideoPlayerData(videoData) {
      return dispatch(videoActions_setVideoPlayerData(videoData));
    }
  };
};

/* harmony default export */ var shovelerView_shovelerView = (connect(shovelerView_mapStateToProps, shovelerView_mapDispatchToProps)(shovelerView_ShovelerView));

// export default ShovelerView;
// CONCATENATED MODULE: ./routes/home/index.js


function home__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function home__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function home__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }







var home__ref = Object(preact_min["h"])(shovelerView_shovelerView, {
  live: true,
  Key: "one",
  rowNumber: 1,
  colNumber: 0,
  play: false,
  items: mockItems
});

var home__ref2 = Object(preact_min["h"])(shovelerView_shovelerView, {
  live: true,
  Key: "two",
  rowNumber: 1,
  colNumber: 0,
  play: false,
  items: mockItems
});

var _ref3 = Object(preact_min["h"])(shovelerView_shovelerView, {
  live: true,
  Key: "three",
  rowNumber: 1,
  colNumber: 0,
  play: false,
  items: mockItems
});

var _ref4 = Object(preact_min["h"])(shovelerView_shovelerView, {
  live: true,
  Key: "four",
  rowNumber: 1,
  colNumber: 0,
  play: false,
  items: mockItems
});

var home_Home = function (_Component) {
  home__inherits(Home, _Component);

  function Home() {
    var _temp, _this, _ret;

    home__classCallCheck(this, Home);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = home__possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.scrollToTop = function (e) {
      var parentElement = e.currentTarget.parentElement;
      var offsetTop = e.currentTarget.offsetTop;

      debugger;
      console.log(e.currentTarget, "offsetTop=", offsetTop, "scrollTop=", parentElement.scrollTop);
      jquery_default()(parentElement).animate({
        scrollTop: offsetTop - 100
      }, 300);
    }, _temp), home__possibleConstructorReturn(_this, _ret);
  }

  Home.prototype.render = function render() {
    return Object(preact_min["h"])(
      "div",
      { style: { height: "calc(100vh - 3rem)", overflow: "auto" } },
      Object(preact_min["h"])(
        "button",
        { onFocusCapture: this.scrollToTop },
        home__ref
      ),
      Object(preact_min["h"])(
        "button",
        { onFocusCapture: this.scrollToTop },
        home__ref2
      ),
      Object(preact_min["h"])(
        "button",
        { onFocusCapture: this.scrollToTop },
        _ref3
      ),
      Object(preact_min["h"])(
        "button",
        { onFocusCapture: this.scrollToTop },
        _ref4
      )
    );
  };

  return Home;
}(preact_min["Component"]);

/* harmony default export */ var home = (home_Home);
// EXTERNAL MODULE: ./routes/profile/style.scss
var profile_style = __webpack_require__("xGwg");
var profile_style_default = /*#__PURE__*/__webpack_require__.n(profile_style);

// CONCATENATED MODULE: ./routes/profile/index.js


function profile__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function profile__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function profile__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }




var profile_Profile = function (_Component) {
  profile__inherits(Profile, _Component);

  function Profile() {
    var _temp, _this, _ret;

    profile__classCallCheck(this, Profile);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = profile__possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.state = {
      time: Date.now(),
      count: 10
    }, _this.updateTime = function () {
      _this.setState({ time: Date.now() });
    }, _this.increment = function () {
      _this.setState({ count: _this.state.count + 1 });
    }, _temp), profile__possibleConstructorReturn(_this, _ret);
  }

  // update the current time


  // gets called when this route is navigated to
  Profile.prototype.componentDidMount = function componentDidMount() {
    // start a timer for the clock:
    this.timer = setInterval(this.updateTime, 1000);
  };

  // gets called just before navigating away from the route


  Profile.prototype.componentWillUnmount = function componentWillUnmount() {
    clearInterval(this.timer);
  };

  // Note: `user` comes from the URL, courtesy of our router


  Profile.prototype.render = function render(_ref, _ref2) {
    var user = _ref.user;
    var time = _ref2.time,
        count = _ref2.count;

    return Object(preact_min["h"])(
      "div",
      { "class": profile_style_default.a.profile },
      Object(preact_min["h"])(
        "h1",
        null,
        "Profile: ",
        user
      ),
      Object(preact_min["h"])(
        "p",
        null,
        "This is the user profile for a user named ",
        user,
        "."
      ),
      Object(preact_min["h"])(
        "div",
        null,
        "Current time: ",
        new Date(time).toLocaleString()
      ),
      Object(preact_min["h"])(
        "p",
        null,
        Object(preact_min["h"])(
          "button",
          { onClick: this.increment },
          "Click Me"
        ),
        " Clicked ",
        count,
        " ",
        "times."
      )
    );
  };

  return Profile;
}(preact_min["Component"]);


// CONCATENATED MODULE: ../node_modules/preact-head/index.js
function preact_head__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function preact_head__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function preact_head__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* @jsx h */


var DOMAttributeNames = {
  acceptCharset: 'accept-charset',
  className: 'class',
  htmlFor: 'for',
  httpEquiv: 'http-equiv'
};

var browser = typeof window !== 'undefined';
var mounted = [];

function preact_head_reducer(components) {
  return components.map(function (c) {
    return c.children;
  }).filter(function (c) {
    return !!c;
  }).reduce(function (a, b) {
    return a.concat(b);
  }, []).reverse().filter(unique()).reverse().map(function (c) {
    var className = (c.className ? c.className + ' ' : '') + 'preact-head';
    return Object(preact_min["cloneElement"])(c, { className: className });
  });
}

function updateClient(head) {
  var tags = {};
  head.forEach(function (h) {
    var components = tags[h.nodeName] || [];
    components.push(h);
    tags[h.nodeName] = components;
  });

  updateTitle(tags.title ? tags.title[0] : null);

  var types = ['meta', 'base', 'link', 'style', 'script'];
  types.forEach(function (type) {
    updateElements(type, tags[type] || []);
  });
}

function updateElements(type, components) {
  var headEl = document.getElementsByTagName('head')[0];
  var oldTags = Array.prototype.slice.call(headEl.querySelectorAll(type + '.preact-head'));
  var newTags = components.map(domify).filter(function (newTag) {
    for (var i = 0, len = oldTags.length; i < len; i++) {
      var oldTag = oldTags[i];
      if (oldTag.isEqualNode(newTag)) {
        oldTags.splice(i, 1);
        return false;
      }
    }
    return true;
  });

  oldTags.forEach(function (t) {
    return t.parentNode.removeChild(t);
  });
  newTags.forEach(function (t) {
    return headEl.appendChild(t);
  });
}

function domify(component) {
  var el = document.createElement(component.nodeName);
  var attrs = component.attributes || {};
  var children = component.children;

  for (var p in attrs) {
    if (!attrs.hasOwnProperty(p)) continue;
    if (p === 'dangerouslySetInnerHTML') continue;

    var attr = DOMAttributeNames[p] || p.toLowerCase();
    el.setAttribute(attr, attrs[p]);
  }

  if (attrs['dangerouslySetInnerHTML']) {
    el.innerHTML = attrs['dangerouslySetInnerHTML'].__html || '';
  } else if (children) {
    el.textContent = typeof children === 'string' ? children : children.join('');
  }

  return el;
}

var METATYPES = ['name', 'httpEquiv', 'charSet', 'itemProp'];

// returns a function for filtering head child elements
// which shouldn't be duplicated, like <title/>.
function unique() {
  var tags = [];
  var metaTypes = [];
  var metaCategories = {};
  return function (h) {
    switch (h.nodeName) {
      case 'title':
      case 'base':
        if (~tags.indexOf(h.nodeName)) return false;
        tags.push(h.nodeName);
        break;
      case 'meta':
        for (var i = 0, len = METATYPES.length; i < len; i++) {
          var metatype = METATYPES[i];
          if (!h.attributes.hasOwnProperty(metatype)) continue;
          if (metatype === 'charSet') {
            if (~metaTypes.indexOf(metatype)) return false;
            metaTypes.push(metatype);
          } else {
            var category = h.attributes[metatype];
            var categories = metaCategories[metatype] || [];
            if (~categories.indexOf(category)) return false;
            categories.push(category);
            metaCategories[metatype] = categories;
          }
        }
        break;
    }
    return true;
  };
}

function updateTitle(component) {
  var title = void 0;
  if (component) {
    var children = component.children;

    title = typeof children === 'string' ? children : children.join('');
  } else {
    title = '';
  }
  if (title !== document.title) {
    document.title = title;
  }
}

function update() {
  var state = preact_head_reducer(mounted.map(function (mount) {
    return mount.props;
  }));
  if (browser) updateClient(state);
}

var Head = function (_Component) {
  preact_head__inherits(Head, _Component);

  function Head() {
    preact_head__classCallCheck(this, Head);

    return preact_head__possibleConstructorReturn(this, _Component.apply(this, arguments));
  }

  Head.rewind = function rewind() {
    var state = preact_head_reducer(mounted.map(function (mount) {
      return mount.props;
    }));
    mounted = [];
    return state;
  };

  Head.prototype.componentDidUpdate = function componentDidUpdate() {
    update();
  };

  Head.prototype.componentWillMount = function componentWillMount() {
    mounted.push(this);
    update();
  };

  Head.prototype.componentWillUnmount = function componentWillUnmount() {
    var i = mounted.indexOf(this);
    if (~i) mounted.splice(i, 1);
    update();
  };

  Head.prototype.render = function render() {
    return null;
  };

  return Head;
}(preact_min["Component"]);


// CONCATENATED MODULE: ./components/app.js


function app__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function app__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function app__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }







// Code-splitting is automated for routes





var app__ref = Object(preact_min["h"])(
  Head,
  null,
  Object(preact_min["h"])("link", {
    href: "https://vjs.zencdn.net/7.5.4/video-js.css",
    rel: "stylesheet"
  })
);

var app__ref2 = Object(preact_min["h"])(header, null);

var app__ref3 = Object(preact_min["h"])(home, { path: "/" });

var app__ref4 = Object(preact_min["h"])(playerView_playerView, { live: false, path: "/videoplayer" });

var app_App = function (_Component) {
  app__inherits(App, _Component);

  function App() {
    var _temp, _this, _ret;

    app__classCallCheck(this, App);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = app__possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.handleRoute = function (e) {
      _this.currentUrl = e.url;
      console.log(_this.currentUrl, e);
    }, _temp), app__possibleConstructorReturn(_this, _ret);
  }
  /** Gets fired when the route changes.
   *	@param {Object} event		"change" event from [preact-router](http://git.io/preact-router)
   *	@param {string} event.url	The newly routed URL
   */
  //   history = createMemoryHistory();

  //   getChildContext() {
  //     return { history: this.history };
  //   }

  App.prototype.render = function render() {
    // console.log(createMemoryHistory);
    return Object(preact_min["h"])(
      "div",
      { id: "app", onKeyDown: function onKeyDown(e) {
          return console.log(e);
        } },
      Object(preact_min["h"])(
        preact_redux_esm_Provider,
        { store: store },
        app__ref,
        app__ref2,
        Object(preact_min["h"])(
          preact_router_es["Router"],
          { onChange: this.handleRoute },
          app__ref3,
          app__ref4
        )
      )
    );
  };

  return App;
}(preact_min["Component"]);


// CONCATENATED MODULE: ./index.js



/* harmony default export */ var index_0 = __webpack_exports__["default"] = (app_App);

/***/ }),

/***/ "KM04":
/***/ (function(module, exports, __webpack_require__) {

!function () {
  "use strict";
  function e(e, t) {
    var n,
        o,
        r,
        i,
        l = W;for (i = arguments.length; i-- > 2;) {
      P.push(arguments[i]);
    }t && null != t.children && (P.length || P.push(t.children), delete t.children);while (P.length) {
      if ((o = P.pop()) && void 0 !== o.pop) for (i = o.length; i--;) {
        P.push(o[i]);
      } else "boolean" == typeof o && (o = null), (r = "function" != typeof e) && (null == o ? o = "" : "number" == typeof o ? o += "" : "string" != typeof o && (r = !1)), r && n ? l[l.length - 1] += o : l === W ? l = [o] : l.push(o), n = r;
    }var a = new T();return a.nodeName = e, a.children = l, a.attributes = null == t ? void 0 : t, a.key = null == t ? void 0 : t.key, void 0 !== M.vnode && M.vnode(a), a;
  }function t(e, t) {
    for (var n in t) {
      e[n] = t[n];
    }return e;
  }function n(e, t) {
    null != e && ("function" == typeof e ? e(t) : e.current = t);
  }function o(n, o) {
    return e(n.nodeName, t(t({}, n.attributes), o), arguments.length > 2 ? [].slice.call(arguments, 2) : n.children);
  }function r(e) {
    !e.__d && (e.__d = !0) && 1 == V.push(e) && (M.debounceRendering || D)(i);
  }function i() {
    var e;while (e = V.pop()) {
      e.__d && x(e);
    }
  }function l(e, t, n) {
    return "string" == typeof t || "number" == typeof t ? void 0 !== e.splitText : "string" == typeof t.nodeName ? !e._componentConstructor && a(e, t.nodeName) : n || e._componentConstructor === t.nodeName;
  }function a(e, t) {
    return e.__n === t || e.nodeName.toLowerCase() === t.toLowerCase();
  }function u(e) {
    var n = t({}, e.attributes);n.children = e.children;var o = e.nodeName.defaultProps;if (void 0 !== o) for (var r in o) {
      void 0 === n[r] && (n[r] = o[r]);
    }return n;
  }function c(e, t) {
    var n = t ? document.createElementNS("http://www.w3.org/2000/svg", e) : document.createElement(e);return n.__n = e, n;
  }function p(e) {
    var t = e.parentNode;t && t.removeChild(e);
  }function s(e, t, o, r, i) {
    if ("className" === t && (t = "class"), "key" === t) ;else if ("ref" === t) n(o, null), n(r, e);else if ("class" !== t || i) {
      if ("style" === t) {
        if (r && "string" != typeof r && "string" != typeof o || (e.style.cssText = r || ""), r && "object" == typeof r) {
          if ("string" != typeof o) for (var l in o) {
            l in r || (e.style[l] = "");
          }for (var l in r) {
            e.style[l] = "number" == typeof r[l] && !1 === E.test(l) ? r[l] + "px" : r[l];
          }
        }
      } else if ("dangerouslySetInnerHTML" === t) r && (e.innerHTML = r.__html || "");else if ("o" == t[0] && "n" == t[1]) {
        var a = t !== (t = t.replace(/Capture$/, ""));t = t.toLowerCase().substring(2), r ? o || e.addEventListener(t, _, a) : e.removeEventListener(t, _, a), (e.__l || (e.__l = {}))[t] = r;
      } else if ("list" !== t && "type" !== t && !i && t in e) {
        try {
          e[t] = null == r ? "" : r;
        } catch (e) {}null != r && !1 !== r || "spellcheck" == t || e.removeAttribute(t);
      } else {
        var u = i && t !== (t = t.replace(/^xlink:?/, ""));null == r || !1 === r ? u ? e.removeAttributeNS("http://www.w3.org/1999/xlink", t.toLowerCase()) : e.removeAttribute(t) : "function" != typeof r && (u ? e.setAttributeNS("http://www.w3.org/1999/xlink", t.toLowerCase(), r) : e.setAttribute(t, r));
      }
    } else e.className = r || "";
  }function _(e) {
    return this.__l[e.type](M.event && M.event(e) || e);
  }function f() {
    var e;while (e = A.shift()) {
      M.afterMount && M.afterMount(e), e.componentDidMount && e.componentDidMount();
    }
  }function d(e, t, n, o, r, i) {
    H++ || (R = null != r && void 0 !== r.ownerSVGElement, B = null != e && !("__preactattr_" in e));var l = h(e, t, n, o, i);return r && l.parentNode !== r && r.appendChild(l), --H || (B = !1, i || f()), l;
  }function h(e, t, n, o, r) {
    var i = e,
        l = R;if (null != t && "boolean" != typeof t || (t = ""), "string" == typeof t || "number" == typeof t) return e && void 0 !== e.splitText && e.parentNode && (!e._component || r) ? e.nodeValue != t && (e.nodeValue = t) : (i = document.createTextNode(t), e && (e.parentNode && e.parentNode.replaceChild(i, e), v(e, !0))), i.__preactattr_ = !0, i;var u = t.nodeName;if ("function" == typeof u) return N(e, t, n, o);if (R = "svg" === u || "foreignObject" !== u && R, u += "", (!e || !a(e, u)) && (i = c(u, R), e)) {
      while (e.firstChild) {
        i.appendChild(e.firstChild);
      }e.parentNode && e.parentNode.replaceChild(i, e), v(e, !0);
    }var p = i.firstChild,
        s = i.__preactattr_,
        _ = t.children;if (null == s) {
      s = i.__preactattr_ = {};for (var f = i.attributes, d = f.length; d--;) {
        s[f[d].name] = f[d].value;
      }
    }return !B && _ && 1 === _.length && "string" == typeof _[0] && null != p && void 0 !== p.splitText && null == p.nextSibling ? p.nodeValue != _[0] && (p.nodeValue = _[0]) : (_ && _.length || null != p) && m(i, _, n, o, B || null != s.dangerouslySetInnerHTML), y(i, t.attributes, s), R = l, i;
  }function m(e, t, n, o, r) {
    var i,
        a,
        u,
        c,
        s,
        _ = e.childNodes,
        f = [],
        d = {},
        m = 0,
        b = 0,
        y = _.length,
        g = 0,
        w = t ? t.length : 0;if (0 !== y) for (var C = 0; C < y; C++) {
      var x = _[C],
          N = x.__preactattr_,
          k = w && N ? x._component ? x._component.__k : N.key : null;null != k ? (m++, d[k] = x) : (N || (void 0 !== x.splitText ? !r || x.nodeValue.trim() : r)) && (f[g++] = x);
    }if (0 !== w) for (var C = 0; C < w; C++) {
      c = t[C], s = null;var k = c.key;if (null != k) m && void 0 !== d[k] && (s = d[k], d[k] = void 0, m--);else if (b < g) for (i = b; i < g; i++) {
        if (void 0 !== f[i] && l(a = f[i], c, r)) {
          s = a, f[i] = void 0, i === g - 1 && g--, i === b && b++;break;
        }
      }s = h(s, c, n, o), u = _[C], s && s !== e && s !== u && (null == u ? e.appendChild(s) : s === u.nextSibling ? p(u) : e.insertBefore(s, u));
    }if (m) for (var C in d) {
      void 0 !== d[C] && v(d[C], !1);
    }while (b <= g) {
      void 0 !== (s = f[g--]) && v(s, !1);
    }
  }function v(e, t) {
    var o = e._component;o ? k(o) : (null != e.__preactattr_ && n(e.__preactattr_.ref, null), !1 !== t && null != e.__preactattr_ || p(e), b(e));
  }function b(e) {
    e = e.lastChild;while (e) {
      var t = e.previousSibling;v(e, !0), e = t;
    }
  }function y(e, t, n) {
    var o;for (o in n) {
      t && null != t[o] || null == n[o] || s(e, o, n[o], n[o] = void 0, R);
    }for (o in t) {
      "children" === o || "innerHTML" === o || o in n && t[o] === ("value" === o || "checked" === o ? e[o] : n[o]) || s(e, o, n[o], n[o] = t[o], R);
    }
  }function g(e, t, n) {
    var o,
        r = F.length;e.prototype && e.prototype.render ? (o = new e(t, n), U.call(o, t, n)) : (o = new U(t, n), o.constructor = e, o.render = w);while (r--) {
      if (F[r].constructor === e) return o.__b = F[r].__b, F.splice(r, 1), o;
    }return o;
  }function w(e, t, n) {
    return this.constructor(e, n);
  }function C(e, t, o, i, l) {
    e.__x || (e.__x = !0, e.__r = t.ref, e.__k = t.key, delete t.ref, delete t.key, void 0 === e.constructor.getDerivedStateFromProps && (!e.base || l ? e.componentWillMount && e.componentWillMount() : e.componentWillReceiveProps && e.componentWillReceiveProps(t, i)), i && i !== e.context && (e.__c || (e.__c = e.context), e.context = i), e.__p || (e.__p = e.props), e.props = t, e.__x = !1, 0 !== o && (1 !== o && !1 === M.syncComponentUpdates && e.base ? r(e) : x(e, 1, l)), n(e.__r, e));
  }function x(e, n, o, r) {
    if (!e.__x) {
      var i,
          l,
          a,
          c = e.props,
          p = e.state,
          s = e.context,
          _ = e.__p || c,
          h = e.__s || p,
          m = e.__c || s,
          b = e.base,
          y = e.__b,
          w = b || y,
          N = e._component,
          U = !1,
          S = m;if (e.constructor.getDerivedStateFromProps && (p = t(t({}, p), e.constructor.getDerivedStateFromProps(c, p)), e.state = p), b && (e.props = _, e.state = h, e.context = m, 2 !== n && e.shouldComponentUpdate && !1 === e.shouldComponentUpdate(c, p, s) ? U = !0 : e.componentWillUpdate && e.componentWillUpdate(c, p, s), e.props = c, e.state = p, e.context = s), e.__p = e.__s = e.__c = e.__b = null, e.__d = !1, !U) {
        i = e.render(c, p, s), e.getChildContext && (s = t(t({}, s), e.getChildContext())), b && e.getSnapshotBeforeUpdate && (S = e.getSnapshotBeforeUpdate(_, h));var L,
            T,
            P = i && i.nodeName;if ("function" == typeof P) {
          var W = u(i);l = N, l && l.constructor === P && W.key == l.__k ? C(l, W, 1, s, !1) : (L = l, e._component = l = g(P, W, s), l.__b = l.__b || y, l.__u = e, C(l, W, 0, s, !1), x(l, 1, o, !0)), T = l.base;
        } else a = w, L = N, L && (a = e._component = null), (w || 1 === n) && (a && (a._component = null), T = d(a, i, s, o || !b, w && w.parentNode, !0));if (w && T !== w && l !== N) {
          var D = w.parentNode;D && T !== D && (D.replaceChild(T, w), L || (w._component = null, v(w, !1)));
        }if (L && k(L), e.base = T, T && !r) {
          var E = e,
              V = e;while (V = V.__u) {
            (E = V).base = T;
          }T._component = E, T._componentConstructor = E.constructor;
        }
      }!b || o ? A.push(e) : U || (e.componentDidUpdate && e.componentDidUpdate(_, h, S), M.afterUpdate && M.afterUpdate(e));while (e.__h.length) {
        e.__h.pop().call(e);
      }H || r || f();
    }
  }function N(e, t, n, o) {
    var r = e && e._component,
        i = r,
        l = e,
        a = r && e._componentConstructor === t.nodeName,
        c = a,
        p = u(t);while (r && !c && (r = r.__u)) {
      c = r.constructor === t.nodeName;
    }return r && c && (!o || r._component) ? (C(r, p, 3, n, o), e = r.base) : (i && !a && (k(i), e = l = null), r = g(t.nodeName, p, n), e && !r.__b && (r.__b = e, l = null), C(r, p, 1, n, o), e = r.base, l && e !== l && (l._component = null, v(l, !1))), e;
  }function k(e) {
    M.beforeUnmount && M.beforeUnmount(e);var t = e.base;e.__x = !0, e.componentWillUnmount && e.componentWillUnmount(), e.base = null;var o = e._component;o ? k(o) : t && (null != t.__preactattr_ && n(t.__preactattr_.ref, null), e.__b = t, p(t), F.push(e), b(t)), n(e.__r, null);
  }function U(e, t) {
    this.__d = !0, this.context = t, this.props = e, this.state = this.state || {}, this.__h = [];
  }function S(e, t, n) {
    return d(n, e, {}, !1, t, !1);
  }function L() {
    return {};
  }var T = function T() {},
      M = {},
      P = [],
      W = [],
      D = "function" == typeof Promise ? Promise.resolve().then.bind(Promise.resolve()) : setTimeout,
      E = /acit|ex(?:s|g|n|p|$)|rph|ows|mnc|ntw|ine[ch]|zoo|^ord/i,
      V = [],
      A = [],
      H = 0,
      R = !1,
      B = !1,
      F = [];t(U.prototype, { setState: function setState(e, n) {
      this.__s || (this.__s = this.state), this.state = t(t({}, this.state), "function" == typeof e ? e(this.state, this.props) : e), n && this.__h.push(n), r(this);
    }, forceUpdate: function forceUpdate(e) {
      e && this.__h.push(e), x(this, 2);
    }, render: function render() {} });var j = { h: e, createElement: e, cloneElement: o, createRef: L, Component: U, render: S, rerender: i, options: M }; true ? module.exports = j : self.preact = j;
}();
//# sourceMappingURL=preact.min.js.map

/***/ }),

/***/ "Lglr":
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin
module.exports = {"home":"home__1CGvB"};

/***/ }),

/***/ "LkZ7":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ponyfill_js__ = __webpack_require__("JZ8d");
/* global window */


var root;

if (typeof self !== 'undefined') {
  root = self;
} else if (typeof window !== 'undefined') {
  root = window;
} else if (typeof global !== 'undefined') {
  root = global;
} else if (true) {
  root = module;
} else {
  root = Function('return this')();
}

var result = Object(__WEBPACK_IMPORTED_MODULE_0__ponyfill_js__["a" /* default */])(root);
/* harmony default export */ __webpack_exports__["a"] = (result);
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__("pv+l")(module)))

/***/ }),

/***/ "ME5n":
/***/ (function(module, exports, __webpack_require__) {

typeof window!=="undefined"&&function webpackUniversalModuleDefinition(root,factory){if(true)module.exports=factory();else if(typeof define==='function'&&define.amd)define([],factory);else if(typeof exports==='object')exports["Hls"]=factory();else root["Hls"]=factory();}(this,function(){return(/******/function(modules){// webpackBootstrap
/******/// The module cache
/******/var installedModules={};/******//******/// The require function
/******/function __webpack_require__(moduleId){/******//******/// Check if module is in cache
/******/if(installedModules[moduleId]){/******/return installedModules[moduleId].exports;/******/}/******/// Create a new module (and put it into the cache)
/******/var module=installedModules[moduleId]={/******/i:moduleId,/******/l:false,/******/exports:{}/******/};/******//******/// Execute the module function
/******/modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);/******//******/// Flag the module as loaded
/******/module.l=true;/******//******/// Return the exports of the module
/******/return module.exports;/******/}/******//******//******/// expose the modules object (__webpack_modules__)
/******/__webpack_require__.m=modules;/******//******/// expose the module cache
/******/__webpack_require__.c=installedModules;/******//******/// define getter function for harmony exports
/******/__webpack_require__.d=function(exports,name,getter){/******/if(!__webpack_require__.o(exports,name)){/******/Object.defineProperty(exports,name,{enumerable:true,get:getter});/******/}/******/};/******//******/// define __esModule on exports
/******/__webpack_require__.r=function(exports){/******/if(typeof Symbol!=='undefined'&&Symbol.toStringTag){/******/Object.defineProperty(exports,Symbol.toStringTag,{value:'Module'});/******/}/******/Object.defineProperty(exports,'__esModule',{value:true});/******/};/******//******/// create a fake namespace object
/******/// mode & 1: value is a module id, require it
/******/// mode & 2: merge all properties of value into the ns
/******/// mode & 4: return value when already ns object
/******/// mode & 8|1: behave like require
/******/__webpack_require__.t=function(value,mode){/******/if(mode&1)value=__webpack_require__(value);/******/if(mode&8)return value;/******/if(mode&4&&typeof value==='object'&&value&&value.__esModule)return value;/******/var ns=Object.create(null);/******/__webpack_require__.r(ns);/******/Object.defineProperty(ns,'default',{enumerable:true,value:value});/******/if(mode&2&&typeof value!='string')for(var key in value){__webpack_require__.d(ns,key,function(key){return value[key];}.bind(null,key));}/******/return ns;/******/};/******//******/// getDefaultExport function for compatibility with non-harmony modules
/******/__webpack_require__.n=function(module){/******/var getter=module&&module.__esModule?/******/function getDefault(){return module['default'];}:/******/function getModuleExports(){return module;};/******/__webpack_require__.d(getter,'a',getter);/******/return getter;/******/};/******//******/// Object.prototype.hasOwnProperty.call
/******/__webpack_require__.o=function(object,property){return Object.prototype.hasOwnProperty.call(object,property);};/******//******/// __webpack_public_path__
/******/__webpack_require__.p="/dist/";/******//******//******/// Load entry module and return exports
/******/return __webpack_require__(__webpack_require__.s="./src/hls.js");/******/}(/************************************************************************//******/{/***/"./node_modules/eventemitter3/index.js":/*!*********************************************!*\
  !*** ./node_modules/eventemitter3/index.js ***!
  \*********************************************//*! no static exports found *//*! ModuleConcatenation bailout: Module is not an ECMAScript module *//***/function node_modulesEventemitter3IndexJs(module,exports,__webpack_require__){"use strict";var has=Object.prototype.hasOwnProperty,prefix='~';/**
 * Constructor to create a storage for our `EE` objects.
 * An `Events` instance is a plain object whose properties are event names.
 *
 * @constructor
 * @private
 */function Events(){}//
// We try to not inherit from `Object.prototype`. In some engines creating an
// instance in this way is faster than calling `Object.create(null)` directly.
// If `Object.create(null)` is not supported we prefix the event names with a
// character to make sure that the built-in object properties are not
// overridden or used as an attack vector.
//
if(Object.create){Events.prototype=Object.create(null);//
// This hack is needed because the `__proto__` property is still inherited in
// some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
//
if(!new Events().__proto__)prefix=false;}/**
 * Representation of a single event listener.
 *
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
 * @constructor
 * @private
 */function EE(fn,context,once){this.fn=fn;this.context=context;this.once=once||false;}/**
 * Add a listener for a given event.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} once Specify if the listener is a one-time listener.
 * @returns {EventEmitter}
 * @private
 */function addListener(emitter,event,fn,context,once){if(typeof fn!=='function'){throw new TypeError('The listener must be a function');}var listener=new EE(fn,context||emitter,once),evt=prefix?prefix+event:event;if(!emitter._events[evt])emitter._events[evt]=listener,emitter._eventsCount++;else if(!emitter._events[evt].fn)emitter._events[evt].push(listener);else emitter._events[evt]=[emitter._events[evt],listener];return emitter;}/**
 * Clear event by name.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} evt The Event name.
 * @private
 */function clearEvent(emitter,evt){if(--emitter._eventsCount===0)emitter._events=new Events();else delete emitter._events[evt];}/**
 * Minimal `EventEmitter` interface that is molded against the Node.js
 * `EventEmitter` interface.
 *
 * @constructor
 * @public
 */function EventEmitter(){this._events=new Events();this._eventsCount=0;}/**
 * Return an array listing the events for which the emitter has registered
 * listeners.
 *
 * @returns {Array}
 * @public
 */EventEmitter.prototype.eventNames=function eventNames(){var names=[],events,name;if(this._eventsCount===0)return names;for(name in events=this._events){if(has.call(events,name))names.push(prefix?name.slice(1):name);}if(Object.getOwnPropertySymbols){return names.concat(Object.getOwnPropertySymbols(events));}return names;};/**
 * Return the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Array} The registered listeners.
 * @public
 */EventEmitter.prototype.listeners=function listeners(event){var evt=prefix?prefix+event:event,handlers=this._events[evt];if(!handlers)return[];if(handlers.fn)return[handlers.fn];for(var i=0,l=handlers.length,ee=new Array(l);i<l;i++){ee[i]=handlers[i].fn;}return ee;};/**
 * Return the number of listeners listening to a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Number} The number of listeners.
 * @public
 */EventEmitter.prototype.listenerCount=function listenerCount(event){var evt=prefix?prefix+event:event,listeners=this._events[evt];if(!listeners)return 0;if(listeners.fn)return 1;return listeners.length;};/**
 * Calls each of the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Boolean} `true` if the event had listeners, else `false`.
 * @public
 */EventEmitter.prototype.emit=function emit(event,a1,a2,a3,a4,a5){var evt=prefix?prefix+event:event;if(!this._events[evt])return false;var listeners=this._events[evt],len=arguments.length,args,i;if(listeners.fn){if(listeners.once)this.removeListener(event,listeners.fn,undefined,true);switch(len){case 1:return listeners.fn.call(listeners.context),true;case 2:return listeners.fn.call(listeners.context,a1),true;case 3:return listeners.fn.call(listeners.context,a1,a2),true;case 4:return listeners.fn.call(listeners.context,a1,a2,a3),true;case 5:return listeners.fn.call(listeners.context,a1,a2,a3,a4),true;case 6:return listeners.fn.call(listeners.context,a1,a2,a3,a4,a5),true;}for(i=1,args=new Array(len-1);i<len;i++){args[i-1]=arguments[i];}listeners.fn.apply(listeners.context,args);}else{var length=listeners.length,j;for(i=0;i<length;i++){if(listeners[i].once)this.removeListener(event,listeners[i].fn,undefined,true);switch(len){case 1:listeners[i].fn.call(listeners[i].context);break;case 2:listeners[i].fn.call(listeners[i].context,a1);break;case 3:listeners[i].fn.call(listeners[i].context,a1,a2);break;case 4:listeners[i].fn.call(listeners[i].context,a1,a2,a3);break;default:if(!args)for(j=1,args=new Array(len-1);j<len;j++){args[j-1]=arguments[j];}listeners[i].fn.apply(listeners[i].context,args);}}}return true;};/**
 * Add a listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */EventEmitter.prototype.on=function on(event,fn,context){return addListener(this,event,fn,context,false);};/**
 * Add a one-time listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */EventEmitter.prototype.once=function once(event,fn,context){return addListener(this,event,fn,context,true);};/**
 * Remove the listeners of a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn Only remove the listeners that match this function.
 * @param {*} context Only remove the listeners that have this context.
 * @param {Boolean} once Only remove one-time listeners.
 * @returns {EventEmitter} `this`.
 * @public
 */EventEmitter.prototype.removeListener=function removeListener(event,fn,context,once){var evt=prefix?prefix+event:event;if(!this._events[evt])return this;if(!fn){clearEvent(this,evt);return this;}var listeners=this._events[evt];if(listeners.fn){if(listeners.fn===fn&&(!once||listeners.once)&&(!context||listeners.context===context)){clearEvent(this,evt);}}else{for(var i=0,events=[],length=listeners.length;i<length;i++){if(listeners[i].fn!==fn||once&&!listeners[i].once||context&&listeners[i].context!==context){events.push(listeners[i]);}}//
// Reset the array, or remove it completely if we have no more listeners.
//
if(events.length)this._events[evt]=events.length===1?events[0]:events;else clearEvent(this,evt);}return this;};/**
 * Remove all listeners, or those of the specified event.
 *
 * @param {(String|Symbol)} [event] The event name.
 * @returns {EventEmitter} `this`.
 * @public
 */EventEmitter.prototype.removeAllListeners=function removeAllListeners(event){var evt;if(event){evt=prefix?prefix+event:event;if(this._events[evt])clearEvent(this,evt);}else{this._events=new Events();this._eventsCount=0;}return this;};//
// Alias methods names because people roll like that.
//
EventEmitter.prototype.off=EventEmitter.prototype.removeListener;EventEmitter.prototype.addListener=EventEmitter.prototype.on;//
// Expose the prefix.
//
EventEmitter.prefixed=prefix;//
// Allow `EventEmitter` to be imported as module namespace.
//
EventEmitter.EventEmitter=EventEmitter;//
// Expose the module.
//
if(true){module.exports=EventEmitter;}/***/},/***/"./node_modules/node-libs-browser/node_modules/events/events.js":/*!**********************************************************************!*\
  !*** ./node_modules/node-libs-browser/node_modules/events/events.js ***!
  \**********************************************************************//*! no static exports found *//*! ModuleConcatenation bailout: Module is not an ECMAScript module *//***/function node_modulesNodeLibsBrowserNode_modulesEventsEventsJs(module,exports){// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
function EventEmitter(){this._events=this._events||{};this._maxListeners=this._maxListeners||undefined;}module.exports=EventEmitter;// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter=EventEmitter;EventEmitter.prototype._events=undefined;EventEmitter.prototype._maxListeners=undefined;// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners=10;// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners=function(n){if(!isNumber(n)||n<0||isNaN(n))throw TypeError('n must be a positive number');this._maxListeners=n;return this;};EventEmitter.prototype.emit=function(type){var er,handler,len,args,i,listeners;if(!this._events)this._events={};// If there is no 'error' event listener then throw.
if(type==='error'){if(!this._events.error||isObject(this._events.error)&&!this._events.error.length){er=arguments[1];if(er instanceof Error){throw er;// Unhandled 'error' event
}else{// At least give some kind of context to the user
var err=new Error('Uncaught, unspecified "error" event. ('+er+')');err.context=er;throw err;}}}handler=this._events[type];if(isUndefined(handler))return false;if(isFunction(handler)){switch(arguments.length){// fast cases
case 1:handler.call(this);break;case 2:handler.call(this,arguments[1]);break;case 3:handler.call(this,arguments[1],arguments[2]);break;// slower
default:args=Array.prototype.slice.call(arguments,1);handler.apply(this,args);}}else if(isObject(handler)){args=Array.prototype.slice.call(arguments,1);listeners=handler.slice();len=listeners.length;for(i=0;i<len;i++){listeners[i].apply(this,args);}}return true;};EventEmitter.prototype.addListener=function(type,listener){var m;if(!isFunction(listener))throw TypeError('listener must be a function');if(!this._events)this._events={};// To avoid recursion in the case that type === "newListener"! Before
// adding it to the listeners, first emit "newListener".
if(this._events.newListener)this.emit('newListener',type,isFunction(listener.listener)?listener.listener:listener);if(!this._events[type])// Optimize the case of one listener. Don't need the extra array object.
this._events[type]=listener;else if(isObject(this._events[type]))// If we've already got an array, just append.
this._events[type].push(listener);else// Adding the second element, need to change to array.
this._events[type]=[this._events[type],listener];// Check for listener leak
if(isObject(this._events[type])&&!this._events[type].warned){if(!isUndefined(this._maxListeners)){m=this._maxListeners;}else{m=EventEmitter.defaultMaxListeners;}if(m&&m>0&&this._events[type].length>m){this._events[type].warned=true;console.error('(node) warning: possible EventEmitter memory '+'leak detected. %d listeners added. '+'Use emitter.setMaxListeners() to increase limit.',this._events[type].length);if(typeof console.trace==='function'){// not supported in IE 10
console.trace();}}}return this;};EventEmitter.prototype.on=EventEmitter.prototype.addListener;EventEmitter.prototype.once=function(type,listener){if(!isFunction(listener))throw TypeError('listener must be a function');var fired=false;function g(){this.removeListener(type,g);if(!fired){fired=true;listener.apply(this,arguments);}}g.listener=listener;this.on(type,g);return this;};// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener=function(type,listener){var list,position,length,i;if(!isFunction(listener))throw TypeError('listener must be a function');if(!this._events||!this._events[type])return this;list=this._events[type];length=list.length;position=-1;if(list===listener||isFunction(list.listener)&&list.listener===listener){delete this._events[type];if(this._events.removeListener)this.emit('removeListener',type,listener);}else if(isObject(list)){for(i=length;i-->0;){if(list[i]===listener||list[i].listener&&list[i].listener===listener){position=i;break;}}if(position<0)return this;if(list.length===1){list.length=0;delete this._events[type];}else{list.splice(position,1);}if(this._events.removeListener)this.emit('removeListener',type,listener);}return this;};EventEmitter.prototype.removeAllListeners=function(type){var key,listeners;if(!this._events)return this;// not listening for removeListener, no need to emit
if(!this._events.removeListener){if(arguments.length===0)this._events={};else if(this._events[type])delete this._events[type];return this;}// emit removeListener for all listeners on all events
if(arguments.length===0){for(key in this._events){if(key==='removeListener')continue;this.removeAllListeners(key);}this.removeAllListeners('removeListener');this._events={};return this;}listeners=this._events[type];if(isFunction(listeners)){this.removeListener(type,listeners);}else if(listeners){// LIFO order
while(listeners.length){this.removeListener(type,listeners[listeners.length-1]);}}delete this._events[type];return this;};EventEmitter.prototype.listeners=function(type){var ret;if(!this._events||!this._events[type])ret=[];else if(isFunction(this._events[type]))ret=[this._events[type]];else ret=this._events[type].slice();return ret;};EventEmitter.prototype.listenerCount=function(type){if(this._events){var evlistener=this._events[type];if(isFunction(evlistener))return 1;else if(evlistener)return evlistener.length;}return 0;};EventEmitter.listenerCount=function(emitter,type){return emitter.listenerCount(type);};function isFunction(arg){return typeof arg==='function';}function isNumber(arg){return typeof arg==='number';}function isObject(arg){return typeof arg==='object'&&arg!==null;}function isUndefined(arg){return arg===void 0;}/***/},/***/"./node_modules/url-toolkit/src/url-toolkit.js":/*!*****************************************************!*\
  !*** ./node_modules/url-toolkit/src/url-toolkit.js ***!
  \*****************************************************//*! no static exports found *//*! ModuleConcatenation bailout: Module is not an ECMAScript module *//***/function node_modulesUrlToolkitSrcUrlToolkitJs(module,exports,__webpack_require__){// see https://tools.ietf.org/html/rfc1808
/* jshint ignore:start */(function(root){/* jshint ignore:end */var URL_REGEX=/^((?:[a-zA-Z0-9+\-.]+:)?)(\/\/[^\/?#]*)?((?:[^\/\?#]*\/)*.*?)??(;.*?)?(\?.*?)?(#.*?)?$/;var FIRST_SEGMENT_REGEX=/^([^\/?#]*)(.*)$/;var SLASH_DOT_REGEX=/(?:\/|^)\.(?=\/)/g;var SLASH_DOT_DOT_REGEX=/(?:\/|^)\.\.\/(?!\.\.\/).*?(?=\/)/g;var URLToolkit={// jshint ignore:line
// If opts.alwaysNormalize is true then the path will always be normalized even when it starts with / or //
// E.g
// With opts.alwaysNormalize = false (default, spec compliant)
// http://a.com/b/cd + /e/f/../g => http://a.com/e/f/../g
// With opts.alwaysNormalize = true (not spec compliant)
// http://a.com/b/cd + /e/f/../g => http://a.com/e/g
buildAbsoluteURL:function buildAbsoluteURL(baseURL,relativeURL,opts){opts=opts||{};// remove any remaining space and CRLF
baseURL=baseURL.trim();relativeURL=relativeURL.trim();if(!relativeURL){// 2a) If the embedded URL is entirely empty, it inherits the
// entire base URL (i.e., is set equal to the base URL)
// and we are done.
if(!opts.alwaysNormalize){return baseURL;}var basePartsForNormalise=URLToolkit.parseURL(baseURL);if(!basePartsForNormalise){throw new Error('Error trying to parse base URL.');}basePartsForNormalise.path=URLToolkit.normalizePath(basePartsForNormalise.path);return URLToolkit.buildURLFromParts(basePartsForNormalise);}var relativeParts=URLToolkit.parseURL(relativeURL);if(!relativeParts){throw new Error('Error trying to parse relative URL.');}if(relativeParts.scheme){// 2b) If the embedded URL starts with a scheme name, it is
// interpreted as an absolute URL and we are done.
if(!opts.alwaysNormalize){return relativeURL;}relativeParts.path=URLToolkit.normalizePath(relativeParts.path);return URLToolkit.buildURLFromParts(relativeParts);}var baseParts=URLToolkit.parseURL(baseURL);if(!baseParts){throw new Error('Error trying to parse base URL.');}if(!baseParts.netLoc&&baseParts.path&&baseParts.path[0]!=='/'){// If netLoc missing and path doesn't start with '/', assume everthing before the first '/' is the netLoc
// This causes 'example.com/a' to be handled as '//example.com/a' instead of '/example.com/a'
var pathParts=FIRST_SEGMENT_REGEX.exec(baseParts.path);baseParts.netLoc=pathParts[1];baseParts.path=pathParts[2];}if(baseParts.netLoc&&!baseParts.path){baseParts.path='/';}var builtParts={// 2c) Otherwise, the embedded URL inherits the scheme of
// the base URL.
scheme:baseParts.scheme,netLoc:relativeParts.netLoc,path:null,params:relativeParts.params,query:relativeParts.query,fragment:relativeParts.fragment};if(!relativeParts.netLoc){// 3) If the embedded URL's <net_loc> is non-empty, we skip to
// Step 7.  Otherwise, the embedded URL inherits the <net_loc>
// (if any) of the base URL.
builtParts.netLoc=baseParts.netLoc;// 4) If the embedded URL path is preceded by a slash "/", the
// path is not relative and we skip to Step 7.
if(relativeParts.path[0]!=='/'){if(!relativeParts.path){// 5) If the embedded URL path is empty (and not preceded by a
// slash), then the embedded URL inherits the base URL path
builtParts.path=baseParts.path;// 5a) if the embedded URL's <params> is non-empty, we skip to
// step 7; otherwise, it inherits the <params> of the base
// URL (if any) and
if(!relativeParts.params){builtParts.params=baseParts.params;// 5b) if the embedded URL's <query> is non-empty, we skip to
// step 7; otherwise, it inherits the <query> of the base
// URL (if any) and we skip to step 7.
if(!relativeParts.query){builtParts.query=baseParts.query;}}}else{// 6) The last segment of the base URL's path (anything
// following the rightmost slash "/", or the entire path if no
// slash is present) is removed and the embedded URL's path is
// appended in its place.
var baseURLPath=baseParts.path;var newPath=baseURLPath.substring(0,baseURLPath.lastIndexOf('/')+1)+relativeParts.path;builtParts.path=URLToolkit.normalizePath(newPath);}}}if(builtParts.path===null){builtParts.path=opts.alwaysNormalize?URLToolkit.normalizePath(relativeParts.path):relativeParts.path;}return URLToolkit.buildURLFromParts(builtParts);},parseURL:function parseURL(url){var parts=URL_REGEX.exec(url);if(!parts){return null;}return{scheme:parts[1]||'',netLoc:parts[2]||'',path:parts[3]||'',params:parts[4]||'',query:parts[5]||'',fragment:parts[6]||''};},normalizePath:function normalizePath(path){// The following operations are
// then applied, in order, to the new path:
// 6a) All occurrences of "./", where "." is a complete path
// segment, are removed.
// 6b) If the path ends with "." as a complete path segment,
// that "." is removed.
path=path.split('').reverse().join('').replace(SLASH_DOT_REGEX,'');// 6c) All occurrences of "<segment>/../", where <segment> is a
// complete path segment not equal to "..", are removed.
// Removal of these path segments is performed iteratively,
// removing the leftmost matching pattern on each iteration,
// until no matching pattern remains.
// 6d) If the path ends with "<segment>/..", where <segment> is a
// complete path segment not equal to "..", that
// "<segment>/.." is removed.
while(path.length!==(path=path.replace(SLASH_DOT_DOT_REGEX,'')).length){}// jshint ignore:line
return path.split('').reverse().join('');},buildURLFromParts:function buildURLFromParts(parts){return parts.scheme+parts.netLoc+parts.path+parts.params+parts.query+parts.fragment;}};/* jshint ignore:start */if(true)module.exports=URLToolkit;else{}})(this);/* jshint ignore:end *//***/},/***/"./node_modules/webworkify-webpack/index.js":/*!**************************************************!*\
  !*** ./node_modules/webworkify-webpack/index.js ***!
  \**************************************************//*! no static exports found *//*! ModuleConcatenation bailout: Module is not an ECMAScript module *//***/function node_modulesWebworkifyWebpackIndexJs(module,exports,__webpack_require__){function webpackBootstrapFunc(modules){/******/// The module cache
/******/var installedModules={};/******/// The require function
/******/function __webpack_require__(moduleId){/******/// Check if module is in cache
/******/if(installedModules[moduleId])/******/return installedModules[moduleId].exports;/******/// Create a new module (and put it into the cache)
/******/var module=installedModules[moduleId]={/******/i:moduleId,/******/l:false,/******/exports:{}/******/};/******/// Execute the module function
/******/modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);/******/// Flag the module as loaded
/******/module.l=true;/******/// Return the exports of the module
/******/return module.exports;/******/}/******/// expose the modules object (__webpack_modules__)
/******/__webpack_require__.m=modules;/******/// expose the module cache
/******/__webpack_require__.c=installedModules;/******/// identity function for calling harmony imports with the correct context
/******/__webpack_require__.i=function(value){return value;};/******/// define getter function for harmony exports
/******/__webpack_require__.d=function(exports,name,getter){/******/if(!__webpack_require__.o(exports,name)){/******/Object.defineProperty(exports,name,{/******/configurable:false,/******/enumerable:true,/******/get:getter/******/});/******/}/******/};/******/// define __esModule on exports
/******/__webpack_require__.r=function(exports){/******/Object.defineProperty(exports,'__esModule',{value:true});/******/};/******/// getDefaultExport function for compatibility with non-harmony modules
/******/__webpack_require__.n=function(module){/******/var getter=module&&module.__esModule?/******/function getDefault(){return module['default'];}:/******/function getModuleExports(){return module;};/******/__webpack_require__.d(getter,'a',getter);/******/return getter;/******/};/******/// Object.prototype.hasOwnProperty.call
/******/__webpack_require__.o=function(object,property){return Object.prototype.hasOwnProperty.call(object,property);};/******/// __webpack_public_path__
/******/__webpack_require__.p="/";/******/// on error function for async loading
/******/__webpack_require__.oe=function(err){console.error(err);throw err;};var f=__webpack_require__(__webpack_require__.s=ENTRY_MODULE);return f.default||f;// try to call default if defined to also support babel esmodule exports
}var moduleNameReqExp='[\\.|\\-|\\+|\\w|\/|@]+';var dependencyRegExp='\\((\/\\*.*?\\*\/)?\s?.*?('+moduleNameReqExp+').*?\\)';// additional chars when output.pathinfo is true
// http://stackoverflow.com/a/2593661/130442
function quoteRegExp(str){return(str+'').replace(/[.?*+^$[\]\\(){}|-]/g,'\\$&');}function isNumeric(n){return!isNaN(1*n);// 1 * n converts integers, integers as string ("123"), 1e3 and "1e3" to integers and strings to NaN
}function getModuleDependencies(sources,module,queueName){var retval={};retval[queueName]=[];var fnString=module.toString();var wrapperSignature=fnString.match(/^function\s?\(\w+,\s*\w+,\s*(\w+)\)/);if(!wrapperSignature)return retval;var webpackRequireName=wrapperSignature[1];// main bundle deps
var re=new RegExp('(\\\\n|\\W)'+quoteRegExp(webpackRequireName)+dependencyRegExp,'g');var match;while(match=re.exec(fnString)){if(match[3]==='dll-reference')continue;retval[queueName].push(match[3]);}// dll deps
re=new RegExp('\\('+quoteRegExp(webpackRequireName)+'\\("(dll-reference\\s('+moduleNameReqExp+'))"\\)\\)'+dependencyRegExp,'g');while(match=re.exec(fnString)){if(!sources[match[2]]){retval[queueName].push(match[1]);sources[match[2]]=__webpack_require__(match[1]).m;}retval[match[2]]=retval[match[2]]||[];retval[match[2]].push(match[4]);}// convert 1e3 back to 1000 - this can be important after uglify-js converted 1000 to 1e3
var keys=Object.keys(retval);for(var i=0;i<keys.length;i++){for(var j=0;j<retval[keys[i]].length;j++){if(isNumeric(retval[keys[i]][j])){retval[keys[i]][j]=1*retval[keys[i]][j];}}}return retval;}function hasValuesInQueues(queues){var keys=Object.keys(queues);return keys.reduce(function(hasValues,key){return hasValues||queues[key].length>0;},false);}function getRequiredModules(sources,moduleId){var modulesQueue={main:[moduleId]};var requiredModules={main:[]};var seenModules={main:{}};while(hasValuesInQueues(modulesQueue)){var queues=Object.keys(modulesQueue);for(var i=0;i<queues.length;i++){var queueName=queues[i];var queue=modulesQueue[queueName];var moduleToCheck=queue.pop();seenModules[queueName]=seenModules[queueName]||{};if(seenModules[queueName][moduleToCheck]||!sources[queueName][moduleToCheck])continue;seenModules[queueName][moduleToCheck]=true;requiredModules[queueName]=requiredModules[queueName]||[];requiredModules[queueName].push(moduleToCheck);var newModules=getModuleDependencies(sources,sources[queueName][moduleToCheck],queueName);var newModulesKeys=Object.keys(newModules);for(var j=0;j<newModulesKeys.length;j++){modulesQueue[newModulesKeys[j]]=modulesQueue[newModulesKeys[j]]||[];modulesQueue[newModulesKeys[j]]=modulesQueue[newModulesKeys[j]].concat(newModules[newModulesKeys[j]]);}}}return requiredModules;}module.exports=function(moduleId,options){options=options||{};var sources={main:__webpack_require__.m};var requiredModules=options.all?{main:Object.keys(sources.main)}:getRequiredModules(sources,moduleId);var src='';Object.keys(requiredModules).filter(function(m){return m!=='main';}).forEach(function(module){var entryModule=0;while(requiredModules[module][entryModule]){entryModule++;}requiredModules[module].push(entryModule);sources[module][entryModule]='(function(module, exports, __webpack_require__) { module.exports = __webpack_require__; })';src=src+'var '+module+' = ('+webpackBootstrapFunc.toString().replace('ENTRY_MODULE',JSON.stringify(entryModule))+')({'+requiredModules[module].map(function(id){return''+JSON.stringify(id)+': '+sources[module][id].toString();}).join(',')+'});\n';});src=src+'new (('+webpackBootstrapFunc.toString().replace('ENTRY_MODULE',JSON.stringify(moduleId))+')({'+requiredModules.main.map(function(id){return''+JSON.stringify(id)+': '+sources.main[id].toString();}).join(',')+'}))(self);';var blob=new window.Blob([src],{type:'text/javascript'});if(options.bare){return blob;}var URL=window.URL||window.webkitURL||window.mozURL||window.msURL;var workerUrl=URL.createObjectURL(blob);var worker=new window.Worker(workerUrl);worker.objectURL=workerUrl;return worker;};/***/},/***/"./src/config.js":/*!***********************!*\
  !*** ./src/config.js ***!
  \***********************//*! no static exports found *//*! ModuleConcatenation bailout: Module is not an ECMAScript module *//***/function srcConfigJs(module,exports,__webpack_require__){"use strict";/**
 * HLS config
 */Object.defineProperty(exports,"__esModule",{value:true});var abr_controller_1=__webpack_require__(/*! ./controller/abr-controller */"./src/controller/abr-controller.js");var buffer_controller_1=__webpack_require__(/*! ./controller/buffer-controller */"./src/controller/buffer-controller.js");var cap_level_controller_1=__webpack_require__(/*! ./controller/cap-level-controller */"./src/controller/cap-level-controller.js");var fps_controller_1=__webpack_require__(/*! ./controller/fps-controller */"./src/controller/fps-controller.js");var xhr_loader_1=__webpack_require__(/*! ./utils/xhr-loader */"./src/utils/xhr-loader.js");// import FetchLoader from './utils/fetch-loader';
var audio_track_controller_1=__webpack_require__(/*! ./controller/audio-track-controller */"./src/controller/audio-track-controller.js");var audio_stream_controller_1=__webpack_require__(/*! ./controller/audio-stream-controller */"./src/controller/audio-stream-controller.js");var Cues=__webpack_require__(/*! ./utils/cues */"./src/utils/cues.js");var timeline_controller_1=__webpack_require__(/*! ./controller/timeline-controller */"./src/controller/timeline-controller.js");var subtitle_track_controller_1=__webpack_require__(/*! ./controller/subtitle-track-controller */"./src/controller/subtitle-track-controller.js");var subtitle_stream_controller_1=__webpack_require__(/*! ./controller/subtitle-stream-controller */"./src/controller/subtitle-stream-controller.js");var eme_controller_1=__webpack_require__(/*! ./controller/eme-controller */"./src/controller/eme-controller.js");var mediakeys_helper_1=__webpack_require__(/*! ./utils/mediakeys-helper */"./src/utils/mediakeys-helper.js");exports.hlsDefaultConfig={autoStartLoad:true,startPosition:-1,defaultAudioCodec:undefined,debug:false,capLevelOnFPSDrop:false,capLevelToPlayerSize:false,initialLiveManifestSize:1,maxBufferLength:30,maxBufferSize:60*1000*1000,maxBufferHole:0.5,lowBufferWatchdogPeriod:0.5,highBufferWatchdogPeriod:3,nudgeOffset:0.1,nudgeMaxRetry:3,maxFragLookUpTolerance:0.25,liveSyncDurationCount:3,liveMaxLatencyDurationCount:Infinity,liveSyncDuration:undefined,liveMaxLatencyDuration:undefined,liveDurationInfinity:false,liveBackBufferLength:Infinity,maxMaxBufferLength:600,enableWorker:true,enableSoftwareAES:true,manifestLoadingTimeOut:10000,manifestLoadingMaxRetry:1,manifestLoadingRetryDelay:1000,manifestLoadingMaxRetryTimeout:64000,startLevel:undefined,levelLoadingTimeOut:10000,levelLoadingMaxRetry:4,levelLoadingRetryDelay:1000,levelLoadingMaxRetryTimeout:64000,fragLoadingTimeOut:20000,fragLoadingMaxRetry:6,fragLoadingRetryDelay:1000,fragLoadingMaxRetryTimeout:64000,startFragPrefetch:false,fpsDroppedMonitoringPeriod:5000,fpsDroppedMonitoringThreshold:0.2,appendErrorMaxRetry:3,loader:xhr_loader_1.default,// loader: FetchLoader,
fLoader:undefined,pLoader:undefined,xhrSetup:undefined,licenseXhrSetup:undefined,// fetchSetup: undefined,
abrController:abr_controller_1.default,bufferController:buffer_controller_1.default,capLevelController:cap_level_controller_1.default,fpsController:fps_controller_1.default,stretchShortVideoTrack:false,maxAudioFramesDrift:1,forceKeyFrameOnDiscontinuity:true,abrEwmaFastLive:3,abrEwmaSlowLive:9,abrEwmaFastVoD:3,abrEwmaSlowVoD:9,abrEwmaDefaultEstimate:5e5,abrBandWidthFactor:0.95,abrBandWidthUpFactor:0.7,abrMaxWithRealBitrate:false,maxStarvationDelay:4,maxLoadingDelay:4,minAutoBitrate:0,emeEnabled:false,widevineLicenseUrl:undefined,requestMediaKeySystemAccessFunc:mediakeys_helper_1.requestMediaKeySystemAccess// used by eme-controller
};if(true){exports.hlsDefaultConfig.subtitleStreamController=subtitle_stream_controller_1.SubtitleStreamController;exports.hlsDefaultConfig.subtitleTrackController=subtitle_track_controller_1.default;exports.hlsDefaultConfig.timelineController=timeline_controller_1.default;exports.hlsDefaultConfig.cueHandler=Cues;// used by timeline-controller
exports.hlsDefaultConfig.enableCEA708Captions=true;// used by timeline-controller
exports.hlsDefaultConfig.enableWebVTT=true;// used by timeline-controller
exports.hlsDefaultConfig.captionsTextTrack1Label='English';// used by timeline-controller
exports.hlsDefaultConfig.captionsTextTrack1LanguageCode='en';// used by timeline-controller
exports.hlsDefaultConfig.captionsTextTrack2Label='Spanish';// used by timeline-controller
exports.hlsDefaultConfig.captionsTextTrack2LanguageCode='es';// used by timeline-controller
}if(true){exports.hlsDefaultConfig.audioStreamController=audio_stream_controller_1.default;exports.hlsDefaultConfig.audioTrackController=audio_track_controller_1.default;}if(true){exports.hlsDefaultConfig.emeController=eme_controller_1.default;}/***/},/***/"./src/controller/abr-controller.js":/*!******************************************!*\
  !*** ./src/controller/abr-controller.js ***!
  \******************************************//*! no static exports found *//*! ModuleConcatenation bailout: Module is not an ECMAScript module *//***/function srcControllerAbrControllerJs(module,exports,__webpack_require__){"use strict";/* WEBPACK VAR INJECTION */(function(Number){/*
 * simple ABR Controller
 *  - compute next level based on last fragment bw heuristics
 *  - implement an abandon rules triggered if we have less than 2 frag buffered and if computed bw shows that we risk buffer stalling
 */var __extends=this&&this.__extends||function(){var extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;}||function(d,b){for(var p in b){if(b.hasOwnProperty(p))d[p]=b[p];}};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};}();Object.defineProperty(exports,"__esModule",{value:true});var events_1=__webpack_require__(/*! ../events */"./src/events.js");var event_handler_1=__webpack_require__(/*! ../event-handler */"./src/event-handler.js");var buffer_helper_1=__webpack_require__(/*! ../utils/buffer-helper */"./src/utils/buffer-helper.js");var errors_1=__webpack_require__(/*! ../errors */"./src/errors.js");var logger_1=__webpack_require__(/*! ../utils/logger */"./src/utils/logger.js");var ewma_bandwidth_estimator_1=__webpack_require__(/*! ../utils/ewma-bandwidth-estimator */"./src/utils/ewma-bandwidth-estimator.js");var performance=window.performance;var AbrController=/** @class */function(_super){__extends(AbrController,_super);function AbrController(hls){var _this=_super.call(this,hls,events_1.default.FRAG_LOADING,events_1.default.FRAG_LOADED,events_1.default.FRAG_BUFFERED,events_1.default.ERROR)||this;_this.lastLoadedFragLevel=0;_this._nextAutoLevel=-1;_this.hls=hls;_this.timer=null;_this._bwEstimator=null;_this.onCheck=_this._abandonRulesCheck.bind(_this);return _this;}AbrController.prototype.destroy=function(){this.clearTimer();event_handler_1.default.prototype.destroy.call(this);};AbrController.prototype.onFragLoading=function(data){var frag=data.frag;if(frag.type==='main'){if(!this.timer){this.fragCurrent=frag;this.timer=setInterval(this.onCheck,100);}// lazy init of BwEstimator, rationale is that we use different params for Live/VoD
// so we need to wait for stream manifest / playlist type to instantiate it.
if(!this._bwEstimator){var hls_1=this.hls;var config=hls_1.config;var level=frag.level;var isLive=hls_1.levels[level].details.live;var ewmaFast=void 0,ewmaSlow=void 0;if(isLive){ewmaFast=config.abrEwmaFastLive;ewmaSlow=config.abrEwmaSlowLive;}else{ewmaFast=config.abrEwmaFastVoD;ewmaSlow=config.abrEwmaSlowVoD;}this._bwEstimator=new ewma_bandwidth_estimator_1.default(hls_1,ewmaSlow,ewmaFast,config.abrEwmaDefaultEstimate);}}};AbrController.prototype._abandonRulesCheck=function(){/*
          monitor fragment retrieval time...
          we compute expected time of arrival of the complete fragment.
          we compare it to expected time of buffer starvation
        */var hls=this.hls;var video=hls.media;var frag=this.fragCurrent;if(!frag){return;}var loader=frag.loader;var minAutoLevel=hls.minAutoLevel;// if loader has been destroyed or loading has been aborted, stop timer and return
if(!loader||loader.stats&&loader.stats.aborted){logger_1.logger.warn('frag loader destroy or aborted, disarm abandonRules');this.clearTimer();// reset forced auto level value so that next level will be selected
this._nextAutoLevel=-1;return;}var stats=loader.stats;/* only monitor frag retrieval time if
        (video not paused OR first fragment being loaded(ready state === HAVE_NOTHING = 0)) AND autoswitching enabled AND not lowest level (=> means that we have several levels) */if(video&&stats&&(!video.paused&&video.playbackRate!==0||!video.readyState)&&frag.autoLevel&&frag.level){var requestDelay=performance.now()-stats.trequest,playbackRate=Math.abs(video.playbackRate);// monitor fragment load progress after half of expected fragment duration,to stabilize bitrate
if(requestDelay>500*frag.duration/playbackRate){var levels=hls.levels,loadRate=Math.max(1,stats.bw?stats.bw/8:stats.loaded*1000/requestDelay),// byte/s; at least 1 byte/s to avoid division by zero
// compute expected fragment length using frag duration and level bitrate. also ensure that expected len is gte than already loaded size
level=levels[frag.level],levelBitrate=level.realBitrate?Math.max(level.realBitrate,level.bitrate):level.bitrate,expectedLen=stats.total?stats.total:Math.max(stats.loaded,Math.round(frag.duration*levelBitrate/8)),pos=video.currentTime,fragLoadedDelay=(expectedLen-stats.loaded)/loadRate,bufferStarvationDelay=(buffer_helper_1.BufferHelper.bufferInfo(video,pos,hls.config.maxBufferHole).end-pos)/playbackRate;// consider emergency switch down only if we have less than 2 frag buffered AND
// time to finish loading current fragment is bigger than buffer starvation delay
// ie if we risk buffer starvation if bw does not increase quickly
if(bufferStarvationDelay<2*frag.duration/playbackRate&&fragLoadedDelay>bufferStarvationDelay){var fragLevelNextLoadedDelay=void 0,nextLoadLevel=void 0;// lets iterate through lower level and try to find the biggest one that could avoid rebuffering
// we start from current level - 1 and we step down , until we find a matching level
for(nextLoadLevel=frag.level-1;nextLoadLevel>minAutoLevel;nextLoadLevel--){// compute time to load next fragment at lower level
// 0.8 : consider only 80% of current bw to be conservative
// 8 = bits per byte (bps/Bps)
var levelNextBitrate=levels[nextLoadLevel].realBitrate?Math.max(levels[nextLoadLevel].realBitrate,levels[nextLoadLevel].bitrate):levels[nextLoadLevel].bitrate;fragLevelNextLoadedDelay=frag.duration*levelNextBitrate/(8*0.8*loadRate);if(fragLevelNextLoadedDelay<bufferStarvationDelay){// we found a lower level that be rebuffering free with current estimated bw !
break;}}// only emergency switch down if it takes less time to load new fragment at lowest level instead
// of finishing loading current one ...
if(fragLevelNextLoadedDelay<fragLoadedDelay){logger_1.logger.warn("loading too slow, abort fragment loading and switch to level "+nextLoadLevel+":fragLoadedDelay["+nextLoadLevel+"]<fragLoadedDelay["+(frag.level-1)+"];bufferStarvationDelay:"+fragLevelNextLoadedDelay.toFixed(1)+"<"+fragLoadedDelay.toFixed(1)+":"+bufferStarvationDelay.toFixed(1));// force next load level in auto mode
hls.nextLoadLevel=nextLoadLevel;// update bw estimate for this fragment before cancelling load (this will help reducing the bw)
this._bwEstimator.sample(requestDelay,stats.loaded);// abort fragment loading
loader.abort();// stop abandon rules timer
this.clearTimer();hls.trigger(events_1.default.FRAG_LOAD_EMERGENCY_ABORTED,{frag:frag,stats:stats});}}}}};AbrController.prototype.onFragLoaded=function(data){var frag=data.frag;if(frag.type==='main'&&Number.isFinite(frag.sn)){// stop monitoring bw once frag loaded
this.clearTimer();// store level id after successful fragment load
this.lastLoadedFragLevel=frag.level;// reset forced auto level value so that next level will be selected
this._nextAutoLevel=-1;// compute level average bitrate
if(this.hls.config.abrMaxWithRealBitrate){var level=this.hls.levels[frag.level];var loadedBytes=(level.loaded?level.loaded.bytes:0)+data.stats.loaded;var loadedDuration=(level.loaded?level.loaded.duration:0)+data.frag.duration;level.loaded={bytes:loadedBytes,duration:loadedDuration};level.realBitrate=Math.round(8*loadedBytes/loadedDuration);}// if fragment has been loaded to perform a bitrate test,
if(data.frag.bitrateTest){var stats=data.stats;stats.tparsed=stats.tbuffered=stats.tload;this.onFragBuffered(data);}}};AbrController.prototype.onFragBuffered=function(data){var stats=data.stats;var frag=data.frag;// only update stats on first frag buffering
// if same frag is loaded multiple times, it might be in browser cache, and loaded quickly
// and leading to wrong bw estimation
// on bitrate test, also only update stats once (if tload = tbuffered == on FRAG_LOADED)
if(stats.aborted!==true&&frag.type==='main'&&Number.isFinite(frag.sn)&&(!frag.bitrateTest||stats.tload===stats.tbuffered)){// use tparsed-trequest instead of tbuffered-trequest to compute fragLoadingProcessing; rationale is that  buffer appending only happens once media is attached
// in case we use config.startFragPrefetch while media is not attached yet, fragment might be parsed while media not attached yet, but it will only be buffered on media attached
// as a consequence it could happen really late in the process. meaning that appending duration might appears huge ... leading to underestimated throughput estimation
var fragLoadingProcessingMs=stats.tparsed-stats.trequest;logger_1.logger.log("latency/loading/parsing/append/kbps:"+Math.round(stats.tfirst-stats.trequest)+"/"+Math.round(stats.tload-stats.tfirst)+"/"+Math.round(stats.tparsed-stats.tload)+"/"+Math.round(stats.tbuffered-stats.tparsed)+"/"+Math.round(8*stats.loaded/(stats.tbuffered-stats.trequest)));this._bwEstimator.sample(fragLoadingProcessingMs,stats.loaded);stats.bwEstimate=this._bwEstimator.getEstimate();// if fragment has been loaded to perform a bitrate test, (hls.startLevel = -1), store bitrate test delay duration
if(frag.bitrateTest){this.bitrateTestDelay=fragLoadingProcessingMs/1000;}else{this.bitrateTestDelay=0;}}};AbrController.prototype.onError=function(data){// stop timer in case of frag loading error
switch(data.details){case errors_1.ErrorDetails.FRAG_LOAD_ERROR:case errors_1.ErrorDetails.FRAG_LOAD_TIMEOUT:this.clearTimer();break;default:break;}};AbrController.prototype.clearTimer=function(){clearInterval(this.timer);this.timer=null;};Object.defineProperty(AbrController.prototype,"nextAutoLevel",{// return next auto level
get:function get(){var forcedAutoLevel=this._nextAutoLevel;var bwEstimator=this._bwEstimator;// in case next auto level has been forced, and bw not available or not reliable, return forced value
if(forcedAutoLevel!==-1&&(!bwEstimator||!bwEstimator.canEstimate())){return forcedAutoLevel;}// compute next level using ABR logic
var nextABRAutoLevel=this._nextABRAutoLevel;// if forced auto level has been defined, use it to cap ABR computed quality level
if(forcedAutoLevel!==-1){nextABRAutoLevel=Math.min(forcedAutoLevel,nextABRAutoLevel);}return nextABRAutoLevel;},set:function set(nextLevel){this._nextAutoLevel=nextLevel;},enumerable:true,configurable:true});Object.defineProperty(AbrController.prototype,"_nextABRAutoLevel",{get:function get(){var hls=this.hls,maxAutoLevel=hls.maxAutoLevel,levels=hls.levels,config=hls.config,minAutoLevel=hls.minAutoLevel;var video=hls.media,currentLevel=this.lastLoadedFragLevel,currentFragDuration=this.fragCurrent?this.fragCurrent.duration:0,pos=video?video.currentTime:0,// playbackRate is the absolute value of the playback rate; if video.playbackRate is 0, we use 1 to load as
// if we're playing back at the normal rate.
playbackRate=video&&video.playbackRate!==0?Math.abs(video.playbackRate):1.0,avgbw=this._bwEstimator?this._bwEstimator.getEstimate():config.abrEwmaDefaultEstimate,// bufferStarvationDelay is the wall-clock time left until the playback buffer is exhausted.
bufferStarvationDelay=(buffer_helper_1.BufferHelper.bufferInfo(video,pos,config.maxBufferHole).end-pos)/playbackRate;// First, look to see if we can find a level matching with our avg bandwidth AND that could also guarantee no rebuffering at all
var bestLevel=this._findBestLevel(currentLevel,currentFragDuration,avgbw,minAutoLevel,maxAutoLevel,bufferStarvationDelay,config.abrBandWidthFactor,config.abrBandWidthUpFactor,levels);if(bestLevel>=0){return bestLevel;}else{logger_1.logger.trace('rebuffering expected to happen, lets try to find a quality level minimizing the rebuffering');// not possible to get rid of rebuffering ... let's try to find level that will guarantee less than maxStarvationDelay of rebuffering
// if no matching level found, logic will return 0
var maxStarvationDelay=currentFragDuration?Math.min(currentFragDuration,config.maxStarvationDelay):config.maxStarvationDelay,bwFactor=config.abrBandWidthFactor,bwUpFactor=config.abrBandWidthUpFactor;if(bufferStarvationDelay===0){// in case buffer is empty, let's check if previous fragment was loaded to perform a bitrate test
var bitrateTestDelay=this.bitrateTestDelay;if(bitrateTestDelay){// if it is the case, then we need to adjust our max starvation delay using maxLoadingDelay config value
// max video loading delay used in  automatic start level selection :
// in that mode ABR controller will ensure that video loading time (ie the time to fetch the first fragment at lowest quality level +
// the time to fetch the fragment at the appropriate quality level is less than ```maxLoadingDelay``` )
// cap maxLoadingDelay and ensure it is not bigger 'than bitrate test' frag duration
var maxLoadingDelay=currentFragDuration?Math.min(currentFragDuration,config.maxLoadingDelay):config.maxLoadingDelay;maxStarvationDelay=maxLoadingDelay-bitrateTestDelay;logger_1.logger.trace("bitrate test took "+Math.round(1000*bitrateTestDelay)+"ms, set first fragment max fetchDuration to "+Math.round(1000*maxStarvationDelay)+" ms");// don't use conservative factor on bitrate test
bwFactor=bwUpFactor=1;}}bestLevel=this._findBestLevel(currentLevel,currentFragDuration,avgbw,minAutoLevel,maxAutoLevel,bufferStarvationDelay+maxStarvationDelay,bwFactor,bwUpFactor,levels);return Math.max(bestLevel,0);}},enumerable:true,configurable:true});AbrController.prototype._findBestLevel=function(currentLevel,currentFragDuration,currentBw,minAutoLevel,maxAutoLevel,maxFetchDuration,bwFactor,bwUpFactor,levels){for(var i=maxAutoLevel;i>=minAutoLevel;i--){var levelInfo=levels[i];if(!levelInfo){continue;}var levelDetails=levelInfo.details,avgDuration=levelDetails?levelDetails.totalduration/levelDetails.fragments.length:currentFragDuration,live=levelDetails?levelDetails.live:false,adjustedbw=void 0;// follow algorithm captured from stagefright :
// https://android.googlesource.com/platform/frameworks/av/+/master/media/libstagefright/httplive/LiveSession.cpp
// Pick the highest bandwidth stream below or equal to estimated bandwidth.
// consider only 80% of the available bandwidth, but if we are switching up,
// be even more conservative (70%) to avoid overestimating and immediately
// switching back.
if(i<=currentLevel){adjustedbw=bwFactor*currentBw;}else{adjustedbw=bwUpFactor*currentBw;}var bitrate=levels[i].realBitrate?Math.max(levels[i].realBitrate,levels[i].bitrate):levels[i].bitrate,fetchDuration=bitrate*avgDuration/adjustedbw;logger_1.logger.trace("level/adjustedbw/bitrate/avgDuration/maxFetchDuration/fetchDuration: "+i+"/"+Math.round(adjustedbw)+"/"+bitrate+"/"+avgDuration+"/"+maxFetchDuration+"/"+fetchDuration);// if adjusted bw is greater than level bitrate AND
if(adjustedbw>bitrate&&(// fragment fetchDuration unknown OR live stream OR fragment fetchDuration less than max allowed fetch duration, then this level matches
// we don't account for max Fetch Duration for live streams, this is to avoid switching down when near the edge of live sliding window ...
// special case to support startLevel = -1 (bitrateTest) on live streams : in that case we should not exit loop so that _findBestLevel will return -1
!fetchDuration||live&&!this.bitrateTestDelay||fetchDuration<maxFetchDuration)){// as we are looping from highest to lowest, this will return the best achievable quality level
return i;}}// not enough time budget even with quality level 0 ... rebuffering might happen
return-1;};return AbrController;}(event_handler_1.default);exports.default=AbrController;/* WEBPACK VAR INJECTION */}).call(this,__webpack_require__(/*! ./src/polyfills/number */"./src/polyfills/number.js")["Number"]);/***/},/***/"./src/controller/audio-stream-controller.js":/*!***************************************************!*\
  !*** ./src/controller/audio-stream-controller.js ***!
  \***************************************************//*! no static exports found *//*! ModuleConcatenation bailout: Module is not an ECMAScript module *//***/function srcControllerAudioStreamControllerJs(module,exports,__webpack_require__){"use strict";/* WEBPACK VAR INJECTION */(function(Number){/*
 * Audio Stream Controller
*/var __extends=this&&this.__extends||function(){var extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;}||function(d,b){for(var p in b){if(b.hasOwnProperty(p))d[p]=b[p];}};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};}();Object.defineProperty(exports,"__esModule",{value:true});var binary_search_1=__webpack_require__(/*! ../utils/binary-search */"./src/utils/binary-search.js");var buffer_helper_1=__webpack_require__(/*! ../utils/buffer-helper */"./src/utils/buffer-helper.js");var demuxer_1=__webpack_require__(/*! ../demux/demuxer */"./src/demux/demuxer.js");var events_1=__webpack_require__(/*! ../events */"./src/events.js");var LevelHelper=__webpack_require__(/*! ./level-helper */"./src/controller/level-helper.js");var time_ranges_1=__webpack_require__(/*! ../utils/time-ranges */"./src/utils/time-ranges.js");var errors_1=__webpack_require__(/*! ../errors */"./src/errors.js");var logger_1=__webpack_require__(/*! ../utils/logger */"./src/utils/logger.js");var discontinuities_1=__webpack_require__(/*! ../utils/discontinuities */"./src/utils/discontinuities.js");var fragment_tracker_1=__webpack_require__(/*! ./fragment-tracker */"./src/controller/fragment-tracker.js");var fragment_1=__webpack_require__(/*! ../loader/fragment */"./src/loader/fragment.js");var base_stream_controller_1=__webpack_require__(/*! ./base-stream-controller */"./src/controller/base-stream-controller.js");var performance=window.performance;var TICK_INTERVAL=100;// how often to tick in ms
var AudioStreamController=/** @class */function(_super){__extends(AudioStreamController,_super);function AudioStreamController(hls,fragmentTracker){var _this=_super.call(this,hls,events_1.default.MEDIA_ATTACHED,events_1.default.MEDIA_DETACHING,events_1.default.AUDIO_TRACKS_UPDATED,events_1.default.AUDIO_TRACK_SWITCHING,events_1.default.AUDIO_TRACK_LOADED,events_1.default.KEY_LOADED,events_1.default.FRAG_LOADED,events_1.default.FRAG_PARSING_INIT_SEGMENT,events_1.default.FRAG_PARSING_DATA,events_1.default.FRAG_PARSED,events_1.default.ERROR,events_1.default.BUFFER_RESET,events_1.default.BUFFER_CREATED,events_1.default.BUFFER_APPENDED,events_1.default.BUFFER_FLUSHED,events_1.default.INIT_PTS_FOUND)||this;_this.fragmentTracker=fragmentTracker;_this.config=hls.config;_this.audioCodecSwap=false;_this._state=base_stream_controller_1.State.STOPPED;_this.initPTS=[];_this.waitingFragment=null;_this.videoTrackCC=null;return _this;}// Signal that video PTS was found
AudioStreamController.prototype.onInitPtsFound=function(data){var demuxerId=data.id,cc=data.frag.cc,initPTS=data.initPTS;if(demuxerId==='main'){// Always update the new INIT PTS
// Can change due level switch
this.initPTS[cc]=initPTS;this.videoTrackCC=cc;logger_1.logger.log("InitPTS for cc: "+cc+" found from video track: "+initPTS);// If we are waiting we need to demux/remux the waiting frag
// With the new initPTS
if(this.state===base_stream_controller_1.State.WAITING_INIT_PTS){this.tick();}}};AudioStreamController.prototype.startLoad=function(startPosition){if(this.tracks){var lastCurrentTime=this.lastCurrentTime;this.stopLoad();this.setInterval(TICK_INTERVAL);this.fragLoadError=0;if(lastCurrentTime>0&&startPosition===-1){logger_1.logger.log("audio:override startPosition with lastCurrentTime @"+lastCurrentTime.toFixed(3));this.state=base_stream_controller_1.State.IDLE;}else{this.lastCurrentTime=this.startPosition?this.startPosition:startPosition;this.state=base_stream_controller_1.State.STARTING;}this.nextLoadPosition=this.startPosition=this.lastCurrentTime;this.tick();}else{this.startPosition=startPosition;this.state=base_stream_controller_1.State.STOPPED;}};Object.defineProperty(AudioStreamController.prototype,"state",{get:function get(){return this._state;},set:function set(nextState){if(this.state!==nextState){var previousState=this.state;this._state=nextState;logger_1.logger.log("audio stream:"+previousState+"->"+nextState);}},enumerable:true,configurable:true});AudioStreamController.prototype.doTick=function(){var pos,track,trackDetails,hls=this.hls,config=hls.config;// logger.log('audioStream:' + this.state);
switch(this.state){case base_stream_controller_1.State.ERROR:// don't do anything in error state to avoid breaking further ...
case base_stream_controller_1.State.PAUSED:// don't do anything in paused state either ...
case base_stream_controller_1.State.BUFFER_FLUSHING:break;case base_stream_controller_1.State.STARTING:this.state=base_stream_controller_1.State.WAITING_TRACK;this.loadedmetadata=false;break;case base_stream_controller_1.State.IDLE:var tracks=this.tracks;// audio tracks not received => exit loop
if(!tracks){break;}// if video not attached AND
// start fragment already requested OR start frag prefetch disable
// exit loop
// => if media not attached but start frag prefetch is enabled and start frag not requested yet, we will not exit loop
if(!this.media&&(this.startFragRequested||!config.startFragPrefetch)){break;}// determine next candidate fragment to be loaded, based on current position and
//  end of buffer position
// if we have not yet loaded any fragment, start loading from start position
if(this.loadedmetadata){pos=this.media.currentTime;}else{pos=this.nextLoadPosition;if(pos===undefined){break;}}var media=this.mediaBuffer?this.mediaBuffer:this.media,videoBuffer=this.videoBuffer?this.videoBuffer:this.media,bufferInfo=buffer_helper_1.BufferHelper.bufferInfo(media,pos,config.maxBufferHole),mainBufferInfo=buffer_helper_1.BufferHelper.bufferInfo(videoBuffer,pos,config.maxBufferHole),bufferLen=bufferInfo.len,bufferEnd_1=bufferInfo.end,fragPrevious=this.fragPrevious,// ensure we buffer at least config.maxBufferLength (default 30s) or config.maxMaxBufferLength (default: 600s)
// whichever is smaller.
// once we reach that threshold, don't buffer more than video (mainBufferInfo.len)
maxConfigBuffer=Math.min(config.maxBufferLength,config.maxMaxBufferLength),maxBufLen=Math.max(maxConfigBuffer,mainBufferInfo.len),audioSwitch=this.audioSwitch,trackId=this.trackId;// if buffer length is less than maxBufLen try to load a new fragment
if((bufferLen<maxBufLen||audioSwitch)&&trackId<tracks.length){trackDetails=tracks[trackId].details;// if track info not retrieved yet, switch state and wait for track retrieval
if(typeof trackDetails==='undefined'){this.state=base_stream_controller_1.State.WAITING_TRACK;break;}if(!audioSwitch&&this._streamEnded(bufferInfo,trackDetails)){this.hls.trigger(events_1.default.BUFFER_EOS,{type:'audio'});this.state=base_stream_controller_1.State.ENDED;return;}// find fragment index, contiguous with end of buffer position
var fragments=trackDetails.fragments,fragLen=fragments.length,start=fragments[0].start,end=fragments[fragLen-1].start+fragments[fragLen-1].duration,frag=void 0;// When switching audio track, reload audio as close as possible to currentTime
if(audioSwitch){if(trackDetails.live&&!trackDetails.PTSKnown){logger_1.logger.log('switching audiotrack, live stream, unknown PTS,load first fragment');bufferEnd_1=0;}else{bufferEnd_1=pos;// if currentTime (pos) is less than alt audio playlist start time, it means that alt audio is ahead of currentTime
if(trackDetails.PTSKnown&&pos<start){// if everything is buffered from pos to start or if audio buffer upfront, let's seek to start
if(bufferInfo.end>start||bufferInfo.nextStart){logger_1.logger.log('alt audio track ahead of main track, seek to start of alt audio track');this.media.currentTime=start+0.05;}else{return;}}}}if(trackDetails.initSegment&&!trackDetails.initSegment.data){frag=trackDetails.initSegment;}// eslint-disable-line brace-style
// if bufferEnd before start of playlist, load first fragment
else if(bufferEnd_1<=start){frag=fragments[0];if(this.videoTrackCC!==null&&frag.cc!==this.videoTrackCC){// Ensure we find a fragment which matches the continuity of the video track
frag=discontinuities_1.findFragWithCC(fragments,this.videoTrackCC);}if(trackDetails.live&&frag.loadIdx&&frag.loadIdx===this.fragLoadIdx){// we just loaded this first fragment, and we are still lagging behind the start of the live playlist
// let's force seek to start
var nextBuffered=bufferInfo.nextStart?bufferInfo.nextStart:start;logger_1.logger.log("no alt audio available @currentTime:"+this.media.currentTime+", seeking @"+(nextBuffered+0.05));this.media.currentTime=nextBuffered+0.05;return;}}else{var foundFrag=void 0;var maxFragLookUpTolerance_1=config.maxFragLookUpTolerance;var fragNext=fragPrevious?fragments[fragPrevious.sn-fragments[0].sn+1]:undefined;var fragmentWithinToleranceTest=function fragmentWithinToleranceTest(candidate){// offset should be within fragment boundary - config.maxFragLookUpTolerance
// this is to cope with situations like
// bufferEnd = 9.991
// frag[Ø] : [0,10]
// frag[1] : [10,20]
// bufferEnd is within frag[0] range ... although what we are expecting is to return frag[1] here
//              frag start               frag start+duration
//                  |-----------------------------|
//              <--->                         <--->
//  ...--------><-----------------------------><---------....
// previous frag         matching fragment         next frag
//  return -1             return 0                 return 1
// logger.log(`level/sn/start/end/bufEnd:${level}/${candidate.sn}/${candidate.start}/${(candidate.start+candidate.duration)}/${bufferEnd}`);
// Set the lookup tolerance to be small enough to detect the current segment - ensures we don't skip over very small segments
var candidateLookupTolerance=Math.min(maxFragLookUpTolerance_1,candidate.duration);if(candidate.start+candidate.duration-candidateLookupTolerance<=bufferEnd_1){return 1;}else if(candidate.start-candidateLookupTolerance>bufferEnd_1&&candidate.start){// if maxFragLookUpTolerance will have negative value then don't return -1 for first element
return-1;}return 0;};if(bufferEnd_1<end){if(bufferEnd_1>end-maxFragLookUpTolerance_1){maxFragLookUpTolerance_1=0;}// Prefer the next fragment if it's within tolerance
if(fragNext&&!fragmentWithinToleranceTest(fragNext)){foundFrag=fragNext;}else{foundFrag=binary_search_1.default.search(fragments,fragmentWithinToleranceTest);}}else{// reach end of playlist
foundFrag=fragments[fragLen-1];}if(foundFrag){frag=foundFrag;start=foundFrag.start;// logger.log('find SN matching with pos:' +  bufferEnd + ':' + frag.sn);
if(fragPrevious&&frag.level===fragPrevious.level&&frag.sn===fragPrevious.sn){if(frag.sn<trackDetails.endSN){frag=fragments[frag.sn+1-trackDetails.startSN];logger_1.logger.log("SN just loaded, load next one: "+frag.sn);}else{frag=null;}}}}if(frag){// logger.log('      loading frag ' + i +',pos/bufEnd:' + pos.toFixed(3) + '/' + bufferEnd.toFixed(3));
if(frag.encrypted){logger_1.logger.log("Loading key for "+frag.sn+" of ["+trackDetails.startSN+" ,"+trackDetails.endSN+"],track "+trackId);this.state=base_stream_controller_1.State.KEY_LOADING;hls.trigger(events_1.default.KEY_LOADING,{frag:frag});}else{logger_1.logger.log("Loading "+frag.sn+", cc: "+frag.cc+" of ["+trackDetails.startSN+" ,"+trackDetails.endSN+"],track "+trackId+", currentTime:"+pos+",bufferEnd:"+bufferEnd_1.toFixed(3));// only load if fragment is not loaded or if in audio switch
// we force a frag loading in audio switch as fragment tracker might not have evicted previous frags in case of quick audio switch
this.fragCurrent=frag;if(audioSwitch||this.fragmentTracker.getState(frag)===fragment_tracker_1.FragmentState.NOT_LOADED){this.startFragRequested=true;if(Number.isFinite(frag.sn)){this.nextLoadPosition=frag.start+frag.duration;}hls.trigger(events_1.default.FRAG_LOADING,{frag:frag});this.state=base_stream_controller_1.State.FRAG_LOADING;}}}}break;case base_stream_controller_1.State.WAITING_TRACK:track=this.tracks[this.trackId];// check if playlist is already loaded
if(track&&track.details){this.state=base_stream_controller_1.State.IDLE;}break;case base_stream_controller_1.State.FRAG_LOADING_WAITING_RETRY:var now=performance.now();var retryDate=this.retryDate;media=this.media;var isSeeking=media&&media.seeking;// if current time is gt than retryDate, or if media seeking let's switch to IDLE state to retry loading
if(!retryDate||now>=retryDate||isSeeking){logger_1.logger.log('audioStreamController: retryDate reached, switch back to IDLE state');this.state=base_stream_controller_1.State.IDLE;}break;case base_stream_controller_1.State.WAITING_INIT_PTS:var videoTrackCC=this.videoTrackCC;if(this.initPTS[videoTrackCC]===undefined){break;}// Ensure we don't get stuck in the WAITING_INIT_PTS state if the waiting frag CC doesn't match any initPTS
var waitingFrag=this.waitingFragment;if(waitingFrag){var waitingFragCC=waitingFrag.frag.cc;if(videoTrackCC!==waitingFragCC){track=this.tracks[this.trackId];if(track.details&&track.details.live){logger_1.logger.warn("Waiting fragment CC ("+waitingFragCC+") does not match video track CC ("+videoTrackCC+")");this.waitingFragment=null;this.state=base_stream_controller_1.State.IDLE;}}else{this.state=base_stream_controller_1.State.FRAG_LOADING;this.onFragLoaded(this.waitingFragment);this.waitingFragment=null;}}else{this.state=base_stream_controller_1.State.IDLE;}break;case base_stream_controller_1.State.STOPPED:case base_stream_controller_1.State.FRAG_LOADING:case base_stream_controller_1.State.PARSING:case base_stream_controller_1.State.PARSED:case base_stream_controller_1.State.ENDED:break;default:break;}};AudioStreamController.prototype.onMediaAttached=function(data){var media=this.media=this.mediaBuffer=data.media;this.onvseeking=this.onMediaSeeking.bind(this);this.onvended=this.onMediaEnded.bind(this);media.addEventListener('seeking',this.onvseeking);media.addEventListener('ended',this.onvended);var config=this.config;if(this.tracks&&config.autoStartLoad){this.startLoad(config.startPosition);}};AudioStreamController.prototype.onMediaDetaching=function(){var media=this.media;if(media&&media.ended){logger_1.logger.log('MSE detaching and video ended, reset startPosition');this.startPosition=this.lastCurrentTime=0;}// remove video listeners
if(media){media.removeEventListener('seeking',this.onvseeking);media.removeEventListener('ended',this.onvended);this.onvseeking=this.onvseeked=this.onvended=null;}this.media=this.mediaBuffer=this.videoBuffer=null;this.loadedmetadata=false;this.stopLoad();};AudioStreamController.prototype.onAudioTracksUpdated=function(data){logger_1.logger.log('audio tracks updated');this.tracks=data.audioTracks;};AudioStreamController.prototype.onAudioTrackSwitching=function(data){// if any URL found on new audio track, it is an alternate audio track
var altAudio=!!data.url;this.trackId=data.id;this.fragCurrent=null;this.state=base_stream_controller_1.State.PAUSED;this.waitingFragment=null;// destroy useless demuxer when switching audio to main
if(!altAudio){if(this.demuxer){this.demuxer.destroy();this.demuxer=null;}}else{// switching to audio track, start timer if not already started
this.setInterval(TICK_INTERVAL);}// should we switch tracks ?
if(altAudio){this.audioSwitch=true;// main audio track are handled by stream-controller, just do something if switching to alt audio track
this.state=base_stream_controller_1.State.IDLE;}this.tick();};AudioStreamController.prototype.onAudioTrackLoaded=function(data){var newDetails=data.details,trackId=data.id,track=this.tracks[trackId],duration=newDetails.totalduration,sliding=0;logger_1.logger.log("track "+trackId+" loaded ["+newDetails.startSN+","+newDetails.endSN+"],duration:"+duration);if(newDetails.live){var curDetails=track.details;if(curDetails&&newDetails.fragments.length>0){// we already have details for that level, merge them
LevelHelper.mergeDetails(curDetails,newDetails);sliding=newDetails.fragments[0].start;// TODO
// this.liveSyncPosition = this.computeLivePosition(sliding, curDetails);
if(newDetails.PTSKnown){logger_1.logger.log("live audio playlist sliding:"+sliding.toFixed(3));}else{logger_1.logger.log('live audio playlist - outdated PTS, unknown sliding');}}else{newDetails.PTSKnown=false;logger_1.logger.log('live audio playlist - first load, unknown sliding');}}else{newDetails.PTSKnown=false;}track.details=newDetails;// compute start position
if(!this.startFragRequested){// compute start position if set to -1. use it straight away if value is defined
if(this.startPosition===-1){// first, check if start time offset has been set in playlist, if yes, use this value
var startTimeOffset=newDetails.startTimeOffset;if(Number.isFinite(startTimeOffset)){logger_1.logger.log("start time offset found in playlist, adjust startPosition to "+startTimeOffset);this.startPosition=startTimeOffset;}else{this.startPosition=0;}}this.nextLoadPosition=this.startPosition;}// only switch batck to IDLE state if we were waiting for track to start downloading a new fragment
if(this.state===base_stream_controller_1.State.WAITING_TRACK){this.state=base_stream_controller_1.State.IDLE;}// trigger handler right now
this.tick();};AudioStreamController.prototype.onKeyLoaded=function(){if(this.state===base_stream_controller_1.State.KEY_LOADING){this.state=base_stream_controller_1.State.IDLE;this.tick();}};AudioStreamController.prototype.onFragLoaded=function(data){var fragCurrent=this.fragCurrent,fragLoaded=data.frag;if(this.state===base_stream_controller_1.State.FRAG_LOADING&&fragCurrent&&fragLoaded.type==='audio'&&fragLoaded.level===fragCurrent.level&&fragLoaded.sn===fragCurrent.sn){var track=this.tracks[this.trackId],details=track.details,duration=details.totalduration,trackId=fragCurrent.level,sn=fragCurrent.sn,cc=fragCurrent.cc,audioCodec=this.config.defaultAudioCodec||track.audioCodec||'mp4a.40.2',stats=this.stats=data.stats;if(sn==='initSegment'){this.state=base_stream_controller_1.State.IDLE;stats.tparsed=stats.tbuffered=performance.now();details.initSegment.data=data.payload;this.hls.trigger(events_1.default.FRAG_BUFFERED,{stats:stats,frag:fragCurrent,id:'audio'});this.tick();}else{this.state=base_stream_controller_1.State.PARSING;// transmux the MPEG-TS data to ISO-BMFF segments
this.appended=false;if(!this.demuxer){this.demuxer=new demuxer_1.default(this.hls,'audio');}// Check if we have video initPTS
// If not we need to wait for it
var initPTS=this.initPTS[cc];var initSegmentData=details.initSegment?details.initSegment.data:[];if(details.initSegment||initPTS!==undefined){this.pendingBuffering=true;logger_1.logger.log("Demuxing "+sn+" of ["+details.startSN+" ,"+details.endSN+"],track "+trackId);// time Offset is accurate if level PTS is known, or if playlist is not sliding (not live)
var accurateTimeOffset=false;// details.PTSKnown || !details.live;
this.demuxer.push(data.payload,initSegmentData,audioCodec,null,fragCurrent,duration,accurateTimeOffset,initPTS);}else{logger_1.logger.log("unknown video PTS for continuity counter "+cc+", waiting for video PTS before demuxing audio frag "+sn+" of ["+details.startSN+" ,"+details.endSN+"],track "+trackId);this.waitingFragment=data;this.state=base_stream_controller_1.State.WAITING_INIT_PTS;}}}this.fragLoadError=0;};AudioStreamController.prototype.onFragParsingInitSegment=function(data){var fragCurrent=this.fragCurrent;var fragNew=data.frag;if(fragCurrent&&data.id==='audio'&&fragNew.sn===fragCurrent.sn&&fragNew.level===fragCurrent.level&&this.state===base_stream_controller_1.State.PARSING){var tracks=data.tracks,track=void 0;// delete any video track found on audio demuxer
if(tracks.video){delete tracks.video;}// include levelCodec in audio and video tracks
track=tracks.audio;if(track){track.levelCodec=track.codec;track.id=data.id;this.hls.trigger(events_1.default.BUFFER_CODECS,tracks);logger_1.logger.log("audio track:audio,container:"+track.container+",codecs[level/parsed]=["+track.levelCodec+"/"+track.codec+"]");var initSegment=track.initSegment;if(initSegment){var appendObj={type:'audio',data:initSegment,parent:'audio',content:'initSegment'};if(this.audioSwitch){this.pendingData=[appendObj];}else{this.appended=true;// arm pending Buffering flag before appending a segment
this.pendingBuffering=true;this.hls.trigger(events_1.default.BUFFER_APPENDING,appendObj);}}// trigger handler right now
this.tick();}}};AudioStreamController.prototype.onFragParsingData=function(data){var _this=this;var fragCurrent=this.fragCurrent;var fragNew=data.frag;if(fragCurrent&&data.id==='audio'&&data.type==='audio'&&fragNew.sn===fragCurrent.sn&&fragNew.level===fragCurrent.level&&this.state===base_stream_controller_1.State.PARSING){var trackId=this.trackId,track=this.tracks[trackId],hls_1=this.hls;if(!Number.isFinite(data.endPTS)){data.endPTS=data.startPTS+fragCurrent.duration;data.endDTS=data.startDTS+fragCurrent.duration;}fragCurrent.addElementaryStream(fragment_1.default.ElementaryStreamTypes.AUDIO);logger_1.logger.log("parsed "+data.type+",PTS:["+data.startPTS.toFixed(3)+","+data.endPTS.toFixed(3)+"],DTS:["+data.startDTS.toFixed(3)+"/"+data.endDTS.toFixed(3)+"],nb:"+data.nb);LevelHelper.updateFragPTSDTS(track.details,fragCurrent,data.startPTS,data.endPTS);var audioSwitch=this.audioSwitch,media=this.media,appendOnBufferFlush=false;// Only flush audio from old audio tracks when PTS is known on new audio track
if(audioSwitch&&media){if(media.readyState){var currentTime=media.currentTime;logger_1.logger.log('switching audio track : currentTime:'+currentTime);if(currentTime>=data.startPTS){logger_1.logger.log('switching audio track : flushing all audio');this.state=base_stream_controller_1.State.BUFFER_FLUSHING;hls_1.trigger(events_1.default.BUFFER_FLUSHING,{startOffset:0,endOffset:Number.POSITIVE_INFINITY,type:'audio'});appendOnBufferFlush=true;// Lets announce that the initial audio track switch flush occur
this.audioSwitch=false;hls_1.trigger(events_1.default.AUDIO_TRACK_SWITCHED,{id:trackId});}}else{// Lets announce that the initial audio track switch flush occur
this.audioSwitch=false;hls_1.trigger(events_1.default.AUDIO_TRACK_SWITCHED,{id:trackId});}}var pendingData_1=this.pendingData;if(!pendingData_1){logger_1.logger.warn('Apparently attempt to enqueue media payload without codec initialization data upfront');hls_1.trigger(events_1.default.ERROR,{type:errors_1.ErrorTypes.MEDIA_ERROR,details:null,fatal:true});return;}if(!this.audioSwitch){[data.data1,data.data2].forEach(function(buffer){if(buffer&&buffer.length){pendingData_1.push({type:data.type,data:buffer,parent:'audio',content:'data'});}});if(!appendOnBufferFlush&&pendingData_1.length){pendingData_1.forEach(function(appendObj){// only append in PARSING state (rationale is that an appending error could happen synchronously on first segment appending)
// in that case it is useless to append following segments
if(_this.state===base_stream_controller_1.State.PARSING){// arm pending Buffering flag before appending a segment
_this.pendingBuffering=true;_this.hls.trigger(events_1.default.BUFFER_APPENDING,appendObj);}});this.pendingData=[];this.appended=true;}}// trigger handler right now
this.tick();}};AudioStreamController.prototype.onFragParsed=function(data){var fragCurrent=this.fragCurrent;var fragNew=data.frag;if(fragCurrent&&data.id==='audio'&&fragNew.sn===fragCurrent.sn&&fragNew.level===fragCurrent.level&&this.state===base_stream_controller_1.State.PARSING){this.stats.tparsed=performance.now();this.state=base_stream_controller_1.State.PARSED;this._checkAppendedParsed();}};AudioStreamController.prototype.onBufferReset=function(){// reset reference to sourcebuffers
this.mediaBuffer=this.videoBuffer=null;this.loadedmetadata=false;};AudioStreamController.prototype.onBufferCreated=function(data){var audioTrack=data.tracks.audio;if(audioTrack){this.mediaBuffer=audioTrack.buffer;this.loadedmetadata=true;}if(data.tracks.video){this.videoBuffer=data.tracks.video.buffer;}};AudioStreamController.prototype.onBufferAppended=function(data){if(data.parent==='audio'){var state=this.state;if(state===base_stream_controller_1.State.PARSING||state===base_stream_controller_1.State.PARSED){// check if all buffers have been appended
this.pendingBuffering=data.pending>0;this._checkAppendedParsed();}}};AudioStreamController.prototype._checkAppendedParsed=function(){// trigger handler right now
if(this.state===base_stream_controller_1.State.PARSED&&(!this.appended||!this.pendingBuffering)){var frag=this.fragCurrent,stats=this.stats,hls_2=this.hls;if(frag){this.fragPrevious=frag;stats.tbuffered=performance.now();hls_2.trigger(events_1.default.FRAG_BUFFERED,{stats:stats,frag:frag,id:'audio'});var media=this.mediaBuffer?this.mediaBuffer:this.media;logger_1.logger.log("audio buffered : "+time_ranges_1.default.toString(media.buffered));if(this.audioSwitch&&this.appended){this.audioSwitch=false;hls_2.trigger(events_1.default.AUDIO_TRACK_SWITCHED,{id:this.trackId});}this.state=base_stream_controller_1.State.IDLE;}this.tick();}};AudioStreamController.prototype.onError=function(data){var frag=data.frag;// don't handle frag error not related to audio fragment
if(frag&&frag.type!=='audio'){return;}switch(data.details){case errors_1.ErrorDetails.FRAG_LOAD_ERROR:case errors_1.ErrorDetails.FRAG_LOAD_TIMEOUT:var frag_1=data.frag;// don't handle frag error not related to audio fragment
if(frag_1&&frag_1.type!=='audio'){break;}if(!data.fatal){var loadError=this.fragLoadError;if(loadError){loadError++;}else{loadError=1;}var config=this.config;if(loadError<=config.fragLoadingMaxRetry){this.fragLoadError=loadError;// exponential backoff capped to config.fragLoadingMaxRetryTimeout
var delay=Math.min(Math.pow(2,loadError-1)*config.fragLoadingRetryDelay,config.fragLoadingMaxRetryTimeout);logger_1.logger.warn("AudioStreamController: frag loading failed, retry in "+delay+" ms");this.retryDate=performance.now()+delay;// retry loading state
this.state=base_stream_controller_1.State.FRAG_LOADING_WAITING_RETRY;}else{logger_1.logger.error("AudioStreamController: "+data.details+" reaches max retry, redispatch as fatal ...");// switch error to fatal
data.fatal=true;this.state=base_stream_controller_1.State.ERROR;}}break;case errors_1.ErrorDetails.AUDIO_TRACK_LOAD_ERROR:case errors_1.ErrorDetails.AUDIO_TRACK_LOAD_TIMEOUT:case errors_1.ErrorDetails.KEY_LOAD_ERROR:case errors_1.ErrorDetails.KEY_LOAD_TIMEOUT://  when in ERROR state, don't switch back to IDLE state in case a non-fatal error is received
if(this.state!==base_stream_controller_1.State.ERROR){// if fatal error, stop processing, otherwise move to IDLE to retry loading
this.state=data.fatal?base_stream_controller_1.State.ERROR:base_stream_controller_1.State.IDLE;logger_1.logger.warn("AudioStreamController: "+data.details+" while loading frag, now switching to "+this.state+" state ...");}break;case errors_1.ErrorDetails.BUFFER_FULL_ERROR:// if in appending state
if(data.parent==='audio'&&(this.state===base_stream_controller_1.State.PARSING||this.state===base_stream_controller_1.State.PARSED)){var media=this.mediaBuffer,currentTime=this.media.currentTime,mediaBuffered=media&&buffer_helper_1.BufferHelper.isBuffered(media,currentTime)&&buffer_helper_1.BufferHelper.isBuffered(media,currentTime+0.5);// reduce max buf len if current position is buffered
if(mediaBuffered){var config=this.config;if(config.maxMaxBufferLength>=config.maxBufferLength){// reduce max buffer length as it might be too high. we do this to avoid loop flushing ...
config.maxMaxBufferLength/=2;logger_1.logger.warn("AudioStreamController: reduce max buffer length to "+config.maxMaxBufferLength+"s");}this.state=base_stream_controller_1.State.IDLE;}else{// current position is not buffered, but browser is still complaining about buffer full error
// this happens on IE/Edge, refer to https://github.com/video-dev/hls.js/pull/708
// in that case flush the whole audio buffer to recover
logger_1.logger.warn('AudioStreamController: buffer full error also media.currentTime is not buffered, flush audio buffer');this.fragCurrent=null;// flush everything
this.state=base_stream_controller_1.State.BUFFER_FLUSHING;this.hls.trigger(events_1.default.BUFFER_FLUSHING,{startOffset:0,endOffset:Number.POSITIVE_INFINITY,type:'audio'});}}break;default:break;}};AudioStreamController.prototype.onBufferFlushed=function(){var _this=this;var pendingData=this.pendingData;if(pendingData&&pendingData.length){logger_1.logger.log('AudioStreamController: appending pending audio data after buffer flushed');pendingData.forEach(function(appendObj){_this.hls.trigger(events_1.default.BUFFER_APPENDING,appendObj);});this.appended=true;this.pendingData=[];this.state=base_stream_controller_1.State.PARSED;}else{// move to IDLE once flush complete. this should trigger new fragment loading
this.state=base_stream_controller_1.State.IDLE;// reset reference to frag
this.fragPrevious=null;this.tick();}};return AudioStreamController;}(base_stream_controller_1.default);exports.default=AudioStreamController;/* WEBPACK VAR INJECTION */}).call(this,__webpack_require__(/*! ./src/polyfills/number */"./src/polyfills/number.js")["Number"]);/***/},/***/"./src/controller/audio-track-controller.js":/*!**************************************************!*\
  !*** ./src/controller/audio-track-controller.js ***!
  \**************************************************//*! no static exports found *//*! ModuleConcatenation bailout: Module is not an ECMAScript module *//***/function srcControllerAudioTrackControllerJs(module,exports,__webpack_require__){"use strict";var __extends=this&&this.__extends||function(){var extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;}||function(d,b){for(var p in b){if(b.hasOwnProperty(p))d[p]=b[p];}};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};}();Object.defineProperty(exports,"__esModule",{value:true});var events_1=__webpack_require__(/*! ../events */"./src/events.js");var task_loop_1=__webpack_require__(/*! ../task-loop */"./src/task-loop.js");var logger_1=__webpack_require__(/*! ../utils/logger */"./src/utils/logger.js");var errors_1=__webpack_require__(/*! ../errors */"./src/errors.js");/**
 * @class AudioTrackController
 * @implements {EventHandler}
 *
 * Handles main manifest and audio-track metadata loaded,
 * owns and exposes the selectable audio-tracks data-models.
 *
 * Exposes internal interface to select available audio-tracks.
 *
 * Handles errors on loading audio-track playlists. Manages fallback mechanism
 * with redundants tracks (group-IDs).
 *
 * Handles level-loading and group-ID switches for video (fallback on video levels),
 * and eventually adapts the audio-track group-ID to match.
 *
 * @fires AUDIO_TRACK_LOADING
 * @fires AUDIO_TRACK_SWITCHING
 * @fires AUDIO_TRACKS_UPDATED
 * @fires ERROR
 *
 */var AudioTrackController=/** @class */function(_super){__extends(AudioTrackController,_super);function AudioTrackController(hls){var _this=_super.call(this,hls,events_1.default.MANIFEST_LOADING,events_1.default.MANIFEST_PARSED,events_1.default.AUDIO_TRACK_LOADED,events_1.default.AUDIO_TRACK_SWITCHED,events_1.default.LEVEL_LOADED,events_1.default.ERROR)||this;/**
         * @private
         * Currently selected index in `tracks`
         * @member {number} trackId
         */_this._trackId=-1;/**
         * @private
         * If should select tracks according to default track attribute
         * @member {boolean} _selectDefaultTrack
         */_this._selectDefaultTrack=true;/**
         * @public
         * All tracks available
         * @member {AudioTrack[]}
         */_this.tracks=[];/**
         * @public
         * List of blacklisted audio track IDs (that have caused failure)
         * @member {number[]}
         */_this.trackIdBlacklist=Object.create(null);/**
         * @public
         * The currently running group ID for audio
         * (we grab this on manifest-parsed and new level-loaded)
         * @member {string}
         */_this.audioGroupId=null;return _this;}/**
     * Reset audio tracks on new manifest loading.
     */AudioTrackController.prototype.onManifestLoading=function(){this.tracks=[];this._trackId=-1;this._selectDefaultTrack=true;};/**
     * Store tracks data from manifest parsed data.
     *
     * Trigger AUDIO_TRACKS_UPDATED event.
     *
     * @param {*} data
     */AudioTrackController.prototype.onManifestParsed=function(data){var tracks=this.tracks=data.audioTracks||[];this.hls.trigger(events_1.default.AUDIO_TRACKS_UPDATED,{audioTracks:tracks});};/**
     * Store track details of loaded track in our data-model.
     *
     * Set-up metadata update interval task for live-mode streams.
     *
     * @param {} data
     */AudioTrackController.prototype.onAudioTrackLoaded=function(data){if(data.id>=this.tracks.length){logger_1.logger.warn('Invalid audio track id:',data.id);return;}logger_1.logger.log("audioTrack "+data.id+" loaded");this.tracks[data.id].details=data.details;// check if current playlist is a live playlist
// and if we have already our reload interval setup
if(data.details.live&&!this.hasInterval()){// if live playlist we will have to reload it periodically
// set reload period to playlist target duration
var updatePeriodMs=data.details.targetduration*1000;this.setInterval(updatePeriodMs);}if(!data.details.live&&this.hasInterval()){// playlist is not live and timer is scheduled: cancel it
this.clearInterval();}};/**
     * Update the internal group ID to any audio-track we may have set manually
     * or because of a failure-handling fallback.
     *
     * Quality-levels should update to that group ID in this case.
     *
     * @param {*} data
     */AudioTrackController.prototype.onAudioTrackSwitched=function(data){var audioGroupId=this.tracks[data.id].groupId;if(audioGroupId&&this.audioGroupId!==audioGroupId){this.audioGroupId=audioGroupId;}};/**
     * When a level gets loaded, if it has redundant audioGroupIds (in the same ordinality as it's redundant URLs)
     * we are setting our audio-group ID internally to the one set, if it is different from the group ID currently set.
     *
     * If group-ID got update, we re-select the appropriate audio-track with this group-ID matching the currently
     * selected one (based on NAME property).
     *
     * @param {*} data
     */AudioTrackController.prototype.onLevelLoaded=function(data){// FIXME: crashes because currentLevel is undefined
// const levelInfo = this.hls.levels[this.hls.currentLevel];
var levelInfo=this.hls.levels[data.level];if(!levelInfo.audioGroupIds){return;}var audioGroupId=levelInfo.audioGroupIds[levelInfo.urlId];if(this.audioGroupId!==audioGroupId){this.audioGroupId=audioGroupId;this._selectInitialAudioTrack();}};/**
     * Handle network errors loading audio track manifests
     * and also pausing on any netwok errors.
     *
     * @param {ErrorEventData} data
     */AudioTrackController.prototype.onError=function(data){// Only handle network errors
if(data.type!==errors_1.ErrorTypes.NETWORK_ERROR){return;}// If fatal network error, cancel update task
if(data.fatal){this.clearInterval();}// If not an audio-track loading error don't handle further
if(data.details!==errors_1.ErrorDetails.AUDIO_TRACK_LOAD_ERROR){return;}logger_1.logger.warn('Network failure on audio-track id:',data.context.id);this._handleLoadError();};Object.defineProperty(AudioTrackController.prototype,"audioTracks",{/**
         * @type {AudioTrack[]} Audio-track list we own
         */get:function get(){return this.tracks;},enumerable:true,configurable:true});Object.defineProperty(AudioTrackController.prototype,"audioTrack",{/**
         * @type {number} Index into audio-tracks list of currently selected track.
         */get:function get(){return this._trackId;},/**
         * Select current track by index
         */set:function set(newId){this._setAudioTrack(newId);// If audio track is selected from API then don't choose from the manifest default track
this._selectDefaultTrack=false;},enumerable:true,configurable:true});/**
     * @private
     * @param {number} newId
     */AudioTrackController.prototype._setAudioTrack=function(newId){// noop on same audio track id as already set
if(this._trackId===newId&&this.tracks[this._trackId].details){logger_1.logger.debug('Same id as current audio-track passed, and track details available -> no-op');return;}// check if level idx is valid
if(newId<0||newId>=this.tracks.length){logger_1.logger.warn('Invalid id passed to audio-track controller');return;}var audioTrack=this.tracks[newId];logger_1.logger.log("Now switching to audio-track index "+newId);// stopping live reloading timer if any
this.clearInterval();this._trackId=newId;var url=audioTrack.url,type=audioTrack.type,id=audioTrack.id;this.hls.trigger(events_1.default.AUDIO_TRACK_SWITCHING,{id:id,type:type,url:url});this._loadTrackDetailsIfNeeded(audioTrack);};/**
     * @override
     */AudioTrackController.prototype.doTick=function(){this._updateTrack(this._trackId);};/**
     * Select initial track
     * @private
     */AudioTrackController.prototype._selectInitialAudioTrack=function(){var _this=this;var tracks=this.tracks;if(!tracks.length){return;}var currentAudioTrack=this.tracks[this._trackId];var name=null;if(currentAudioTrack){name=currentAudioTrack.name;}// Pre-select default tracks if there are any
if(this._selectDefaultTrack){var defaultTracks=tracks.filter(function(track){return track.default;});if(defaultTracks.length){tracks=defaultTracks;}else{logger_1.logger.warn('No default audio tracks defined');}}var trackFound=false;var traverseTracks=function traverseTracks(){// Select track with right group ID
tracks.forEach(function(track){if(trackFound){return;}// We need to match the (pre-)selected group ID
// and the NAME of the current track.
if((!_this.audioGroupId||track.groupId===_this.audioGroupId)&&(!name||name===track.name)){// If there was a previous track try to stay with the same `NAME`.
// It should be unique across tracks of same group, and consistent through redundant track groups.
_this._setAudioTrack(track.id);trackFound=true;}});};traverseTracks();if(!trackFound){name=null;traverseTracks();}if(!trackFound){logger_1.logger.error("No track found for running audio group-ID: "+this.audioGroupId);this.hls.trigger(events_1.default.ERROR,{type:errors_1.ErrorTypes.MEDIA_ERROR,details:errors_1.ErrorDetails.AUDIO_TRACK_LOAD_ERROR,fatal:true});}};/**
     * @private
     * @param {AudioTrack} audioTrack
     * @returns {boolean}
     */AudioTrackController.prototype._needsTrackLoading=function(audioTrack){var details=audioTrack.details,url=audioTrack.url;if(!details||details.live){// check if we face an audio track embedded in main playlist (audio track without URI attribute)
return!!url;}return false;};/**
     * @private
     * @param {AudioTrack} audioTrack
     */AudioTrackController.prototype._loadTrackDetailsIfNeeded=function(audioTrack){if(this._needsTrackLoading(audioTrack)){var url=audioTrack.url,id=audioTrack.id;// track not retrieved yet, or live playlist we need to (re)load it
logger_1.logger.log("loading audio-track playlist for id: "+id);this.hls.trigger(events_1.default.AUDIO_TRACK_LOADING,{url:url,id:id});}};/**
     * @private
     * @param {number} newId
     */AudioTrackController.prototype._updateTrack=function(newId){// check if level idx is valid
if(newId<0||newId>=this.tracks.length){return;}// stopping live reloading timer if any
this.clearInterval();this._trackId=newId;logger_1.logger.log("trying to update audio-track "+newId);var audioTrack=this.tracks[newId];this._loadTrackDetailsIfNeeded(audioTrack);};/**
     * @private
     */AudioTrackController.prototype._handleLoadError=function(){// First, let's black list current track id
this.trackIdBlacklist[this._trackId]=true;// Let's try to fall back on a functional audio-track with the same group ID
var previousId=this._trackId;var _a=this.tracks[previousId],name=_a.name,language=_a.language,groupId=_a.groupId;logger_1.logger.warn("Loading failed on audio track id: "+previousId+", group-id: "+groupId+", name/language: \""+name+"\" / \""+language+"\"");// Find a non-blacklisted track ID with the same NAME
// At least a track that is not blacklisted, thus on another group-ID.
var newId=previousId;for(var i=0;i<this.tracks.length;i++){if(this.trackIdBlacklist[i]){continue;}var newTrack=this.tracks[i];if(newTrack.name===name){newId=i;break;}}if(newId===previousId){logger_1.logger.warn("No fallback audio-track found for name/language: \""+name+"\" / \""+language+"\"");return;}logger_1.logger.log('Attempting audio-track fallback id:',newId,'group-id:',this.tracks[newId].groupId);this._setAudioTrack(newId);};return AudioTrackController;}(task_loop_1.default);exports.default=AudioTrackController;/***/},/***/"./src/controller/base-stream-controller.js":/*!**************************************************!*\
  !*** ./src/controller/base-stream-controller.js ***!
  \**************************************************//*! no static exports found *//*! ModuleConcatenation bailout: Module is not an ECMAScript module *//***/function srcControllerBaseStreamControllerJs(module,exports,__webpack_require__){"use strict";/* WEBPACK VAR INJECTION */(function(Number){var __extends=this&&this.__extends||function(){var extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;}||function(d,b){for(var p in b){if(b.hasOwnProperty(p))d[p]=b[p];}};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};}();Object.defineProperty(exports,"__esModule",{value:true});var task_loop_1=__webpack_require__(/*! ../task-loop */"./src/task-loop.js");var fragment_tracker_1=__webpack_require__(/*! ./fragment-tracker */"./src/controller/fragment-tracker.js");var buffer_helper_1=__webpack_require__(/*! ../utils/buffer-helper */"./src/utils/buffer-helper.js");var logger_1=__webpack_require__(/*! ../utils/logger */"./src/utils/logger.js");exports.State={STOPPED:'STOPPED',STARTING:'STARTING',IDLE:'IDLE',PAUSED:'PAUSED',KEY_LOADING:'KEY_LOADING',FRAG_LOADING:'FRAG_LOADING',FRAG_LOADING_WAITING_RETRY:'FRAG_LOADING_WAITING_RETRY',WAITING_TRACK:'WAITING_TRACK',PARSING:'PARSING',PARSED:'PARSED',BUFFER_FLUSHING:'BUFFER_FLUSHING',ENDED:'ENDED',ERROR:'ERROR',WAITING_INIT_PTS:'WAITING_INIT_PTS',WAITING_LEVEL:'WAITING_LEVEL'};var BaseStreamController=/** @class */function(_super){__extends(BaseStreamController,_super);function BaseStreamController(){return _super!==null&&_super.apply(this,arguments)||this;}BaseStreamController.prototype.doTick=function(){};BaseStreamController.prototype.startLoad=function(){};BaseStreamController.prototype.stopLoad=function(){var frag=this.fragCurrent;if(frag){if(frag.loader){frag.loader.abort();}this.fragmentTracker.removeFragment(frag);}if(this.demuxer){this.demuxer.destroy();this.demuxer=null;}this.fragCurrent=null;this.fragPrevious=null;this.clearInterval();this.clearNextTick();this.state=exports.State.STOPPED;};BaseStreamController.prototype._streamEnded=function(bufferInfo,levelDetails){var _a=this,fragCurrent=_a.fragCurrent,fragmentTracker=_a.fragmentTracker;// we just got done loading the final fragment and there is no other buffered range after ...
// rationale is that in case there are any buffered ranges after, it means that there are unbuffered portion in between
// so we should not switch to ENDED in that case, to be able to buffer them
// dont switch to ENDED if we need to backtrack last fragment
if(!levelDetails.live&&fragCurrent&&!fragCurrent.backtracked&&fragCurrent.sn===levelDetails.endSN&&!bufferInfo.nextStart){var fragState=fragmentTracker.getState(fragCurrent);return fragState===fragment_tracker_1.FragmentState.PARTIAL||fragState===fragment_tracker_1.FragmentState.OK;}return false;};BaseStreamController.prototype.onMediaSeeking=function(){var _a=this,config=_a.config,media=_a.media,mediaBuffer=_a.mediaBuffer,state=_a.state;var currentTime=media?media.currentTime:null;var bufferInfo=buffer_helper_1.BufferHelper.bufferInfo(mediaBuffer||media,currentTime,this.config.maxBufferHole);if(Number.isFinite(currentTime)){logger_1.logger.log("media seeking to "+currentTime.toFixed(3));}if(state===exports.State.FRAG_LOADING){var fragCurrent=this.fragCurrent;// check if we are seeking to a unbuffered area AND if frag loading is in progress
if(bufferInfo.len===0&&fragCurrent){var tolerance=config.maxFragLookUpTolerance;var fragStartOffset=fragCurrent.start-tolerance;var fragEndOffset=fragCurrent.start+fragCurrent.duration+tolerance;// check if we seek position will be out of currently loaded frag range : if out cancel frag load, if in, don't do anything
if(currentTime<fragStartOffset||currentTime>fragEndOffset){if(fragCurrent.loader){logger_1.logger.log('seeking outside of buffer while fragment load in progress, cancel fragment load');fragCurrent.loader.abort();}this.fragCurrent=null;this.fragPrevious=null;// switch to IDLE state to load new fragment
this.state=exports.State.IDLE;}else{logger_1.logger.log('seeking outside of buffer but within currently loaded fragment range');}}}else if(state===exports.State.ENDED){// if seeking to unbuffered area, clean up fragPrevious
if(bufferInfo.len===0){this.fragPrevious=null;this.fragCurrent=null;}// switch to IDLE state to check for potential new fragment
this.state=exports.State.IDLE;}if(media){this.lastCurrentTime=currentTime;}// in case seeking occurs although no media buffered, adjust startPosition and nextLoadPosition to seek target
if(!this.loadedmetadata){this.nextLoadPosition=this.startPosition=currentTime;}// tick to speed up processing
this.tick();};BaseStreamController.prototype.onMediaEnded=function(){// reset startPosition and lastCurrentTime to restart playback @ stream beginning
this.startPosition=this.lastCurrentTime=0;};BaseStreamController.prototype.onHandlerDestroying=function(){this.stopLoad();_super.prototype.onHandlerDestroying.call(this);};BaseStreamController.prototype.onHandlerDestroyed=function(){this.state=exports.State.STOPPED;this.fragmentTracker=null;};return BaseStreamController;}(task_loop_1.default);exports.default=BaseStreamController;/* WEBPACK VAR INJECTION */}).call(this,__webpack_require__(/*! ./src/polyfills/number */"./src/polyfills/number.js")["Number"]);/***/},/***/"./src/controller/buffer-controller.js":/*!*********************************************!*\
  !*** ./src/controller/buffer-controller.js ***!
  \*********************************************//*! no static exports found *//*! ModuleConcatenation bailout: Module is not an ECMAScript module *//***/function srcControllerBufferControllerJs(module,exports,__webpack_require__){"use strict";/* WEBPACK VAR INJECTION */(function(Number){/*
 * Buffer Controller
*/var __extends=this&&this.__extends||function(){var extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;}||function(d,b){for(var p in b){if(b.hasOwnProperty(p))d[p]=b[p];}};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};}();Object.defineProperty(exports,"__esModule",{value:true});var events_1=__webpack_require__(/*! ../events */"./src/events.js");var event_handler_1=__webpack_require__(/*! ../event-handler */"./src/event-handler.js");var logger_1=__webpack_require__(/*! ../utils/logger */"./src/utils/logger.js");var errors_1=__webpack_require__(/*! ../errors */"./src/errors.js");var mediasource_helper_1=__webpack_require__(/*! ../utils/mediasource-helper */"./src/utils/mediasource-helper.js");var MediaSource=mediasource_helper_1.getMediaSource();var BufferController=/** @class */function(_super){__extends(BufferController,_super);function BufferController(hls){var _this=_super.call(this,hls,events_1.default.MEDIA_ATTACHING,events_1.default.MEDIA_DETACHING,events_1.default.MANIFEST_PARSED,events_1.default.BUFFER_RESET,events_1.default.BUFFER_APPENDING,events_1.default.BUFFER_CODECS,events_1.default.BUFFER_EOS,events_1.default.BUFFER_FLUSHING,events_1.default.LEVEL_PTS_UPDATED,events_1.default.LEVEL_UPDATED)||this;// the value that we have set mediasource.duration to
// (the actual duration may be tweaked slighly by the browser)
_this._msDuration=null;// the value that we want to set mediaSource.duration to
_this._levelDuration=null;// the target duration of the current media playlist
_this._levelTargetDuration=10;// current stream state: true - for live broadcast, false - for VoD content
_this._live=null;// cache the self generated object url to detect hijack of video tag
_this._objectUrl=null;// The number of BUFFER_CODEC events received before any sourceBuffers are created
_this.bufferCodecEventsExpected=0;// Source Buffer listeners
_this.onsbue=_this.onSBUpdateEnd.bind(_this);_this.onsbe=_this.onSBUpdateError.bind(_this);_this.pendingTracks={};_this.tracks={};return _this;}BufferController.prototype.destroy=function(){event_handler_1.default.prototype.destroy.call(this);};BufferController.prototype.onLevelPtsUpdated=function(data){var type=data.type;var audioTrack=this.tracks.audio;// Adjusting `SourceBuffer.timestampOffset` (desired point in the timeline where the next frames should be appended)
// in Chrome browser when we detect MPEG audio container and time delta between level PTS and `SourceBuffer.timestampOffset`
// is greater than 100ms (this is enough to handle seek for VOD or level change for LIVE videos). At the time of change we issue
// `SourceBuffer.abort()` and adjusting `SourceBuffer.timestampOffset` if `SourceBuffer.updating` is false or awaiting `updateend`
// event if SB is in updating state.
// More info here: https://github.com/video-dev/hls.js/issues/332#issuecomment-257986486
if(type==='audio'&&audioTrack&&audioTrack.container==='audio/mpeg'){// Chrome audio mp3 track
var audioBuffer=this.sourceBuffer.audio;var delta=Math.abs(audioBuffer.timestampOffset-data.start);// adjust timestamp offset if time delta is greater than 100ms
if(delta>0.1){var updating=audioBuffer.updating;try{audioBuffer.abort();}catch(err){logger_1.logger.warn('can not abort audio buffer: '+err);}if(!updating){logger_1.logger.warn('change mpeg audio timestamp offset from '+audioBuffer.timestampOffset+' to '+data.start);audioBuffer.timestampOffset=data.start;}else{this.audioTimestampOffset=data.start;}}}};BufferController.prototype.onManifestParsed=function(data){// in case of alt audio 2 BUFFER_CODECS events will be triggered, one per stream controller
// sourcebuffers will be created all at once when the expected nb of tracks will be reached
// in case alt audio is not used, only one BUFFER_CODEC event will be fired from main stream controller
// it will contain the expected nb of source buffers, no need to compute it
this.bufferCodecEventsExpected=data.altAudio?2:1;logger_1.logger.log(this.bufferCodecEventsExpected+" bufferCodec event(s) expected");};BufferController.prototype.onMediaAttaching=function(data){var media=this.media=data.media;if(media){// setup the media source
var ms=this.mediaSource=new MediaSource();// Media Source listeners
this.onmso=this.onMediaSourceOpen.bind(this);this.onmse=this.onMediaSourceEnded.bind(this);this.onmsc=this.onMediaSourceClose.bind(this);ms.addEventListener('sourceopen',this.onmso);ms.addEventListener('sourceended',this.onmse);ms.addEventListener('sourceclose',this.onmsc);// link video and media Source
media.src=window.URL.createObjectURL(ms);// cache the locally generated object url
this._objectUrl=media.src;}};BufferController.prototype.onMediaDetaching=function(){logger_1.logger.log('media source detaching');var ms=this.mediaSource;if(ms){if(ms.readyState==='open'){try{// endOfStream could trigger exception if any sourcebuffer is in updating state
// we don't really care about checking sourcebuffer state here,
// as we are anyway detaching the MediaSource
// let's just avoid this exception to propagate
ms.endOfStream();}catch(err){logger_1.logger.warn("onMediaDetaching:"+err.message+" while calling endOfStream");}}ms.removeEventListener('sourceopen',this.onmso);ms.removeEventListener('sourceended',this.onmse);ms.removeEventListener('sourceclose',this.onmsc);// Detach properly the MediaSource from the HTMLMediaElement as
// suggested in https://github.com/w3c/media-source/issues/53.
if(this.media){window.URL.revokeObjectURL(this._objectUrl);// clean up video tag src only if it's our own url. some external libraries might
// hijack the video tag and change its 'src' without destroying the Hls instance first
if(this.media.src===this._objectUrl){this.media.removeAttribute('src');this.media.load();}else{logger_1.logger.warn('media.src was changed by a third party - skip cleanup');}}this.mediaSource=null;this.media=null;this._objectUrl=null;this.pendingTracks={};this.tracks={};this.sourceBuffer={};this.flushRange=[];this.segments=[];this.appended=0;}this.onmso=this.onmse=this.onmsc=null;this.hls.trigger(events_1.default.MEDIA_DETACHED);};BufferController.prototype.onMediaSourceOpen=function(){logger_1.logger.log('media source opened');this.hls.trigger(events_1.default.MEDIA_ATTACHED,{media:this.media});var mediaSource=this.mediaSource;if(mediaSource){// once received, don't listen anymore to sourceopen event
mediaSource.removeEventListener('sourceopen',this.onmso);}this.checkPendingTracks();};BufferController.prototype.checkPendingTracks=function(){var _a=this,bufferCodecEventsExpected=_a.bufferCodecEventsExpected,pendingTracks=_a.pendingTracks;// Check if we've received all of the expected bufferCodec events. When none remain, create all the sourceBuffers at once.
// This is important because the MSE spec allows implementations to throw QuotaExceededErrors if creating new sourceBuffers after
// data has been appended to existing ones.
// 2 tracks is the max (one for audio, one for video). If we've reach this max go ahead and create the buffers.
var pendingTracksCount=Object.keys(pendingTracks).length;if(pendingTracksCount&&!bufferCodecEventsExpected||pendingTracksCount===2){// ok, let's create them now !
this.createSourceBuffers(pendingTracks);this.pendingTracks={};// append any pending segments now !
this.doAppending();}};BufferController.prototype.onMediaSourceClose=function(){logger_1.logger.log('media source closed');};BufferController.prototype.onMediaSourceEnded=function(){logger_1.logger.log('media source ended');};BufferController.prototype.onSBUpdateEnd=function(){// update timestampOffset
if(this.audioTimestampOffset){var audioBuffer=this.sourceBuffer.audio;logger_1.logger.warn("change mpeg audio timestamp offset from "+audioBuffer.timestampOffset+" to "+this.audioTimestampOffset);audioBuffer.timestampOffset=this.audioTimestampOffset;delete this.audioTimestampOffset;}if(this._needsFlush){this.doFlush();}if(this._needsEos){this.checkEos();}this.appending=false;var parent=this.parent;// count nb of pending segments waiting for appending on this sourcebuffer
var pending=this.segments.reduce(function(counter,segment){return segment.parent===parent?counter+1:counter;},0);// this.sourceBuffer is better to use than media.buffered as it is closer to the PTS data from the fragments
var timeRanges={};var sourceBuffer=this.sourceBuffer;for(var streamType in sourceBuffer){timeRanges[streamType]=sourceBuffer[streamType].buffered;}this.hls.trigger(events_1.default.BUFFER_APPENDED,{parent:parent,pending:pending,timeRanges:timeRanges});// don't append in flushing mode
if(!this._needsFlush){this.doAppending();}this.updateMediaElementDuration();// appending goes first
if(pending===0){this.flushLiveBackBuffer();}};BufferController.prototype.onSBUpdateError=function(event){logger_1.logger.error('sourceBuffer error:',event);// according to http://www.w3.org/TR/media-source/#sourcebuffer-append-error
// this error might not always be fatal (it is fatal if decode error is set, in that case
// it will be followed by a mediaElement error ...)
this.hls.trigger(events_1.default.ERROR,{type:errors_1.ErrorTypes.MEDIA_ERROR,details:errors_1.ErrorDetails.BUFFER_APPENDING_ERROR,fatal:false});// we don't need to do more than that, as accordin to the spec, updateend will be fired just after
};BufferController.prototype.onBufferReset=function(){var sourceBuffer=this.sourceBuffer;for(var type in sourceBuffer){var sb=sourceBuffer[type];try{this.mediaSource.removeSourceBuffer(sb);sb.removeEventListener('updateend',this.onsbue);sb.removeEventListener('error',this.onsbe);}catch(err){}}this.sourceBuffer={};this.flushRange=[];this.segments=[];this.appended=0;};BufferController.prototype.onBufferCodecs=function(tracks){var _this=this;// if source buffer(s) not created yet, appended buffer tracks in this.pendingTracks
// if sourcebuffers already created, do nothing ...
if(Object.keys(this.sourceBuffer).length){return;}Object.keys(tracks).forEach(function(trackName){_this.pendingTracks[trackName]=tracks[trackName];});var mediaSource=this.mediaSource;this.bufferCodecEventsExpected=Math.max(this.bufferCodecEventsExpected-1,0);if(mediaSource&&mediaSource.readyState==='open'){this.checkPendingTracks();}};BufferController.prototype.createSourceBuffers=function(tracks){var sourceBuffer=this.sourceBuffer,mediaSource=this.mediaSource;for(var trackName in tracks){if(!sourceBuffer[trackName]){var track=tracks[trackName];// use levelCodec as first priority
var codec=track.levelCodec||track.codec;var mimeType=track.container+";codecs="+codec;logger_1.logger.log("creating sourceBuffer("+mimeType+")");try{var sb=sourceBuffer[trackName]=mediaSource.addSourceBuffer(mimeType);sb.addEventListener('updateend',this.onsbue);sb.addEventListener('error',this.onsbe);this.tracks[trackName]={codec:codec,container:track.container};track.buffer=sb;}catch(err){logger_1.logger.error("error while trying to add sourceBuffer:"+err.message);this.hls.trigger(events_1.default.ERROR,{type:errors_1.ErrorTypes.MEDIA_ERROR,details:errors_1.ErrorDetails.BUFFER_ADD_CODEC_ERROR,fatal:false,err:err,mimeType:mimeType});}}}this.hls.trigger(events_1.default.BUFFER_CREATED,{tracks:tracks});};BufferController.prototype.onBufferAppending=function(data){if(!this._needsFlush){if(!this.segments){this.segments=[data];}else{this.segments.push(data);}this.doAppending();}};BufferController.prototype.onBufferAppendFail=function(data){logger_1.logger.error('sourceBuffer error:',data.event);// according to http://www.w3.org/TR/media-source/#sourcebuffer-append-error
// this error might not always be fatal (it is fatal if decode error is set, in that case
// it will be followed by a mediaElement error ...)
this.hls.trigger(events_1.default.ERROR,{type:errors_1.ErrorTypes.MEDIA_ERROR,details:errors_1.ErrorDetails.BUFFER_APPENDING_ERROR,fatal:false});};// on BUFFER_EOS mark matching sourcebuffer(s) as ended and trigger checkEos()
BufferController.prototype.onBufferEos=function(data){var sb=this.sourceBuffer;var dataType=data.type;for(var type in sb){if(!dataType||type===dataType){if(!sb[type].ended){sb[type].ended=true;logger_1.logger.log(type+" sourceBuffer now EOS");}}}this.checkEos();};// if all source buffers are marked as ended, signal endOfStream() to MediaSource.
BufferController.prototype.checkEos=function(){var sb=this.sourceBuffer,mediaSource=this.mediaSource;if(!mediaSource||mediaSource.readyState!=='open'){this._needsEos=false;return;}for(var type in sb){var sbobj=sb[type];if(!sbobj.ended){return;}if(sbobj.updating){this._needsEos=true;return;}}logger_1.logger.log('all media data are available, signal endOfStream() to MediaSource and stop loading fragment');// Notify the media element that it now has all of the media data
try{mediaSource.endOfStream();}catch(e){logger_1.logger.warn('exception while calling mediaSource.endOfStream()');}this._needsEos=false;};BufferController.prototype.onBufferFlushing=function(data){this.flushRange.push({start:data.startOffset,end:data.endOffset,type:data.type});// attempt flush immediately
this.flushBufferCounter=0;this.doFlush();};BufferController.prototype.flushLiveBackBuffer=function(){// clear back buffer for live only
if(!this._live){return;}var liveBackBufferLength=this.hls.config.liveBackBufferLength;if(!isFinite(liveBackBufferLength)||liveBackBufferLength<0){return;}var currentTime=this.media.currentTime;var sourceBuffer=this.sourceBuffer;var bufferTypes=Object.keys(sourceBuffer);var targetBackBufferPosition=currentTime-Math.max(liveBackBufferLength,this._levelTargetDuration);for(var index=bufferTypes.length-1;index>=0;index--){var bufferType=bufferTypes[index],buffered=sourceBuffer[bufferType].buffered;// when target buffer start exceeds actual buffer start
if(buffered.length>0&&targetBackBufferPosition>buffered.start(0)){// remove buffer up until current time minus minimum back buffer length (removing buffer too close to current
// time will lead to playback freezing)
// credits for level target duration - https://github.com/videojs/http-streaming/blob/3132933b6aa99ddefab29c10447624efd6fd6e52/src/segment-loader.js#L91
this.removeBufferRange(bufferType,sourceBuffer[bufferType],0,targetBackBufferPosition);}}};BufferController.prototype.onLevelUpdated=function(_a){var details=_a.details;if(details.fragments.length>0){this._levelDuration=details.totalduration+details.fragments[0].start;this._levelTargetDuration=details.averagetargetduration||details.targetduration||10;this._live=details.live;this.updateMediaElementDuration();}};/**
     * Update Media Source duration to current level duration or override to Infinity if configuration parameter
     * 'liveDurationInfinity` is set to `true`
     * More details: https://github.com/video-dev/hls.js/issues/355
     */BufferController.prototype.updateMediaElementDuration=function(){var config=this.hls.config;var duration;if(this._levelDuration===null||!this.media||!this.mediaSource||!this.sourceBuffer||this.media.readyState===0||this.mediaSource.readyState!=='open'){return;}for(var type in this.sourceBuffer){if(this.sourceBuffer[type].updating===true){// can't set duration whilst a buffer is updating
return;}}duration=this.media.duration;// initialise to the value that the media source is reporting
if(this._msDuration===null){this._msDuration=this.mediaSource.duration;}if(this._live===true&&config.liveDurationInfinity===true){// Override duration to Infinity
logger_1.logger.log('Media Source duration is set to Infinity');this._msDuration=this.mediaSource.duration=Infinity;}else if(this._levelDuration>this._msDuration&&this._levelDuration>duration||!Number.isFinite(duration)){// levelDuration was the last value we set.
// not using mediaSource.duration as the browser may tweak this value
// only update Media Source duration if its value increase, this is to avoid
// flushing already buffered portion when switching between quality level
logger_1.logger.log("Updating Media Source duration to "+this._levelDuration.toFixed(3));this._msDuration=this.mediaSource.duration=this._levelDuration;}};BufferController.prototype.doFlush=function(){// loop through all buffer ranges to flush
while(this.flushRange.length){var range=this.flushRange[0];// flushBuffer will abort any buffer append in progress and flush Audio/Video Buffer
if(this.flushBuffer(range.start,range.end,range.type)){// range flushed, remove from flush array
this.flushRange.shift();this.flushBufferCounter=0;}else{this._needsFlush=true;// avoid looping, wait for SB update end to retrigger a flush
return;}}if(this.flushRange.length===0){// everything flushed
this._needsFlush=false;// let's recompute this.appended, which is used to avoid flush looping
var appended=0;var sourceBuffer=this.sourceBuffer;try{for(var type in sourceBuffer){appended+=sourceBuffer[type].buffered.length;}}catch(error){// error could be thrown while accessing buffered, in case sourcebuffer has already been removed from MediaSource
// this is harmess at this stage, catch this to avoid reporting an internal exception
logger_1.logger.error('error while accessing sourceBuffer.buffered');}this.appended=appended;this.hls.trigger(events_1.default.BUFFER_FLUSHED);}};BufferController.prototype.doAppending=function(){var _a=this,hls=_a.hls,segments=_a.segments,sourceBuffer=_a.sourceBuffer;if(Object.keys(sourceBuffer).length){if(this.media.error){this.segments=[];logger_1.logger.error('trying to append although a media error occured, flush segment and abort');return;}if(this.appending){// logger.log(`sb appending in progress`);
return;}if(segments&&segments.length){var segment=segments.shift();try{var type=segment.type,sb=sourceBuffer[type];if(sb){if(!sb.updating){// reset sourceBuffer ended flag before appending segment
sb.ended=false;// logger.log(`appending ${segment.content} ${type} SB, size:${segment.data.length}, ${segment.parent}`);
this.parent=segment.parent;sb.appendBuffer(segment.data);this.appendError=0;this.appended++;this.appending=true;}else{segments.unshift(segment);}}else{// in case we don't have any source buffer matching with this segment type,
// it means that Mediasource fails to create sourcebuffer
// discard this segment, and trigger update end
this.onSBUpdateEnd();}}catch(err){// in case any error occured while appending, put back segment in segments table
logger_1.logger.error("error while trying to append buffer:"+err.message);segments.unshift(segment);var event_1={type:errors_1.ErrorTypes.MEDIA_ERROR,parent:segment.parent};if(err.code!==22){if(this.appendError){this.appendError++;}else{this.appendError=1;}event_1.details=errors_1.ErrorDetails.BUFFER_APPEND_ERROR;/* with UHD content, we could get loop of quota exceeded error until
                          browser is able to evict some data from sourcebuffer. retrying help recovering this
                        */if(this.appendError>hls.config.appendErrorMaxRetry){logger_1.logger.log("fail "+hls.config.appendErrorMaxRetry+" times to append segment in sourceBuffer");this.segments=[];event_1.fatal=true;hls.trigger(events_1.default.ERROR,event_1);}else{event_1.fatal=false;hls.trigger(events_1.default.ERROR,event_1);}}else{// QuotaExceededError: http://www.w3.org/TR/html5/infrastructure.html#quotaexceedederror
// let's stop appending any segments, and report BUFFER_FULL_ERROR error
this.segments=[];event_1.details=errors_1.ErrorDetails.BUFFER_FULL_ERROR;event_1.fatal=false;hls.trigger(events_1.default.ERROR,event_1);}}}}};/*
      flush specified buffered range,
      return true once range has been flushed.
      as sourceBuffer.remove() is asynchronous, flushBuffer will be retriggered on sourceBuffer update end
    */BufferController.prototype.flushBuffer=function(startOffset,endOffset,typeIn){var sb;var sourceBuffer=this.sourceBuffer;if(Object.keys(sourceBuffer).length){logger_1.logger.log("flushBuffer,pos/start/end: "+this.media.currentTime.toFixed(3)+"/"+startOffset+"/"+endOffset);// safeguard to avoid infinite looping : don't try to flush more than the nb of appended segments
if(this.flushBufferCounter<this.appended){for(var type in sourceBuffer){// check if sourcebuffer type is defined (typeIn): if yes, let's only flush this one
// if no, let's flush all sourcebuffers
if(typeIn&&type!==typeIn){continue;}sb=sourceBuffer[type];// we are going to flush buffer, mark source buffer as 'not ended'
sb.ended=false;if(!sb.updating){if(this.removeBufferRange(type,sb,startOffset,endOffset)){this.flushBufferCounter++;return false;}}else{logger_1.logger.warn('cannot flush, sb updating in progress');return false;}}}else{logger_1.logger.warn('abort flushing too many retries');}logger_1.logger.log('buffer flushed');}// everything flushed !
return true;};/**
     * Removes first buffered range from provided source buffer that lies within given start and end offsets.
     *
     * @param type Type of the source buffer, logging purposes only.
     * @param sb Target SourceBuffer instance.
     * @param startOffset
     * @param endOffset
     *
     * @returns {boolean} True when source buffer remove requested.
     */BufferController.prototype.removeBufferRange=function(type,sb,startOffset,endOffset){try{for(var i=0;i<sb.buffered.length;i++){var bufStart=sb.buffered.start(i);var bufEnd=sb.buffered.end(i);var removeStart=Math.max(bufStart,startOffset);var removeEnd=Math.min(bufEnd,endOffset);/* sometimes sourcebuffer.remove() does not flush
                  the exact expected time range.
                  to avoid rounding issues/infinite loop,
                  only flush buffer range of length greater than 500ms.
                */if(Math.min(removeEnd,bufEnd)-removeStart>0.5){logger_1.logger.log("sb remove "+type+" ["+removeStart+","+removeEnd+"], of ["+bufStart+","+bufEnd+"], pos:"+this.media.currentTime);sb.remove(removeStart,removeEnd);return true;}}}catch(error){logger_1.logger.warn('removeBufferRange failed',error);}return false;};return BufferController;}(event_handler_1.default);exports.default=BufferController;/* WEBPACK VAR INJECTION */}).call(this,__webpack_require__(/*! ./src/polyfills/number */"./src/polyfills/number.js")["Number"]);/***/},/***/"./src/controller/cap-level-controller.js":/*!************************************************!*\
  !*** ./src/controller/cap-level-controller.js ***!
  \************************************************//*! no static exports found *//*! ModuleConcatenation bailout: Module is not an ECMAScript module *//***/function srcControllerCapLevelControllerJs(module,exports,__webpack_require__){"use strict";/* WEBPACK VAR INJECTION */(function(Number){/*
 * cap stream level to media size dimension controller
*/var __extends=this&&this.__extends||function(){var extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;}||function(d,b){for(var p in b){if(b.hasOwnProperty(p))d[p]=b[p];}};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};}();Object.defineProperty(exports,"__esModule",{value:true});var events_1=__webpack_require__(/*! ../events */"./src/events.js");var event_handler_1=__webpack_require__(/*! ../event-handler */"./src/event-handler.js");var CapLevelController=/** @class */function(_super){__extends(CapLevelController,_super);function CapLevelController(hls){var _this=_super.call(this,hls,events_1.default.FPS_DROP_LEVEL_CAPPING,events_1.default.MEDIA_ATTACHING,events_1.default.MANIFEST_PARSED,events_1.default.BUFFER_CODECS,events_1.default.MEDIA_DETACHING)||this;_this.autoLevelCapping=Number.POSITIVE_INFINITY;_this.firstLevel=null;_this.levels=[];_this.media=null;_this.restrictedLevels=[];_this.timer=null;return _this;}CapLevelController.prototype.destroy=function(){if(this.hls.config.capLevelToPlayerSize){this.media=null;this._stopCapping();}};CapLevelController.prototype.onFpsDropLevelCapping=function(data){// Don't add a restricted level more than once
if(CapLevelController.isLevelAllowed(data.droppedLevel,this.restrictedLevels)){this.restrictedLevels.push(data.droppedLevel);}};CapLevelController.prototype.onMediaAttaching=function(data){this.media=data.media instanceof window.HTMLVideoElement?data.media:null;};CapLevelController.prototype.onManifestParsed=function(data){var hls=this.hls;this.restrictedLevels=[];this.levels=data.levels;this.firstLevel=data.firstLevel;if(hls.config.capLevelToPlayerSize&&data.video){// Start capping immediately if the manifest has signaled video codecs
this._startCapping();}};// Only activate capping when playing a video stream; otherwise, multi-bitrate audio-only streams will be restricted
// to the first level
CapLevelController.prototype.onBufferCodecs=function(data){var hls=this.hls;if(hls.config.capLevelToPlayerSize&&data.video){// If the manifest did not signal a video codec capping has been deferred until we're certain video is present
this._startCapping();}};CapLevelController.prototype.onLevelsUpdated=function(data){this.levels=data.levels;};CapLevelController.prototype.onMediaDetaching=function(){this._stopCapping();};CapLevelController.prototype.detectPlayerSize=function(){if(this.media){var levelsLength=this.levels?this.levels.length:0;if(levelsLength){var hls_1=this.hls;hls_1.autoLevelCapping=this.getMaxLevel(levelsLength-1);if(hls_1.autoLevelCapping>this.autoLevelCapping){// if auto level capping has a higher value for the previous one, flush the buffer using nextLevelSwitch
// usually happen when the user go to the fullscreen mode.
hls_1.streamController.nextLevelSwitch();}this.autoLevelCapping=hls_1.autoLevelCapping;}}};/*
    * returns level should be the one with the dimensions equal or greater than the media (player) dimensions (so the video will be downscaled)
    */CapLevelController.prototype.getMaxLevel=function(capLevelIndex){var _this=this;if(!this.levels){return-1;}var validLevels=this.levels.filter(function(level,index){return CapLevelController.isLevelAllowed(index,_this.restrictedLevels)&&index<=capLevelIndex;});return CapLevelController.getMaxLevelByMediaSize(validLevels,this.mediaWidth,this.mediaHeight);};CapLevelController.prototype._startCapping=function(){if(this.timer){// Don't reset capping if started twice; this can happen if the manifest signals a video codec
return;}this.autoLevelCapping=Number.POSITIVE_INFINITY;this.hls.firstLevel=this.getMaxLevel(this.firstLevel);clearInterval(this.timer);this.timer=setInterval(this.detectPlayerSize.bind(this),1000);this.detectPlayerSize();};CapLevelController.prototype._stopCapping=function(){this.restrictedLevels=[];this.firstLevel=null;this.autoLevelCapping=Number.POSITIVE_INFINITY;if(this.timer){this.timer=clearInterval(this.timer);this.timer=null;}};Object.defineProperty(CapLevelController.prototype,"mediaWidth",{get:function get(){var width;var media=this.media;if(media){width=media.width||media.clientWidth||media.offsetWidth;width*=CapLevelController.contentScaleFactor;}return width;},enumerable:true,configurable:true});Object.defineProperty(CapLevelController.prototype,"mediaHeight",{get:function get(){var height;var media=this.media;if(media){height=media.height||media.clientHeight||media.offsetHeight;height*=CapLevelController.contentScaleFactor;}return height;},enumerable:true,configurable:true});Object.defineProperty(CapLevelController,"contentScaleFactor",{get:function get(){var pixelRatio=1;try{pixelRatio=window.devicePixelRatio;}catch(e){}return pixelRatio;},enumerable:true,configurable:true});CapLevelController.isLevelAllowed=function(level,restrictedLevels){if(restrictedLevels===void 0){restrictedLevels=[];}return restrictedLevels.indexOf(level)===-1;};CapLevelController.getMaxLevelByMediaSize=function(levels,width,height){if(!levels||levels&&!levels.length){return-1;}// Levels can have the same dimensions but differing bandwidths - since levels are ordered, we can look to the next
// to determine whether we've chosen the greatest bandwidth for the media's dimensions
var atGreatestBandiwdth=function atGreatestBandiwdth(curLevel,nextLevel){if(!nextLevel){return true;}return curLevel.width!==nextLevel.width||curLevel.height!==nextLevel.height;};// If we run through the loop without breaking, the media's dimensions are greater than every level, so default to
// the max level
var maxLevelIndex=levels.length-1;for(var i=0;i<levels.length;i+=1){var level=levels[i];if((level.width>=width||level.height>=height)&&atGreatestBandiwdth(level,levels[i+1])){maxLevelIndex=i;break;}}return maxLevelIndex;};return CapLevelController;}(event_handler_1.default);exports.default=CapLevelController;/* WEBPACK VAR INJECTION */}).call(this,__webpack_require__(/*! ./src/polyfills/number */"./src/polyfills/number.js")["Number"]);/***/},/***/"./src/controller/eme-controller.js":/*!******************************************!*\
  !*** ./src/controller/eme-controller.js ***!
  \******************************************//*! no static exports found *//*! ModuleConcatenation bailout: Module is not an ECMAScript module *//***/function srcControllerEmeControllerJs(module,exports,__webpack_require__){"use strict";/**
 * @author Stephan Hesse <disparat@gmail.com> | <tchakabam@gmail.com>
 *
 * DRM support for Hls.js
 */var __extends=this&&this.__extends||function(){var extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;}||function(d,b){for(var p in b){if(b.hasOwnProperty(p))d[p]=b[p];}};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};}();Object.defineProperty(exports,"__esModule",{value:true});var event_handler_1=__webpack_require__(/*! ../event-handler */"./src/event-handler.js");var events_1=__webpack_require__(/*! ../events */"./src/events.js");var errors_1=__webpack_require__(/*! ../errors */"./src/errors.js");var logger_1=__webpack_require__(/*! ../utils/logger */"./src/utils/logger.js");var XMLHttpRequest=window.XMLHttpRequest;var MAX_LICENSE_REQUEST_FAILURES=3;/**
 * @see https://developer.mozilla.org/en-US/docs/Web/API/Navigator/requestMediaKeySystemAccess
 */var KeySystems={WIDEVINE:'com.widevine.alpha',PLAYREADY:'com.microsoft.playready'};/**
 * @see https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySystemConfiguration
 * @param {Array<string>} audioCodecs List of required audio codecs to support
 * @param {Array<string>} videoCodecs List of required video codecs to support
 * @param {object} drmSystemOptions Optional parameters/requirements for the key-system
 * @returns {Array<MediaSystemConfiguration>} An array of supported configurations
 */var createWidevineMediaKeySystemConfigurations=function createWidevineMediaKeySystemConfigurations(audioCodecs,videoCodecs,drmSystemOptions){var baseConfig={// initDataTypes: ['keyids', 'mp4'],
// label: "",
// persistentState: "not-allowed", // or "required" ?
// distinctiveIdentifier: "not-allowed", // or "required" ?
// sessionTypes: ['temporary'],
videoCapabilities:[// { contentType: 'video/mp4; codecs="avc1.42E01E"' }
]};videoCodecs.forEach(function(codec){baseConfig.videoCapabilities.push({contentType:"video/mp4; codecs=\""+codec+"\""});});return[baseConfig];};/**
 * The idea here is to handle key-system (and their respective platforms) specific configuration differences
 * in order to work with the local requestMediaKeySystemAccess method.
 *
 * We can also rule-out platform-related key-system support at this point by throwing an error or returning null.
 *
 * @param {string} keySystem Identifier for the key-system, see `KeySystems` enum
 * @param {Array<string>} audioCodecs List of required audio codecs to support
 * @param {Array<string>} videoCodecs List of required video codecs to support
 * @returns {Array<MediaSystemConfiguration> | null} A non-empty Array of MediaKeySystemConfiguration objects or `null`
 */var getSupportedMediaKeySystemConfigurations=function getSupportedMediaKeySystemConfigurations(keySystem,audioCodecs,videoCodecs){switch(keySystem){case KeySystems.WIDEVINE:return createWidevineMediaKeySystemConfigurations(audioCodecs,videoCodecs);default:throw Error('Unknown key-system: '+keySystem);}};/**
 * Controller to deal with encrypted media extensions (EME)
 * @see https://developer.mozilla.org/en-US/docs/Web/API/Encrypted_Media_Extensions_API
 *
 * @class
 * @constructor
 */var EMEController=/** @class */function(_super){__extends(EMEController,_super);/**
       * @constructs
       * @param {Hls} hls Our Hls.js instance
       */function EMEController(hls){var _this=_super.call(this,hls,events_1.default.MEDIA_ATTACHED,events_1.default.MANIFEST_PARSED)||this;_this._widevineLicenseUrl=hls.config.widevineLicenseUrl;_this._licenseXhrSetup=hls.config.licenseXhrSetup;_this._emeEnabled=hls.config.emeEnabled;_this._requestMediaKeySystemAccess=hls.config.requestMediaKeySystemAccessFunc;_this._mediaKeysList=[];_this._media=null;_this._hasSetMediaKeys=false;_this._isMediaEncrypted=false;_this._requestLicenseFailureCount=0;return _this;}/**
       *
       * @param {string} keySystem Identifier for the key-system, see `KeySystems` enum
       * @returns {string} License server URL for key-system (if any configured, otherwise causes error)
       */EMEController.prototype.getLicenseServerUrl=function(keySystem){var url;switch(keySystem){case KeySystems.WIDEVINE:url=this._widevineLicenseUrl;break;default:url=null;break;}if(!url){logger_1.logger.error("No license server URL configured for key-system \""+keySystem+"\"");this.hls.trigger(events_1.default.ERROR,{type:errors_1.ErrorTypes.KEY_SYSTEM_ERROR,details:errors_1.ErrorDetails.KEY_SYSTEM_LICENSE_REQUEST_FAILED,fatal:true});}return url;};/**
       * Requests access object and adds it to our list upon success
       * @private
       * @param {string} keySystem System ID (see `KeySystems`)
       * @param {Array<string>} audioCodecs List of required audio codecs to support
       * @param {Array<string>} videoCodecs List of required video codecs to support
       */EMEController.prototype._attemptKeySystemAccess=function(keySystem,audioCodecs,videoCodecs){// TODO: add other DRM "options"
var _this=this;var mediaKeySystemConfigs=getSupportedMediaKeySystemConfigurations(keySystem,audioCodecs,videoCodecs);if(!mediaKeySystemConfigs){logger_1.logger.warn('Can not create config for key-system (maybe because platform is not supported):',keySystem);return;}logger_1.logger.log('Requesting encrypted media key-system access');// expecting interface like window.navigator.requestMediaKeySystemAccess
this.requestMediaKeySystemAccess(keySystem,mediaKeySystemConfigs).then(function(mediaKeySystemAccess){_this._onMediaKeySystemAccessObtained(keySystem,mediaKeySystemAccess);}).catch(function(err){logger_1.logger.error("Failed to obtain key-system \""+keySystem+"\" access:",err);});};Object.defineProperty(EMEController.prototype,"requestMediaKeySystemAccess",{get:function get(){if(!this._requestMediaKeySystemAccess){throw new Error('No requestMediaKeySystemAccess function configured');}return this._requestMediaKeySystemAccess;},enumerable:true,configurable:true});/**
       * Handles obtaining access to a key-system
       *
       * @param {string} keySystem
       * @param {MediaKeySystemAccess} mediaKeySystemAccess https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySystemAccess
       */EMEController.prototype._onMediaKeySystemAccessObtained=function(keySystem,mediaKeySystemAccess){var _this=this;logger_1.logger.log("Access for key-system \""+keySystem+"\" obtained");var mediaKeysListItem={mediaKeys:null,mediaKeysSession:null,mediaKeysSessionInitialized:false,mediaKeySystemAccess:mediaKeySystemAccess,mediaKeySystemDomain:keySystem};this._mediaKeysList.push(mediaKeysListItem);mediaKeySystemAccess.createMediaKeys().then(function(mediaKeys){mediaKeysListItem.mediaKeys=mediaKeys;logger_1.logger.log("Media-keys created for key-system \""+keySystem+"\"");_this._onMediaKeysCreated();}).catch(function(err){logger_1.logger.error('Failed to create media-keys:',err);});};/**
       * Handles key-creation (represents access to CDM). We are going to create key-sessions upon this
       * for all existing keys where no session exists yet.
       */EMEController.prototype._onMediaKeysCreated=function(){var _this=this;// check for all key-list items if a session exists, otherwise, create one
this._mediaKeysList.forEach(function(mediaKeysListItem){if(!mediaKeysListItem.mediaKeysSession){mediaKeysListItem.mediaKeysSession=mediaKeysListItem.mediaKeys.createSession();_this._onNewMediaKeySession(mediaKeysListItem.mediaKeysSession);}});};/**
       *
       * @param {*} keySession
       */EMEController.prototype._onNewMediaKeySession=function(keySession){var _this=this;logger_1.logger.log("New key-system session "+keySession.sessionId);keySession.addEventListener('message',function(event){_this._onKeySessionMessage(keySession,event.message);},false);};EMEController.prototype._onKeySessionMessage=function(keySession,message){logger_1.logger.log('Got EME message event, creating license request');this._requestLicense(message,function(data){logger_1.logger.log('Received license data, updating key-session');keySession.update(data);});};EMEController.prototype._onMediaEncrypted=function(initDataType,initData){logger_1.logger.log("Media is encrypted using \""+initDataType+"\" init data type");this._isMediaEncrypted=true;this._mediaEncryptionInitDataType=initDataType;this._mediaEncryptionInitData=initData;this._attemptSetMediaKeys();this._generateRequestWithPreferredKeySession();};EMEController.prototype._attemptSetMediaKeys=function(){if(!this._hasSetMediaKeys){// FIXME: see if we can/want/need-to really to deal with several potential key-sessions?
var keysListItem=this._mediaKeysList[0];if(!keysListItem||!keysListItem.mediaKeys){logger_1.logger.error('Fatal: Media is encrypted but no CDM access or no keys have been obtained yet');this.hls.trigger(events_1.default.ERROR,{type:errors_1.ErrorTypes.KEY_SYSTEM_ERROR,details:errors_1.ErrorDetails.KEY_SYSTEM_NO_KEYS,fatal:true});return;}logger_1.logger.log('Setting keys for encrypted media');this._media.setMediaKeys(keysListItem.mediaKeys);this._hasSetMediaKeys=true;}};EMEController.prototype._generateRequestWithPreferredKeySession=function(){var _this=this;// FIXME: see if we can/want/need-to really to deal with several potential key-sessions?
var keysListItem=this._mediaKeysList[0];if(!keysListItem){logger_1.logger.error('Fatal: Media is encrypted but not any key-system access has been obtained yet');this.hls.trigger(events_1.default.ERROR,{type:errors_1.ErrorTypes.KEY_SYSTEM_ERROR,details:errors_1.ErrorDetails.KEY_SYSTEM_NO_ACCESS,fatal:true});return;}if(keysListItem.mediaKeysSessionInitialized){logger_1.logger.warn('Key-Session already initialized but requested again');return;}var keySession=keysListItem.mediaKeysSession;if(!keySession){logger_1.logger.error('Fatal: Media is encrypted but no key-session existing');this.hls.trigger(events_1.default.ERROR,{type:errors_1.ErrorTypes.KEY_SYSTEM_ERROR,details:errors_1.ErrorDetails.KEY_SYSTEM_NO_SESSION,fatal:true});}var initDataType=this._mediaEncryptionInitDataType;var initData=this._mediaEncryptionInitData;logger_1.logger.log("Generating key-session request for \""+initDataType+"\" init data type");keysListItem.mediaKeysSessionInitialized=true;keySession.generateRequest(initDataType,initData).then(function(){logger_1.logger.debug('Key-session generation succeeded');}).catch(function(err){logger_1.logger.error('Error generating key-session request:',err);_this.hls.trigger(events_1.default.ERROR,{type:errors_1.ErrorTypes.KEY_SYSTEM_ERROR,details:errors_1.ErrorDetails.KEY_SYSTEM_NO_SESSION,fatal:false});});};/**
       * @param {string} url License server URL
       * @param {ArrayBuffer} keyMessage Message data issued by key-system
       * @param {function} callback Called when XHR has succeeded
       * @returns {XMLHttpRequest} Unsent (but opened state) XHR object
       */EMEController.prototype._createLicenseXhr=function(url,keyMessage,callback){var xhr=new XMLHttpRequest();var licenseXhrSetup=this._licenseXhrSetup;try{if(licenseXhrSetup){try{licenseXhrSetup(xhr,url);}catch(e){// let's try to open before running setup
xhr.open('POST',url,true);licenseXhrSetup(xhr,url);}}// if licenseXhrSetup did not yet call open, let's do it now
if(!xhr.readyState){xhr.open('POST',url,true);}}catch(e){// IE11 throws an exception on xhr.open if attempting to access an HTTP resource over HTTPS
logger_1.logger.error('Error setting up key-system license XHR',e);this.hls.trigger(events_1.default.ERROR,{type:errors_1.ErrorTypes.KEY_SYSTEM_ERROR,details:errors_1.ErrorDetails.KEY_SYSTEM_LICENSE_REQUEST_FAILED,fatal:true});return;}xhr.responseType='arraybuffer';xhr.onreadystatechange=this._onLicenseRequestReadyStageChange.bind(this,xhr,url,keyMessage,callback);return xhr;};/**
       * @param {XMLHttpRequest} xhr
       * @param {string} url License server URL
       * @param {ArrayBuffer} keyMessage Message data issued by key-system
       * @param {function} callback Called when XHR has succeeded
       *
       */EMEController.prototype._onLicenseRequestReadyStageChange=function(xhr,url,keyMessage,callback){switch(xhr.readyState){case 4:if(xhr.status===200){this._requestLicenseFailureCount=0;logger_1.logger.log('License request succeeded');callback(xhr.response);}else{logger_1.logger.error("License Request XHR failed ("+url+"). Status: "+xhr.status+" ("+xhr.statusText+")");this._requestLicenseFailureCount++;if(this._requestLicenseFailureCount<=MAX_LICENSE_REQUEST_FAILURES){var attemptsLeft=MAX_LICENSE_REQUEST_FAILURES-this._requestLicenseFailureCount+1;logger_1.logger.warn("Retrying license request, "+attemptsLeft+" attempts left");this._requestLicense(keyMessage,callback);return;}this.hls.trigger(events_1.default.ERROR,{type:errors_1.ErrorTypes.KEY_SYSTEM_ERROR,details:errors_1.ErrorDetails.KEY_SYSTEM_LICENSE_REQUEST_FAILED,fatal:true});}break;}};/**
       * @param {object} keysListItem
       * @param {ArrayBuffer} keyMessage
       * @returns {ArrayBuffer} Challenge data posted to license server
       */EMEController.prototype._generateLicenseRequestChallenge=function(keysListItem,keyMessage){var challenge;if(keysListItem.mediaKeySystemDomain===KeySystems.PLAYREADY){logger_1.logger.error('PlayReady is not supported (yet)');// from https://github.com/MicrosoftEdge/Demos/blob/master/eme/scripts/demo.js
/*
              if (this.licenseType !== this.LICENSE_TYPE_WIDEVINE) {
                  // For PlayReady CDMs, we need to dig the Challenge out of the XML.
                  var keyMessageXml = new DOMParser().parseFromString(String.fromCharCode.apply(null, new Uint16Array(keyMessage)), 'application/xml');
                  if (keyMessageXml.getElementsByTagName('Challenge')[0]) {
                      challenge = atob(keyMessageXml.getElementsByTagName('Challenge')[0].childNodes[0].nodeValue);
                  } else {
                      throw 'Cannot find <Challenge> in key message';
                  }
                  var headerNames = keyMessageXml.getElementsByTagName('name');
                  var headerValues = keyMessageXml.getElementsByTagName('value');
                  if (headerNames.length !== headerValues.length) {
                      throw 'Mismatched header <name>/<value> pair in key message';
                  }
                  for (var i = 0; i < headerNames.length; i++) {
                      xhr.setRequestHeader(headerNames[i].childNodes[0].nodeValue, headerValues[i].childNodes[0].nodeValue);
                  }
              }
              */}else if(keysListItem.mediaKeySystemDomain===KeySystems.WIDEVINE){// For Widevine CDMs, the challenge is the keyMessage.
challenge=keyMessage;}else{logger_1.logger.error('Unsupported key-system:',keysListItem.mediaKeySystemDomain);}return challenge;};EMEController.prototype._requestLicense=function(keyMessage,callback){logger_1.logger.log('Requesting content license for key-system');var keysListItem=this._mediaKeysList[0];if(!keysListItem){logger_1.logger.error('Fatal error: Media is encrypted but no key-system access has been obtained yet');this.hls.trigger(events_1.default.ERROR,{type:errors_1.ErrorTypes.KEY_SYSTEM_ERROR,details:errors_1.ErrorDetails.KEY_SYSTEM_NO_ACCESS,fatal:true});return;}var url=this.getLicenseServerUrl(keysListItem.mediaKeySystemDomain);var xhr=this._createLicenseXhr(url,keyMessage,callback);logger_1.logger.log("Sending license request to URL: "+url);xhr.send(this._generateLicenseRequestChallenge(keysListItem,keyMessage));};EMEController.prototype.onMediaAttached=function(data){var _this=this;if(!this._emeEnabled){return;}var media=data.media;// keep reference of media
this._media=media;// FIXME: also handle detaching media !
media.addEventListener('encrypted',function(e){_this._onMediaEncrypted(e.initDataType,e.initData);});};EMEController.prototype.onManifestParsed=function(data){if(!this._emeEnabled){return;}var audioCodecs=data.levels.map(function(level){return level.audioCodec;});var videoCodecs=data.levels.map(function(level){return level.videoCodec;});this._attemptKeySystemAccess(KeySystems.WIDEVINE,audioCodecs,videoCodecs);};return EMEController;}(event_handler_1.default);exports.default=EMEController;/***/},/***/"./src/controller/fps-controller.js":/*!******************************************!*\
  !*** ./src/controller/fps-controller.js ***!
  \******************************************//*! no static exports found *//*! ModuleConcatenation bailout: Module is not an ECMAScript module *//***/function srcControllerFpsControllerJs(module,exports,__webpack_require__){"use strict";/*
 * FPS Controller
*/var __extends=this&&this.__extends||function(){var extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;}||function(d,b){for(var p in b){if(b.hasOwnProperty(p))d[p]=b[p];}};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};}();Object.defineProperty(exports,"__esModule",{value:true});var events_1=__webpack_require__(/*! ../events */"./src/events.js");var event_handler_1=__webpack_require__(/*! ../event-handler */"./src/event-handler.js");var logger_1=__webpack_require__(/*! ../utils/logger */"./src/utils/logger.js");var performance=window.performance;var FPSController=/** @class */function(_super){__extends(FPSController,_super);function FPSController(hls){return _super.call(this,hls,events_1.default.MEDIA_ATTACHING)||this;}FPSController.prototype.destroy=function(){if(this.timer){clearInterval(this.timer);}this.isVideoPlaybackQualityAvailable=false;};FPSController.prototype.onMediaAttaching=function(data){var config=this.hls.config;if(config.capLevelOnFPSDrop){var video_1=this.video=data.media instanceof window.HTMLVideoElement?data.media:null;if(typeof video_1.getVideoPlaybackQuality==='function'){this.isVideoPlaybackQualityAvailable=true;}clearInterval(this.timer);this.timer=setInterval(this.checkFPSInterval.bind(this),config.fpsDroppedMonitoringPeriod);}};FPSController.prototype.checkFPS=function(video,decodedFrames,droppedFrames){var currentTime=performance.now();if(decodedFrames){if(this.lastTime){var currentPeriod=currentTime-this.lastTime,currentDropped=droppedFrames-this.lastDroppedFrames,currentDecoded=decodedFrames-this.lastDecodedFrames,droppedFPS=1000*currentDropped/currentPeriod,hls_1=this.hls;hls_1.trigger(events_1.default.FPS_DROP,{currentDropped:currentDropped,currentDecoded:currentDecoded,totalDroppedFrames:droppedFrames});if(droppedFPS>0){// logger.log('checkFPS : droppedFPS/decodedFPS:' + droppedFPS/(1000 * currentDecoded / currentPeriod));
if(currentDropped>hls_1.config.fpsDroppedMonitoringThreshold*currentDecoded){var currentLevel=hls_1.currentLevel;logger_1.logger.warn('drop FPS ratio greater than max allowed value for currentLevel: '+currentLevel);if(currentLevel>0&&(hls_1.autoLevelCapping===-1||hls_1.autoLevelCapping>=currentLevel)){currentLevel=currentLevel-1;hls_1.trigger(events_1.default.FPS_DROP_LEVEL_CAPPING,{level:currentLevel,droppedLevel:hls_1.currentLevel});hls_1.autoLevelCapping=currentLevel;hls_1.streamController.nextLevelSwitch();}}}}this.lastTime=currentTime;this.lastDroppedFrames=droppedFrames;this.lastDecodedFrames=decodedFrames;}};FPSController.prototype.checkFPSInterval=function(){var video=this.video;if(video){if(this.isVideoPlaybackQualityAvailable){var videoPlaybackQuality=video.getVideoPlaybackQuality();this.checkFPS(video,videoPlaybackQuality.totalVideoFrames,videoPlaybackQuality.droppedVideoFrames);}else{this.checkFPS(video,video.webkitDecodedFrameCount,video.webkitDroppedFrameCount);}}};return FPSController;}(event_handler_1.default);exports.default=FPSController;/***/},/***/"./src/controller/fragment-finders.js":/*!********************************************!*\
  !*** ./src/controller/fragment-finders.js ***!
  \********************************************//*! no static exports found *//*! ModuleConcatenation bailout: Module is not an ECMAScript module *//***/function srcControllerFragmentFindersJs(module,exports,__webpack_require__){"use strict";/* WEBPACK VAR INJECTION */(function(Number){Object.defineProperty(exports,"__esModule",{value:true});var binary_search_1=__webpack_require__(/*! ../utils/binary-search */"./src/utils/binary-search.js");/**
 * Returns first fragment whose endPdt value exceeds the given PDT.
 * @param {Array<Fragment>} fragments - The array of candidate fragments
 * @param {number|null} [PDTValue = null] - The PDT value which must be exceeded
 * @param {number} [maxFragLookUpTolerance = 0] - The amount of time that a fragment's start/end can be within in order to be considered contiguous
 * @returns {*|null} fragment - The best matching fragment
 */function findFragmentByPDT(fragments,PDTValue,maxFragLookUpTolerance){if(!Array.isArray(fragments)||!fragments.length||!Number.isFinite(PDTValue)){return null;}// if less than start
if(PDTValue<fragments[0].programDateTime){return null;}if(PDTValue>=fragments[fragments.length-1].endProgramDateTime){return null;}maxFragLookUpTolerance=maxFragLookUpTolerance||0;for(var seg=0;seg<fragments.length;++seg){var frag=fragments[seg];if(pdtWithinToleranceTest(PDTValue,maxFragLookUpTolerance,frag)){return frag;}}return null;}exports.findFragmentByPDT=findFragmentByPDT;/**
 * Finds a fragment based on the SN of the previous fragment; or based on the needs of the current buffer.
 * This method compensates for small buffer gaps by applying a tolerance to the start of any candidate fragment, thus
 * breaking any traps which would cause the same fragment to be continuously selected within a small range.
 * @param {*} fragPrevious - The last frag successfully appended
 * @param {Array<Fragment>} fragments - The array of candidate fragments
 * @param {number} [bufferEnd = 0] - The end of the contiguous buffered range the playhead is currently within
 * @param {number} maxFragLookUpTolerance - The amount of time that a fragment's start/end can be within in order to be considered contiguous
 * @returns {*} foundFrag - The best matching fragment
 */function findFragmentByPTS(fragPrevious,fragments,bufferEnd,maxFragLookUpTolerance){if(bufferEnd===void 0){bufferEnd=0;}if(maxFragLookUpTolerance===void 0){maxFragLookUpTolerance=0;}var fragNext=fragPrevious?fragments[fragPrevious.sn-fragments[0].sn+1]:null;// Prefer the next fragment if it's within tolerance
if(fragNext&&!fragmentWithinToleranceTest(bufferEnd,maxFragLookUpTolerance,fragNext)){return fragNext;}return binary_search_1.default.search(fragments,fragmentWithinToleranceTest.bind(null,bufferEnd,maxFragLookUpTolerance));}exports.findFragmentByPTS=findFragmentByPTS;/**
 * The test function used by the findFragmentBySn's BinarySearch to look for the best match to the current buffer conditions.
 * @param {*} candidate - The fragment to test
 * @param {number} [bufferEnd = 0] - The end of the current buffered range the playhead is currently within
 * @param {number} [maxFragLookUpTolerance = 0] - The amount of time that a fragment's start can be within in order to be considered contiguous
 * @returns {number} - 0 if it matches, 1 if too low, -1 if too high
 */function fragmentWithinToleranceTest(bufferEnd,maxFragLookUpTolerance,candidate){if(bufferEnd===void 0){bufferEnd=0;}if(maxFragLookUpTolerance===void 0){maxFragLookUpTolerance=0;}// offset should be within fragment boundary - config.maxFragLookUpTolerance
// this is to cope with situations like
// bufferEnd = 9.991
// frag[Ø] : [0,10]
// frag[1] : [10,20]
// bufferEnd is within frag[0] range ... although what we are expecting is to return frag[1] here
//              frag start               frag start+duration
//                  |-----------------------------|
//              <--->                         <--->
//  ...--------><-----------------------------><---------....
// previous frag         matching fragment         next frag
//  return -1             return 0                 return 1
// logger.log(`level/sn/start/end/bufEnd:${level}/${candidate.sn}/${candidate.start}/${(candidate.start+candidate.duration)}/${bufferEnd}`);
// Set the lookup tolerance to be small enough to detect the current segment - ensures we don't skip over very small segments
var candidateLookupTolerance=Math.min(maxFragLookUpTolerance,candidate.duration+(candidate.deltaPTS?candidate.deltaPTS:0));if(candidate.start+candidate.duration-candidateLookupTolerance<=bufferEnd){return 1;}else if(candidate.start-candidateLookupTolerance>bufferEnd&&candidate.start){// if maxFragLookUpTolerance will have negative value then don't return -1 for first element
return-1;}return 0;}exports.fragmentWithinToleranceTest=fragmentWithinToleranceTest;/**
 * The test function used by the findFragmentByPdt's BinarySearch to look for the best match to the current buffer conditions.
 * This function tests the candidate's program date time values, as represented in Unix time
 * @param {*} candidate - The fragment to test
 * @param {number} [pdtBufferEnd = 0] - The Unix time representing the end of the current buffered range
 * @param {number} [maxFragLookUpTolerance = 0] - The amount of time that a fragment's start can be within in order to be considered contiguous
 * @returns {boolean} True if contiguous, false otherwise
 */function pdtWithinToleranceTest(pdtBufferEnd,maxFragLookUpTolerance,candidate){var candidateLookupTolerance=Math.min(maxFragLookUpTolerance,candidate.duration+(candidate.deltaPTS?candidate.deltaPTS:0))*1000;return candidate.endProgramDateTime-candidateLookupTolerance>pdtBufferEnd;}exports.pdtWithinToleranceTest=pdtWithinToleranceTest;/* WEBPACK VAR INJECTION */}).call(this,__webpack_require__(/*! ./src/polyfills/number */"./src/polyfills/number.js")["Number"]);/***/},/***/"./src/controller/fragment-tracker.js":/*!********************************************!*\
  !*** ./src/controller/fragment-tracker.js ***!
  \********************************************//*! no static exports found *//*! ModuleConcatenation bailout: Module is not an ECMAScript module *//***/function srcControllerFragmentTrackerJs(module,exports,__webpack_require__){"use strict";/* WEBPACK VAR INJECTION */(function(Number){var __extends=this&&this.__extends||function(){var extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;}||function(d,b){for(var p in b){if(b.hasOwnProperty(p))d[p]=b[p];}};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};}();Object.defineProperty(exports,"__esModule",{value:true});var event_handler_1=__webpack_require__(/*! ../event-handler */"./src/event-handler.js");var events_1=__webpack_require__(/*! ../events */"./src/events.js");exports.FragmentState={NOT_LOADED:'NOT_LOADED',APPENDING:'APPENDING',PARTIAL:'PARTIAL',OK:'OK'};var FragmentTracker=/** @class */function(_super){__extends(FragmentTracker,_super);function FragmentTracker(hls){var _this=_super.call(this,hls,events_1.default.BUFFER_APPENDED,events_1.default.FRAG_BUFFERED,events_1.default.FRAG_LOADED)||this;_this.bufferPadding=0.2;_this.fragments=Object.create(null);_this.timeRanges=Object.create(null);_this.config=hls.config;return _this;}FragmentTracker.prototype.destroy=function(){this.fragments=Object.create(null);this.timeRanges=Object.create(null);this.config=null;event_handler_1.default.prototype.destroy.call(this);_super.prototype.destroy.call(this);};/**
     * Return a Fragment that match the position and levelType.
     * If not found any Fragment, return null
     * @param {number} position
     * @param {LevelType} levelType
     * @returns {Fragment|null}
     */FragmentTracker.prototype.getBufferedFrag=function(position,levelType){var fragments=this.fragments;var bufferedFrags=Object.keys(fragments).filter(function(key){var fragmentEntity=fragments[key];if(fragmentEntity.body.type!==levelType){return false;}if(!fragmentEntity.buffered){return false;}var frag=fragmentEntity.body;return frag.startPTS<=position&&position<=frag.endPTS;});if(bufferedFrags.length===0){return null;}else{// https://github.com/video-dev/hls.js/pull/1545#discussion_r166229566
var bufferedFragKey=bufferedFrags.pop();return fragments[bufferedFragKey].body;}};/**
     * Partial fragments effected by coded frame eviction will be removed
     * The browser will unload parts of the buffer to free up memory for new buffer data
     * Fragments will need to be reloaded when the buffer is freed up, removing partial fragments will allow them to reload(since there might be parts that are still playable)
     * @param {String} elementaryStream The elementaryStream of media this is (eg. video/audio)
     * @param {TimeRanges} timeRange TimeRange object from a sourceBuffer
     */FragmentTracker.prototype.detectEvictedFragments=function(elementaryStream,timeRange){var _this=this;var fragmentTimes,time;// Check if any flagged fragments have been unloaded
Object.keys(this.fragments).forEach(function(key){var fragmentEntity=_this.fragments[key];if(fragmentEntity.buffered===true){var esData=fragmentEntity.range[elementaryStream];if(esData){fragmentTimes=esData.time;for(var i=0;i<fragmentTimes.length;i++){time=fragmentTimes[i];if(_this.isTimeBuffered(time.startPTS,time.endPTS,timeRange)===false){// Unregister partial fragment as it needs to load again to be reused
_this.removeFragment(fragmentEntity.body);break;}}}}});};/**
     * Checks if the fragment passed in is loaded in the buffer properly
     * Partially loaded fragments will be registered as a partial fragment
     * @param {Object} fragment Check the fragment against all sourceBuffers loaded
     */FragmentTracker.prototype.detectPartialFragments=function(fragment){var _this=this;var fragKey=this.getFragmentKey(fragment);var fragmentEntity=this.fragments[fragKey];if(fragmentEntity){fragmentEntity.buffered=true;Object.keys(this.timeRanges).forEach(function(elementaryStream){if(fragment.hasElementaryStream(elementaryStream)){var timeRange=_this.timeRanges[elementaryStream];// Check for malformed fragments
// Gaps need to be calculated for each elementaryStream
fragmentEntity.range[elementaryStream]=_this.getBufferedTimes(fragment.startPTS,fragment.endPTS,timeRange);}});}};FragmentTracker.prototype.getBufferedTimes=function(startPTS,endPTS,timeRange){var fragmentTimes=[];var startTime,endTime;var fragmentPartial=false;for(var i=0;i<timeRange.length;i++){startTime=timeRange.start(i)-this.bufferPadding;endTime=timeRange.end(i)+this.bufferPadding;if(startPTS>=startTime&&endPTS<=endTime){// Fragment is entirely contained in buffer
// No need to check the other timeRange times since it's completely playable
fragmentTimes.push({startPTS:Math.max(startPTS,timeRange.start(i)),endPTS:Math.min(endPTS,timeRange.end(i))});break;}else if(startPTS<endTime&&endPTS>startTime){// Check for intersection with buffer
// Get playable sections of the fragment
fragmentTimes.push({startPTS:Math.max(startPTS,timeRange.start(i)),endPTS:Math.min(endPTS,timeRange.end(i))});fragmentPartial=true;}else if(endPTS<=startTime){// No need to check the rest of the timeRange as it is in order
break;}}return{time:fragmentTimes,partial:fragmentPartial};};FragmentTracker.prototype.getFragmentKey=function(fragment){return fragment.type+"_"+fragment.level+"_"+fragment.urlId+"_"+fragment.sn;};/**
     * Gets the partial fragment for a certain time
     * @param {Number} time
     * @returns {Object} fragment Returns a partial fragment at a time or null if there is no partial fragment
     */FragmentTracker.prototype.getPartialFragment=function(time){var _this=this;var timePadding,startTime,endTime;var bestFragment=null;var bestOverlap=0;Object.keys(this.fragments).forEach(function(key){var fragmentEntity=_this.fragments[key];if(_this.isPartial(fragmentEntity)){startTime=fragmentEntity.body.startPTS-_this.bufferPadding;endTime=fragmentEntity.body.endPTS+_this.bufferPadding;if(time>=startTime&&time<=endTime){// Use the fragment that has the most padding from start and end time
timePadding=Math.min(time-startTime,endTime-time);if(bestOverlap<=timePadding){bestFragment=fragmentEntity.body;bestOverlap=timePadding;}}}});return bestFragment;};/**
     * @param {Object} fragment The fragment to check
     * @returns {String} Returns the fragment state when a fragment never loaded or if it partially loaded
     */FragmentTracker.prototype.getState=function(fragment){var fragKey=this.getFragmentKey(fragment);var fragmentEntity=this.fragments[fragKey];var state=exports.FragmentState.NOT_LOADED;if(fragmentEntity!==undefined){if(!fragmentEntity.buffered){state=exports.FragmentState.APPENDING;}else if(this.isPartial(fragmentEntity)===true){state=exports.FragmentState.PARTIAL;}else{state=exports.FragmentState.OK;}}return state;};FragmentTracker.prototype.isPartial=function(fragmentEntity){return fragmentEntity.buffered===true&&(fragmentEntity.range.video!==undefined&&fragmentEntity.range.video.partial===true||fragmentEntity.range.audio!==undefined&&fragmentEntity.range.audio.partial===true);};FragmentTracker.prototype.isTimeBuffered=function(startPTS,endPTS,timeRange){var startTime,endTime;for(var i=0;i<timeRange.length;i++){startTime=timeRange.start(i)-this.bufferPadding;endTime=timeRange.end(i)+this.bufferPadding;if(startPTS>=startTime&&endPTS<=endTime){return true;}if(endPTS<=startTime){// No need to check the rest of the timeRange as it is in order
return false;}}return false;};/**
     * Fires when a fragment loading is completed
     */FragmentTracker.prototype.onFragLoaded=function(e){var fragment=e.frag;// don't track initsegment (for which sn is not a number)
// don't track frags used for bitrateTest, they're irrelevant.
if(!Number.isFinite(fragment.sn)||fragment.bitrateTest){return;}this.fragments[this.getFragmentKey(fragment)]={body:fragment,range:Object.create(null),buffered:false};};/**
     * Fires when the buffer is updated
     */FragmentTracker.prototype.onBufferAppended=function(e){var _this=this;// Store the latest timeRanges loaded in the buffer
this.timeRanges=e.timeRanges;Object.keys(this.timeRanges).forEach(function(elementaryStream){var timeRange=_this.timeRanges[elementaryStream];_this.detectEvictedFragments(elementaryStream,timeRange);});};/**
     * Fires after a fragment has been loaded into the source buffer
     */FragmentTracker.prototype.onFragBuffered=function(e){this.detectPartialFragments(e.frag);};/**
     * Return true if fragment tracker has the fragment.
     * @param {Object} fragment
     * @returns {boolean}
     */FragmentTracker.prototype.hasFragment=function(fragment){var fragKey=this.getFragmentKey(fragment);return this.fragments[fragKey]!==undefined;};/**
     * Remove a fragment from fragment tracker until it is loaded again
     * @param {Object} fragment The fragment to remove
     */FragmentTracker.prototype.removeFragment=function(fragment){var fragKey=this.getFragmentKey(fragment);delete this.fragments[fragKey];};/**
     * Remove all fragments from fragment tracker.
     */FragmentTracker.prototype.removeAllFragments=function(){this.fragments=Object.create(null);};return FragmentTracker;}(event_handler_1.default);exports.FragmentTracker=FragmentTracker;/* WEBPACK VAR INJECTION */}).call(this,__webpack_require__(/*! ./src/polyfills/number */"./src/polyfills/number.js")["Number"]);/***/},/***/"./src/controller/gap-controller.js":/*!******************************************!*\
  !*** ./src/controller/gap-controller.js ***!
  \******************************************//*! no static exports found *//*! ModuleConcatenation bailout: Module is not an ECMAScript module *//***/function srcControllerGapControllerJs(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var buffer_helper_1=__webpack_require__(/*! ../utils/buffer-helper */"./src/utils/buffer-helper.js");var errors_1=__webpack_require__(/*! ../errors */"./src/errors.js");var events_1=__webpack_require__(/*! ../events */"./src/events.js");var logger_1=__webpack_require__(/*! ../utils/logger */"./src/utils/logger.js");var stallDebounceInterval=1000;var jumpThreshold=0.5;// tolerance needed as some browsers stalls playback before reaching buffered range end
var GapController=/** @class */function(){function GapController(config,media,fragmentTracker,hls){this.config=config;this.media=media;this.fragmentTracker=fragmentTracker;this.hls=hls;this.stallReported=false;}/**
     * Checks if the playhead is stuck within a gap, and if so, attempts to free it.
     * A gap is an unbuffered range between two buffered ranges (or the start and the first buffered range).
     * @param lastCurrentTime
     * @param buffered
     */GapController.prototype.poll=function(lastCurrentTime,buffered){var _a=this,config=_a.config,media=_a.media;var currentTime=media.currentTime;var tnow=window.performance.now();if(currentTime!==lastCurrentTime){// The playhead is now moving, but was previously stalled
if(this.stallReported){logger_1.logger.warn("playback not stuck anymore @"+currentTime+", after "+Math.round(tnow-this.stalled)+"ms");this.stallReported=false;}this.stalled=null;this.nudgeRetry=0;return;}if(media.ended||!media.buffered.length||media.readyState>2){return;}if(media.seeking&&buffer_helper_1.BufferHelper.isBuffered(media,currentTime)){return;}// The playhead isn't moving but it should be
// Allow some slack time to for small stalls to resolve themselves
var stalledDuration=tnow-this.stalled;var bufferInfo=buffer_helper_1.BufferHelper.bufferInfo(media,currentTime,config.maxBufferHole);if(!this.stalled){this.stalled=tnow;return;}else if(stalledDuration>=stallDebounceInterval){// Report stalling after trying to fix
this._reportStall(bufferInfo.len);}this._tryFixBufferStall(bufferInfo,stalledDuration);};/**
     * Detects and attempts to fix known buffer stalling issues.
     * @param bufferInfo - The properties of the current buffer.
     * @param stalledDuration - The amount of time Hls.js has been stalling for.
     * @private
     */GapController.prototype._tryFixBufferStall=function(bufferInfo,stalledDuration){var _a=this,config=_a.config,fragmentTracker=_a.fragmentTracker,media=_a.media;var currentTime=media.currentTime;var partial=fragmentTracker.getPartialFragment(currentTime);if(partial){// Try to skip over the buffer hole caused by a partial fragment
// This method isn't limited by the size of the gap between buffered ranges
this._trySkipBufferHole(partial);}if(bufferInfo.len>jumpThreshold&&stalledDuration>config.highBufferWatchdogPeriod*1000){// Try to nudge currentTime over a buffer hole if we've been stalling for the configured amount of seconds
// We only try to jump the hole if it's under the configured size
// Reset stalled so to rearm watchdog timer
this.stalled=null;this._tryNudgeBuffer();}};/**
     * Triggers a BUFFER_STALLED_ERROR event, but only once per stall period.
     * @param bufferLen - The playhead distance from the end of the current buffer segment.
     * @private
     */GapController.prototype._reportStall=function(bufferLen){var _a=this,hls=_a.hls,media=_a.media,stallReported=_a.stallReported;if(!stallReported){// Report stalled error once
this.stallReported=true;logger_1.logger.warn("Playback stalling at @"+media.currentTime+" due to low buffer");hls.trigger(events_1.default.ERROR,{type:errors_1.ErrorTypes.MEDIA_ERROR,details:errors_1.ErrorDetails.BUFFER_STALLED_ERROR,fatal:false,buffer:bufferLen});}};/**
     * Attempts to fix buffer stalls by jumping over known gaps caused by partial fragments
     * @param partial - The partial fragment found at the current time (where playback is stalling).
     * @private
     */GapController.prototype._trySkipBufferHole=function(partial){var _a=this,hls=_a.hls,media=_a.media;var currentTime=media.currentTime;var lastEndTime=0;// Check if currentTime is between unbuffered regions of partial fragments
for(var i=0;i<media.buffered.length;i++){var startTime=media.buffered.start(i);if(currentTime>=lastEndTime&&currentTime<startTime){media.currentTime=Math.max(startTime,media.currentTime+0.1);logger_1.logger.warn("skipping hole, adjusting currentTime from "+currentTime+" to "+media.currentTime);this.stalled=null;hls.trigger(events_1.default.ERROR,{type:errors_1.ErrorTypes.MEDIA_ERROR,details:errors_1.ErrorDetails.BUFFER_SEEK_OVER_HOLE,fatal:false,reason:"fragment loaded with buffer holes, seeking from "+currentTime+" to "+media.currentTime,frag:partial});return;}lastEndTime=media.buffered.end(i);}};/**
     * Attempts to fix buffer stalls by advancing the mediaElement's current time by a small amount.
     * @private
     */GapController.prototype._tryNudgeBuffer=function(){var _a=this,config=_a.config,hls=_a.hls,media=_a.media;var currentTime=media.currentTime;var nudgeRetry=(this.nudgeRetry||0)+1;this.nudgeRetry=nudgeRetry;if(nudgeRetry<config.nudgeMaxRetry){var targetTime=currentTime+nudgeRetry*config.nudgeOffset;logger_1.logger.log("adjust currentTime from "+currentTime+" to "+targetTime);// playback stalled in buffered area ... let's nudge currentTime to try to overcome this
media.currentTime=targetTime;hls.trigger(events_1.default.ERROR,{type:errors_1.ErrorTypes.MEDIA_ERROR,details:errors_1.ErrorDetails.BUFFER_NUDGE_ON_STALL,fatal:false});}else{logger_1.logger.error("still stuck in high buffer @"+currentTime+" after "+config.nudgeMaxRetry+", raise fatal error");hls.trigger(events_1.default.ERROR,{type:errors_1.ErrorTypes.MEDIA_ERROR,details:errors_1.ErrorDetails.BUFFER_STALLED_ERROR,fatal:true});}};return GapController;}();exports.default=GapController;/***/},/***/"./src/controller/id3-track-controller.js":/*!************************************************!*\
  !*** ./src/controller/id3-track-controller.js ***!
  \************************************************//*! no static exports found *//*! ModuleConcatenation bailout: Module is not an ECMAScript module *//***/function srcControllerId3TrackControllerJs(module,exports,__webpack_require__){"use strict";/*
 * id3 metadata track controller
*/var __extends=this&&this.__extends||function(){var extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;}||function(d,b){for(var p in b){if(b.hasOwnProperty(p))d[p]=b[p];}};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};}();Object.defineProperty(exports,"__esModule",{value:true});var events_1=__webpack_require__(/*! ../events */"./src/events.js");var event_handler_1=__webpack_require__(/*! ../event-handler */"./src/event-handler.js");var id3_1=__webpack_require__(/*! ../demux/id3 */"./src/demux/id3.js");var texttrack_utils_1=__webpack_require__(/*! ../utils/texttrack-utils */"./src/utils/texttrack-utils.js");var ID3TrackController=/** @class */function(_super){__extends(ID3TrackController,_super);function ID3TrackController(hls){var _this=_super.call(this,hls,events_1.default.MEDIA_ATTACHED,events_1.default.MEDIA_DETACHING,events_1.default.FRAG_PARSING_METADATA)||this;_this.id3Track=undefined;_this.media=undefined;return _this;}ID3TrackController.prototype.destroy=function(){event_handler_1.default.prototype.destroy.call(this);};// Add ID3 metatadata text track.
ID3TrackController.prototype.onMediaAttached=function(data){this.media=data.media;if(!this.media){}};ID3TrackController.prototype.onMediaDetaching=function(){texttrack_utils_1.clearCurrentCues(this.id3Track);this.id3Track=undefined;this.media=undefined;};ID3TrackController.prototype.getID3Track=function(textTracks){for(var i=0;i<textTracks.length;i++){var textTrack=textTracks[i];if(textTrack.kind==='metadata'&&textTrack.label==='id3'){// send 'addtrack' when reusing the textTrack for metadata,
// same as what we do for captions
texttrack_utils_1.sendAddTrackEvent(textTrack,this.media);return textTrack;}}return this.media.addTextTrack('metadata','id3');};ID3TrackController.prototype.onFragParsingMetadata=function(data){var fragment=data.frag;var samples=data.samples;// create track dynamically
if(!this.id3Track){this.id3Track=this.getID3Track(this.media.textTracks);this.id3Track.mode='hidden';}// Attempt to recreate Safari functionality by creating
// WebKitDataCue objects when available and store the decoded
// ID3 data in the value property of the cue
var Cue=window.WebKitDataCue||window.VTTCue||window.TextTrackCue;for(var i=0;i<samples.length;i++){var frames_1=id3_1.default.getID3Frames(samples[i].data);if(frames_1){var startTime=samples[i].pts;var endTime=i<samples.length-1?samples[i+1].pts:fragment.endPTS;// Give a slight bump to the endTime if it's equal to startTime to avoid a SyntaxError in IE
if(startTime===endTime){endTime+=0.0001;}for(var j=0;j<frames_1.length;j++){var frame=frames_1[j];// Safari doesn't put the timestamp frame in the TextTrack
if(!id3_1.default.isTimeStampFrame(frame)){var cue=new Cue(startTime,endTime,'');cue.value=frame;this.id3Track.addCue(cue);}}}}};return ID3TrackController;}(event_handler_1.default);exports.default=ID3TrackController;/***/},/***/"./src/controller/level-controller.js":/*!********************************************!*\
  !*** ./src/controller/level-controller.js ***!
  \********************************************//*! no static exports found *//*! ModuleConcatenation bailout: Module is not an ECMAScript module *//***/function srcControllerLevelControllerJs(module,exports,__webpack_require__){"use strict";/*
 * Level Controller
*/var __extends=this&&this.__extends||function(){var extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;}||function(d,b){for(var p in b){if(b.hasOwnProperty(p))d[p]=b[p];}};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};}();Object.defineProperty(exports,"__esModule",{value:true});var events_1=__webpack_require__(/*! ../events */"./src/events.js");var event_handler_1=__webpack_require__(/*! ../event-handler */"./src/event-handler.js");var logger_1=__webpack_require__(/*! ../utils/logger */"./src/utils/logger.js");var errors_1=__webpack_require__(/*! ../errors */"./src/errors.js");var codecs_1=__webpack_require__(/*! ../utils/codecs */"./src/utils/codecs.js");var level_helper_1=__webpack_require__(/*! ./level-helper */"./src/controller/level-helper.js");var performance=window.performance;var chromeOrFirefox;var LevelController=/** @class */function(_super){__extends(LevelController,_super);function LevelController(hls){var _this=_super.call(this,hls,events_1.default.MANIFEST_LOADED,events_1.default.LEVEL_LOADED,events_1.default.AUDIO_TRACK_SWITCHED,events_1.default.FRAG_LOADED,events_1.default.ERROR)||this;_this.canload=false;_this.currentLevelIndex=null;_this.manualLevelIndex=-1;_this.timer=null;chromeOrFirefox=/chrome|firefox/.test(navigator.userAgent.toLowerCase());return _this;}LevelController.prototype.onHandlerDestroying=function(){this.clearTimer();this.manualLevelIndex=-1;};LevelController.prototype.clearTimer=function(){if(this.timer!==null){clearTimeout(this.timer);this.timer=null;}};LevelController.prototype.startLoad=function(){var levels=this._levels;this.canload=true;this.levelRetryCount=0;// clean up live level details to force reload them, and reset load errors
if(levels){levels.forEach(function(level){level.loadError=0;var levelDetails=level.details;if(levelDetails&&levelDetails.live){level.details=undefined;}});}// speed up live playlist refresh if timer exists
if(this.timer!==null){this.loadLevel();}};LevelController.prototype.stopLoad=function(){this.canload=false;};LevelController.prototype.onManifestLoaded=function(data){var levels=[];var audioTracks=[];var bitrateStart;var levelSet={};var levelFromSet=null;var videoCodecFound=false;var audioCodecFound=false;// regroup redundant levels together
data.levels.forEach(function(level){var attributes=level.attrs;level.loadError=0;level.fragmentError=false;videoCodecFound=videoCodecFound||!!level.videoCodec;audioCodecFound=audioCodecFound||!!level.audioCodec;// erase audio codec info if browser does not support mp4a.40.34.
// demuxer will autodetect codec and fallback to mpeg/audio
if(chromeOrFirefox&&level.audioCodec&&level.audioCodec.indexOf('mp4a.40.34')!==-1){level.audioCodec=undefined;}levelFromSet=levelSet[level.bitrate];// FIXME: we would also have to match the resolution here
if(!levelFromSet){level.url=[level.url];level.urlId=0;levelSet[level.bitrate]=level;levels.push(level);}else{levelFromSet.url.push(level.url);}if(attributes){if(attributes.AUDIO){audioCodecFound=true;level_helper_1.addGroupId(levelFromSet||level,'audio',attributes.AUDIO);}if(attributes.SUBTITLES){level_helper_1.addGroupId(levelFromSet||level,'text',attributes.SUBTITLES);}}});// remove audio-only level if we also have levels with audio+video codecs signalled
if(videoCodecFound&&audioCodecFound){levels=levels.filter(function(_a){var videoCodec=_a.videoCodec;return!!videoCodec;});}// only keep levels with supported audio/video codecs
levels=levels.filter(function(_a){var audioCodec=_a.audioCodec,videoCodec=_a.videoCodec;return(!audioCodec||codecs_1.isCodecSupportedInMp4(audioCodec,'audio'))&&(!videoCodec||codecs_1.isCodecSupportedInMp4(videoCodec,'video'));});if(data.audioTracks){audioTracks=data.audioTracks.filter(function(track){return!track.audioCodec||codecs_1.isCodecSupportedInMp4(track.audioCodec,'audio');});// Reassign id's after filtering since they're used as array indices
audioTracks.forEach(function(track,index){track.id=index;});}if(levels.length>0){// start bitrate is the first bitrate of the manifest
bitrateStart=levels[0].bitrate;// sort level on bitrate
levels.sort(function(a,b){return a.bitrate-b.bitrate;});this._levels=levels;// find index of first level in sorted levels
for(var i=0;i<levels.length;i++){if(levels[i].bitrate===bitrateStart){this._firstLevel=i;logger_1.logger.log("manifest loaded,"+levels.length+" level(s) found, first bitrate:"+bitrateStart);break;}}// Audio is only alternate if manifest include a URI along with the audio group tag
this.hls.trigger(events_1.default.MANIFEST_PARSED,{levels:levels,audioTracks:audioTracks,firstLevel:this._firstLevel,stats:data.stats,audio:audioCodecFound,video:videoCodecFound,altAudio:audioTracks.some(function(t){return!!t.url;})});}else{this.hls.trigger(events_1.default.ERROR,{type:errors_1.ErrorTypes.MEDIA_ERROR,details:errors_1.ErrorDetails.MANIFEST_INCOMPATIBLE_CODECS_ERROR,fatal:true,url:this.hls.url,reason:'no level with compatible codecs found in manifest'});}};Object.defineProperty(LevelController.prototype,"levels",{get:function get(){return this._levels;},enumerable:true,configurable:true});Object.defineProperty(LevelController.prototype,"level",{get:function get(){return this.currentLevelIndex;},set:function set(newLevel){var levels=this._levels;if(levels){newLevel=Math.min(newLevel,levels.length-1);if(this.currentLevelIndex!==newLevel||!levels[newLevel].details){this.setLevelInternal(newLevel);}}},enumerable:true,configurable:true});LevelController.prototype.setLevelInternal=function(newLevel){var levels=this._levels;var hls=this.hls;// check if level idx is valid
if(newLevel>=0&&newLevel<levels.length){// stopping live reloading timer if any
this.clearTimer();if(this.currentLevelIndex!==newLevel){logger_1.logger.log("switching to level "+newLevel);this.currentLevelIndex=newLevel;var levelProperties=levels[newLevel];levelProperties.level=newLevel;hls.trigger(events_1.default.LEVEL_SWITCHING,levelProperties);}var level=levels[newLevel];var levelDetails=level.details;// check if we need to load playlist for this level
if(!levelDetails||levelDetails.live){// level not retrieved yet, or live playlist we need to (re)load it
var urlId=level.urlId;hls.trigger(events_1.default.LEVEL_LOADING,{url:level.url[urlId],level:newLevel,id:urlId});}}else{// invalid level id given, trigger error
hls.trigger(events_1.default.ERROR,{type:errors_1.ErrorTypes.OTHER_ERROR,details:errors_1.ErrorDetails.LEVEL_SWITCH_ERROR,level:newLevel,fatal:false,reason:'invalid level idx'});}};Object.defineProperty(LevelController.prototype,"manualLevel",{get:function get(){return this.manualLevelIndex;},set:function set(newLevel){this.manualLevelIndex=newLevel;if(this._startLevel===undefined){this._startLevel=newLevel;}if(newLevel!==-1){this.level=newLevel;}},enumerable:true,configurable:true});Object.defineProperty(LevelController.prototype,"firstLevel",{get:function get(){return this._firstLevel;},set:function set(newLevel){this._firstLevel=newLevel;},enumerable:true,configurable:true});Object.defineProperty(LevelController.prototype,"startLevel",{get:function get(){// hls.startLevel takes precedence over config.startLevel
// if none of these values are defined, fallback on this._firstLevel (first quality level appearing in variant manifest)
if(this._startLevel===undefined){var configStartLevel=this.hls.config.startLevel;if(configStartLevel!==undefined){return configStartLevel;}else{return this._firstLevel;}}else{return this._startLevel;}},set:function set(newLevel){this._startLevel=newLevel;},enumerable:true,configurable:true});LevelController.prototype.onError=function(data){if(data.fatal){if(data.type===errors_1.ErrorTypes.NETWORK_ERROR){this.clearTimer();}return;}var levelError=false,fragmentError=false;var levelIndex;// try to recover not fatal errors
switch(data.details){case errors_1.ErrorDetails.FRAG_LOAD_ERROR:case errors_1.ErrorDetails.FRAG_LOAD_TIMEOUT:case errors_1.ErrorDetails.KEY_LOAD_ERROR:case errors_1.ErrorDetails.KEY_LOAD_TIMEOUT:levelIndex=data.frag.level;fragmentError=true;break;case errors_1.ErrorDetails.LEVEL_LOAD_ERROR:case errors_1.ErrorDetails.LEVEL_LOAD_TIMEOUT:levelIndex=data.context.level;levelError=true;break;case errors_1.ErrorDetails.REMUX_ALLOC_ERROR:levelIndex=data.level;levelError=true;break;}if(levelIndex!==undefined){this.recoverLevel(data,levelIndex,levelError,fragmentError);}};/**
     * Switch to a redundant stream if any available.
     * If redundant stream is not available, emergency switch down if ABR mode is enabled.
     *
     * @param {Object} errorEvent
     * @param {Number} levelIndex current level index
     * @param {Boolean} levelError
     * @param {Boolean} fragmentError
     */// FIXME Find a better abstraction where fragment/level retry management is well decoupled
LevelController.prototype.recoverLevel=function(errorEvent,levelIndex,levelError,fragmentError){var _this=this;var config=this.hls.config;var errorDetails=errorEvent.details;var level=this._levels[levelIndex];var redundantLevels,delay,nextLevel;level.loadError++;level.fragmentError=fragmentError;if(levelError){if(this.levelRetryCount+1<=config.levelLoadingMaxRetry){// exponential backoff capped to max retry timeout
delay=Math.min(Math.pow(2,this.levelRetryCount)*config.levelLoadingRetryDelay,config.levelLoadingMaxRetryTimeout);// Schedule level reload
this.timer=setTimeout(function(){return _this.loadLevel();},delay);// boolean used to inform stream controller not to switch back to IDLE on non fatal error
errorEvent.levelRetry=true;this.levelRetryCount++;logger_1.logger.warn("level controller, "+errorDetails+", retry in "+delay+" ms, current retry count is "+this.levelRetryCount);}else{logger_1.logger.error("level controller, cannot recover from "+errorDetails+" error");this.currentLevelIndex=null;// stopping live reloading timer if any
this.clearTimer();// switch error to fatal
errorEvent.fatal=true;return;}}// Try any redundant streams if available for both errors: level and fragment
// If level.loadError reaches redundantLevels it means that we tried them all, no hope  => let's switch down
if(levelError||fragmentError){redundantLevels=level.url.length;if(redundantLevels>1&&level.loadError<redundantLevels){level.urlId=(level.urlId+1)%redundantLevels;level.details=undefined;logger_1.logger.warn("level controller, "+errorDetails+" for level "+levelIndex+": switching to redundant URL-id "+level.urlId);// console.log('Current audio track group ID:', this.hls.audioTracks[this.hls.audioTrack].groupId);
// console.log('New video quality level audio group id:', level.attrs.AUDIO);
}else{// Search for available level
if(this.manualLevelIndex===-1){// When lowest level has been reached, let's start hunt from the top
nextLevel=levelIndex===0?this._levels.length-1:levelIndex-1;logger_1.logger.warn("level controller, "+errorDetails+": switch to "+nextLevel);this.hls.nextAutoLevel=this.currentLevelIndex=nextLevel;}else if(fragmentError){// Allow fragment retry as long as configuration allows.
// reset this._level so that another call to set level() will trigger again a frag load
logger_1.logger.warn("level controller, "+errorDetails+": reload a fragment");this.currentLevelIndex=null;}}}};// reset errors on the successful load of a fragment
LevelController.prototype.onFragLoaded=function(_a){var frag=_a.frag;if(frag!==undefined&&frag.type==='main'){var level=this._levels[frag.level];if(level!==undefined){level.fragmentError=false;level.loadError=0;this.levelRetryCount=0;}}};LevelController.prototype.onLevelLoaded=function(data){var _this=this;var level=data.level,details=data.details;// only process level loaded events matching with expected level
if(level!==this.currentLevelIndex){return;}var curLevel=this._levels[level];// reset level load error counter on successful level loaded only if there is no issues with fragments
if(!curLevel.fragmentError){curLevel.loadError=0;this.levelRetryCount=0;}// if current playlist is a live playlist, arm a timer to reload it
if(details.live){var reloadInterval=level_helper_1.computeReloadInterval(curLevel.details,details,data.stats.trequest);logger_1.logger.log("live playlist, reload in "+Math.round(reloadInterval)+" ms");this.timer=setTimeout(function(){return _this.loadLevel();},reloadInterval);}else{this.clearTimer();}};LevelController.prototype.onAudioTrackSwitched=function(data){var audioGroupId=this.hls.audioTracks[data.id].groupId;var currentLevel=this.hls.levels[this.currentLevelIndex];if(!currentLevel){return;}if(currentLevel.audioGroupIds){var urlId=-1;for(var i=0;i<currentLevel.audioGroupIds.length;i++){if(currentLevel.audioGroupIds[i]===audioGroupId){urlId=i;break;}}if(urlId!==currentLevel.urlId){currentLevel.urlId=urlId;this.startLoad();}}};LevelController.prototype.loadLevel=function(){logger_1.logger.debug('call to loadLevel');if(this.currentLevelIndex!==null&&this.canload){var levelObject=this._levels[this.currentLevelIndex];if(typeof levelObject==='object'&&levelObject.url.length>0){var level=this.currentLevelIndex;var id=levelObject.urlId;var url=levelObject.url[id];logger_1.logger.log("Attempt loading level index "+level+" with URL-id "+id);// console.log('Current audio track group ID:', this.hls.audioTracks[this.hls.audioTrack].groupId);
// console.log('New video quality level audio group id:', levelObject.attrs.AUDIO, level);
this.hls.trigger(events_1.default.LEVEL_LOADING,{url:url,level:level,id:id});}}};Object.defineProperty(LevelController.prototype,"nextLoadLevel",{get:function get(){if(this.manualLevelIndex!==-1){return this.manualLevelIndex;}else{return this.hls.nextAutoLevel;}},set:function set(nextLevel){this.level=nextLevel;if(this.manualLevelIndex===-1){this.hls.nextAutoLevel=nextLevel;}},enumerable:true,configurable:true});return LevelController;}(event_handler_1.default);exports.default=LevelController;/***/},/***/"./src/controller/level-helper.js":/*!****************************************!*\
  !*** ./src/controller/level-helper.js ***!
  \****************************************//*! no static exports found *//*! ModuleConcatenation bailout: Module is not an ECMAScript module *//***/function srcControllerLevelHelperJs(module,exports,__webpack_require__){"use strict";/* WEBPACK VAR INJECTION */(function(Number){/**
 * @module LevelHelper
 *
 * Providing methods dealing with playlist sliding and drift
 *
 * TODO: Create an actual `Level` class/model that deals with all this logic in an object-oriented-manner.
 *
 * */Object.defineProperty(exports,"__esModule",{value:true});var logger_1=__webpack_require__(/*! ../utils/logger */"./src/utils/logger.js");function addGroupId(level,type,id){switch(type){case'audio':if(!level.audioGroupIds){level.audioGroupIds=[];}level.audioGroupIds.push(id);break;case'text':if(!level.textGroupIds){level.textGroupIds=[];}level.textGroupIds.push(id);break;}}exports.addGroupId=addGroupId;function updatePTS(fragments,fromIdx,toIdx){var fragFrom=fragments[fromIdx],fragTo=fragments[toIdx],fragToPTS=fragTo.startPTS;// if we know startPTS[toIdx]
if(Number.isFinite(fragToPTS)){// update fragment duration.
// it helps to fix drifts between playlist reported duration and fragment real duration
if(toIdx>fromIdx){fragFrom.duration=fragToPTS-fragFrom.start;if(fragFrom.duration<0){logger_1.logger.warn("negative duration computed for frag "+fragFrom.sn+",level "+fragFrom.level+", there should be some duration drift between playlist and fragment!");}}else{fragTo.duration=fragFrom.start-fragToPTS;if(fragTo.duration<0){logger_1.logger.warn("negative duration computed for frag "+fragTo.sn+",level "+fragTo.level+", there should be some duration drift between playlist and fragment!");}}}else{// we dont know startPTS[toIdx]
if(toIdx>fromIdx){fragTo.start=fragFrom.start+fragFrom.duration;}else{fragTo.start=Math.max(fragFrom.start-fragTo.duration,0);}}}exports.updatePTS=updatePTS;function updateFragPTSDTS(details,frag,startPTS,endPTS,startDTS,endDTS){// update frag PTS/DTS
var maxStartPTS=startPTS;if(Number.isFinite(frag.startPTS)){// delta PTS between audio and video
var deltaPTS=Math.abs(frag.startPTS-startPTS);if(!Number.isFinite(frag.deltaPTS)){frag.deltaPTS=deltaPTS;}else{frag.deltaPTS=Math.max(deltaPTS,frag.deltaPTS);}maxStartPTS=Math.max(startPTS,frag.startPTS);startPTS=Math.min(startPTS,frag.startPTS);endPTS=Math.max(endPTS,frag.endPTS);startDTS=Math.min(startDTS,frag.startDTS);endDTS=Math.max(endDTS,frag.endDTS);}var drift=startPTS-frag.start;frag.start=frag.startPTS=startPTS;frag.maxStartPTS=maxStartPTS;frag.endPTS=endPTS;frag.startDTS=startDTS;frag.endDTS=endDTS;frag.duration=endPTS-startPTS;var sn=frag.sn;// exit if sn out of range
if(!details||sn<details.startSN||sn>details.endSN){return 0;}var fragIdx,fragments,i;fragIdx=sn-details.startSN;fragments=details.fragments;// update frag reference in fragments array
// rationale is that fragments array might not contain this frag object.
// this will happen if playlist has been refreshed between frag loading and call to updateFragPTSDTS()
// if we don't update frag, we won't be able to propagate PTS info on the playlist
// resulting in invalid sliding computation
fragments[fragIdx]=frag;// adjust fragment PTS/duration from seqnum-1 to frag 0
for(i=fragIdx;i>0;i--){updatePTS(fragments,i,i-1);}// adjust fragment PTS/duration from seqnum to last frag
for(i=fragIdx;i<fragments.length-1;i++){updatePTS(fragments,i,i+1);}details.PTSKnown=true;return drift;}exports.updateFragPTSDTS=updateFragPTSDTS;function mergeDetails(oldDetails,newDetails){// potentially retrieve cached initsegment
if(newDetails.initSegment&&oldDetails.initSegment){newDetails.initSegment=oldDetails.initSegment;}// check if old/new playlists have fragments in common
// loop through overlapping SN and update startPTS , cc, and duration if any found
var ccOffset=0;var PTSFrag;mapFragmentIntersection(oldDetails,newDetails,function(oldFrag,newFrag){ccOffset=oldFrag.cc-newFrag.cc;if(Number.isFinite(oldFrag.startPTS)){newFrag.start=newFrag.startPTS=oldFrag.startPTS;newFrag.endPTS=oldFrag.endPTS;newFrag.duration=oldFrag.duration;newFrag.backtracked=oldFrag.backtracked;newFrag.dropped=oldFrag.dropped;PTSFrag=newFrag;}// PTS is known when there are overlapping segments
newDetails.PTSKnown=true;});if(!newDetails.PTSKnown){return;}if(ccOffset){logger_1.logger.log('discontinuity sliding from playlist, take drift into account');var newFragments=newDetails.fragments;for(var i=0;i<newFragments.length;i++){newFragments[i].cc+=ccOffset;}}// if at least one fragment contains PTS info, recompute PTS information for all fragments
if(PTSFrag){updateFragPTSDTS(newDetails,PTSFrag,PTSFrag.startPTS,PTSFrag.endPTS,PTSFrag.startDTS,PTSFrag.endDTS);}else{// ensure that delta is within oldFragments range
// also adjust sliding in case delta is 0 (we could have old=[50-60] and new=old=[50-61])
// in that case we also need to adjust start offset of all fragments
adjustSliding(oldDetails,newDetails);}// if we are here, it means we have fragments overlapping between
// old and new level. reliable PTS info is thus relying on old level
newDetails.PTSKnown=oldDetails.PTSKnown;}exports.mergeDetails=mergeDetails;function mergeSubtitlePlaylists(oldPlaylist,newPlaylist,referenceStart){if(referenceStart===void 0){referenceStart=0;}var lastIndex=-1;mapFragmentIntersection(oldPlaylist,newPlaylist,function(oldFrag,newFrag,index){newFrag.start=oldFrag.start;lastIndex=index;});var frags=newPlaylist.fragments;if(lastIndex<0){frags.forEach(function(frag){frag.start+=referenceStart;});return;}for(var i=lastIndex+1;i<frags.length;i++){frags[i].start=frags[i-1].start+frags[i-1].duration;}}exports.mergeSubtitlePlaylists=mergeSubtitlePlaylists;function mapFragmentIntersection(oldPlaylist,newPlaylist,intersectionFn){if(!oldPlaylist||!newPlaylist){return;}var start=Math.max(oldPlaylist.startSN,newPlaylist.startSN)-newPlaylist.startSN;var end=Math.min(oldPlaylist.endSN,newPlaylist.endSN)-newPlaylist.startSN;var delta=newPlaylist.startSN-oldPlaylist.startSN;for(var i=start;i<=end;i++){var oldFrag=oldPlaylist.fragments[delta+i];var newFrag=newPlaylist.fragments[i];if(!oldFrag||!newFrag){break;}intersectionFn(oldFrag,newFrag,i);}}exports.mapFragmentIntersection=mapFragmentIntersection;function adjustSliding(oldPlaylist,newPlaylist){var delta=newPlaylist.startSN-oldPlaylist.startSN;var oldFragments=oldPlaylist.fragments;var newFragments=newPlaylist.fragments;if(delta<0||delta>oldFragments.length){return;}for(var i=0;i<newFragments.length;i++){newFragments[i].start+=oldFragments[delta].start;}}exports.adjustSliding=adjustSliding;function computeReloadInterval(currentPlaylist,newPlaylist,lastRequestTime){var reloadInterval=1000*(newPlaylist.averagetargetduration?newPlaylist.averagetargetduration:newPlaylist.targetduration);var minReloadInterval=reloadInterval/2;if(currentPlaylist&&newPlaylist.endSN===currentPlaylist.endSN){// follow HLS Spec, If the client reloads a Playlist file and finds that it has not
// changed then it MUST wait for a period of one-half the target
// duration before retrying.
reloadInterval=minReloadInterval;}if(lastRequestTime){reloadInterval=Math.max(minReloadInterval,reloadInterval-(window.performance.now()-lastRequestTime));}// in any case, don't reload more than half of target duration
return Math.round(reloadInterval);}exports.computeReloadInterval=computeReloadInterval;/* WEBPACK VAR INJECTION */}).call(this,__webpack_require__(/*! ./src/polyfills/number */"./src/polyfills/number.js")["Number"]);/***/},/***/"./src/controller/stream-controller.js":/*!*********************************************!*\
  !*** ./src/controller/stream-controller.js ***!
  \*********************************************//*! no static exports found *//*! ModuleConcatenation bailout: Module is not an ECMAScript module *//***/function srcControllerStreamControllerJs(module,exports,__webpack_require__){"use strict";/* WEBPACK VAR INJECTION */(function(Number){/*
 * Stream Controller
*/var __extends=this&&this.__extends||function(){var extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;}||function(d,b){for(var p in b){if(b.hasOwnProperty(p))d[p]=b[p];}};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};}();Object.defineProperty(exports,"__esModule",{value:true});var binary_search_1=__webpack_require__(/*! ../utils/binary-search */"./src/utils/binary-search.js");var buffer_helper_1=__webpack_require__(/*! ../utils/buffer-helper */"./src/utils/buffer-helper.js");var demuxer_1=__webpack_require__(/*! ../demux/demuxer */"./src/demux/demuxer.js");var events_1=__webpack_require__(/*! ../events */"./src/events.js");var fragment_tracker_1=__webpack_require__(/*! ./fragment-tracker */"./src/controller/fragment-tracker.js");var fragment_1=__webpack_require__(/*! ../loader/fragment */"./src/loader/fragment.js");var playlist_loader_1=__webpack_require__(/*! ../loader/playlist-loader */"./src/loader/playlist-loader.js");var LevelHelper=__webpack_require__(/*! ./level-helper */"./src/controller/level-helper.js");var time_ranges_1=__webpack_require__(/*! ../utils/time-ranges */"./src/utils/time-ranges.js");var errors_1=__webpack_require__(/*! ../errors */"./src/errors.js");var logger_1=__webpack_require__(/*! ../utils/logger */"./src/utils/logger.js");var discontinuities_1=__webpack_require__(/*! ../utils/discontinuities */"./src/utils/discontinuities.js");var fragment_finders_1=__webpack_require__(/*! ./fragment-finders */"./src/controller/fragment-finders.js");var gap_controller_1=__webpack_require__(/*! ./gap-controller */"./src/controller/gap-controller.js");var base_stream_controller_1=__webpack_require__(/*! ./base-stream-controller */"./src/controller/base-stream-controller.js");var TICK_INTERVAL=100;// how often to tick in ms
var StreamController=/** @class */function(_super){__extends(StreamController,_super);function StreamController(hls,fragmentTracker){var _this=_super.call(this,hls,events_1.default.MEDIA_ATTACHED,events_1.default.MEDIA_DETACHING,events_1.default.MANIFEST_LOADING,events_1.default.MANIFEST_PARSED,events_1.default.LEVEL_LOADED,events_1.default.KEY_LOADED,events_1.default.FRAG_LOADED,events_1.default.FRAG_LOAD_EMERGENCY_ABORTED,events_1.default.FRAG_PARSING_INIT_SEGMENT,events_1.default.FRAG_PARSING_DATA,events_1.default.FRAG_PARSED,events_1.default.ERROR,events_1.default.AUDIO_TRACK_SWITCHING,events_1.default.AUDIO_TRACK_SWITCHED,events_1.default.BUFFER_CREATED,events_1.default.BUFFER_APPENDED,events_1.default.BUFFER_FLUSHED)||this;_this.fragmentTracker=fragmentTracker;_this.config=hls.config;_this.audioCodecSwap=false;_this._state=base_stream_controller_1.State.STOPPED;_this.stallReported=false;_this.gapController=null;return _this;}StreamController.prototype.startLoad=function(startPosition){if(this.levels){var lastCurrentTime=this.lastCurrentTime,hls_1=this.hls;this.stopLoad();this.setInterval(TICK_INTERVAL);this.level=-1;this.fragLoadError=0;if(!this.startFragRequested){// determine load level
var startLevel=hls_1.startLevel;if(startLevel===-1){// -1 : guess start Level by doing a bitrate test by loading first fragment of lowest quality level
startLevel=0;this.bitrateTest=true;}// set new level to playlist loader : this will trigger start level load
// hls.nextLoadLevel remains until it is set to a new value or until a new frag is successfully loaded
this.level=hls_1.nextLoadLevel=startLevel;this.loadedmetadata=false;}// if startPosition undefined but lastCurrentTime set, set startPosition to last currentTime
if(lastCurrentTime>0&&startPosition===-1){logger_1.logger.log("override startPosition with lastCurrentTime @"+lastCurrentTime.toFixed(3));startPosition=lastCurrentTime;}this.state=base_stream_controller_1.State.IDLE;this.nextLoadPosition=this.startPosition=this.lastCurrentTime=startPosition;this.tick();}else{this.forceStartLoad=true;this.state=base_stream_controller_1.State.STOPPED;}};StreamController.prototype.stopLoad=function(){this.forceStartLoad=false;_super.prototype.stopLoad.call(this);};StreamController.prototype.doTick=function(){switch(this.state){case base_stream_controller_1.State.BUFFER_FLUSHING:// in buffer flushing state, reset fragLoadError counter
this.fragLoadError=0;break;case base_stream_controller_1.State.IDLE:this._doTickIdle();break;case base_stream_controller_1.State.WAITING_LEVEL:var level=this.levels[this.level];// check if playlist is already loaded
if(level&&level.details){this.state=base_stream_controller_1.State.IDLE;}break;case base_stream_controller_1.State.FRAG_LOADING_WAITING_RETRY:var now=window.performance.now();var retryDate=this.retryDate;// if current time is gt than retryDate, or if media seeking let's switch to IDLE state to retry loading
if(!retryDate||now>=retryDate||this.media&&this.media.seeking){logger_1.logger.log('mediaController: retryDate reached, switch back to IDLE state');this.state=base_stream_controller_1.State.IDLE;}break;case base_stream_controller_1.State.ERROR:case base_stream_controller_1.State.STOPPED:case base_stream_controller_1.State.FRAG_LOADING:case base_stream_controller_1.State.PARSING:case base_stream_controller_1.State.PARSED:case base_stream_controller_1.State.ENDED:break;default:break;}// check buffer
this._checkBuffer();// check/update current fragment
this._checkFragmentChanged();};// Ironically the "idle" state is the on we do the most logic in it seems ....
// NOTE: Maybe we could rather schedule a check for buffer length after half of the currently
//       played segment, or on pause/play/seek instead of naively checking every 100ms?
StreamController.prototype._doTickIdle=function(){var hls=this.hls,config=hls.config,media=this.media;// if start level not parsed yet OR
// if video not attached AND start fragment already requested OR start frag prefetch disable
// exit loop, as we either need more info (level not parsed) or we need media to be attached to load new fragment
if(this.levelLastLoaded===undefined||!media&&(this.startFragRequested||!config.startFragPrefetch)){return;}// if we have not yet loaded any fragment, start loading from start position
var pos;if(this.loadedmetadata){pos=media.currentTime;}else{pos=this.nextLoadPosition;}// determine next load level
var level=hls.nextLoadLevel,levelInfo=this.levels[level];if(!levelInfo){return;}var levelBitrate=levelInfo.bitrate,maxBufLen;// compute max Buffer Length that we could get from this load level, based on level bitrate. don't buffer more than 60 MB and more than 30s
if(levelBitrate){maxBufLen=Math.max(8*config.maxBufferSize/levelBitrate,config.maxBufferLength);}else{maxBufLen=config.maxBufferLength;}maxBufLen=Math.min(maxBufLen,config.maxMaxBufferLength);// determine next candidate fragment to be loaded, based on current position and end of buffer position
// ensure up to `config.maxMaxBufferLength` of buffer upfront
var bufferInfo=buffer_helper_1.BufferHelper.bufferInfo(this.mediaBuffer?this.mediaBuffer:media,pos,config.maxBufferHole),bufferLen=bufferInfo.len;// Stay idle if we are still with buffer margins
if(bufferLen>=maxBufLen){return;}// if buffer length is less than maxBufLen try to load a new fragment ...
logger_1.logger.trace("buffer length of "+bufferLen.toFixed(3)+" is below max of "+maxBufLen.toFixed(3)+". checking for more payload ...");// set next load level : this will trigger a playlist load if needed
this.level=hls.nextLoadLevel=level;var levelDetails=levelInfo.details;// if level info not retrieved yet, switch state and wait for level retrieval
// if live playlist, ensure that new playlist has been refreshed to avoid loading/try to load
// a useless and outdated fragment (that might even introduce load error if it is already out of the live playlist)
if(!levelDetails||levelDetails.live&&this.levelLastLoaded!==level){this.state=base_stream_controller_1.State.WAITING_LEVEL;return;}if(this._streamEnded(bufferInfo,levelDetails)){var data={};if(this.altAudio){data.type='video';}this.hls.trigger(events_1.default.BUFFER_EOS,data);this.state=base_stream_controller_1.State.ENDED;return;}// if we have the levelDetails for the selected variant, lets continue enrichen our stream (load keys/fragments or trigger EOS, etc..)
this._fetchPayloadOrEos(pos,bufferInfo,levelDetails);};StreamController.prototype._fetchPayloadOrEos=function(pos,bufferInfo,levelDetails){var fragPrevious=this.fragPrevious,level=this.level,fragments=levelDetails.fragments,fragLen=fragments.length;// empty playlist
if(fragLen===0){return;}// find fragment index, contiguous with end of buffer position
var start=fragments[0].start,end=fragments[fragLen-1].start+fragments[fragLen-1].duration,bufferEnd=bufferInfo.end,frag;if(levelDetails.initSegment&&!levelDetails.initSegment.data){frag=levelDetails.initSegment;}else{// in case of live playlist we need to ensure that requested position is not located before playlist start
if(levelDetails.live){var initialLiveManifestSize=this.config.initialLiveManifestSize;if(fragLen<initialLiveManifestSize){logger_1.logger.warn("Can not start playback of a level, reason: not enough fragments "+fragLen+" < "+initialLiveManifestSize);return;}frag=this._ensureFragmentAtLivePoint(levelDetails,bufferEnd,start,end,fragPrevious,fragments,fragLen);// if it explicitely returns null don't load any fragment and exit function now
if(frag===null){return;}}else{// VoD playlist: if bufferEnd before start of playlist, load first fragment
if(bufferEnd<start){frag=fragments[0];}}}if(!frag){frag=this._findFragment(start,fragPrevious,fragLen,fragments,bufferEnd,end,levelDetails);}if(frag){if(frag.encrypted){logger_1.logger.log("Loading key for "+frag.sn+" of ["+levelDetails.startSN+" ,"+levelDetails.endSN+"],level "+level);this._loadKey(frag);}else{logger_1.logger.log("Loading "+frag.sn+" of ["+levelDetails.startSN+" ,"+levelDetails.endSN+"],level "+level+", currentTime:"+pos.toFixed(3)+",bufferEnd:"+bufferEnd.toFixed(3));this._loadFragment(frag);}}};StreamController.prototype._ensureFragmentAtLivePoint=function(levelDetails,bufferEnd,start,end,fragPrevious,fragments,fragLen){var config=this.hls.config,media=this.media;var frag;// check if requested position is within seekable boundaries :
// logger.log(`start/pos/bufEnd/seeking:${start.toFixed(3)}/${pos.toFixed(3)}/${bufferEnd.toFixed(3)}/${this.media.seeking}`);
var maxLatency=config.liveMaxLatencyDuration!==undefined?config.liveMaxLatencyDuration:config.liveMaxLatencyDurationCount*levelDetails.targetduration;if(bufferEnd<Math.max(start-config.maxFragLookUpTolerance,end-maxLatency)){var liveSyncPosition=this.liveSyncPosition=this.computeLivePosition(start,levelDetails);logger_1.logger.log("buffer end: "+bufferEnd.toFixed(3)+" is located too far from the end of live sliding playlist, reset currentTime to : "+liveSyncPosition.toFixed(3));bufferEnd=liveSyncPosition;if(media&&media.readyState&&media.duration>liveSyncPosition){media.currentTime=liveSyncPosition;}this.nextLoadPosition=liveSyncPosition;}// if end of buffer greater than live edge, don't load any fragment
// this could happen if live playlist intermittently slides in the past.
// level 1 loaded [182580161,182580167]
// level 1 loaded [182580162,182580169]
// Loading 182580168 of [182580162 ,182580169],level 1 ..
// Loading 182580169 of [182580162 ,182580169],level 1 ..
// level 1 loaded [182580162,182580168] <============= here we should have bufferEnd > end. in that case break to avoid reloading 182580168
// level 1 loaded [182580164,182580171]
//
// don't return null in case media not loaded yet (readystate === 0)
if(levelDetails.PTSKnown&&bufferEnd>end&&media&&media.readyState){return null;}if(this.startFragRequested&&!levelDetails.PTSKnown){/* we are switching level on live playlist, but we don't have any PTS info for that quality level ...
               try to load frag matching with next SN.
               even if SN are not synchronized between playlists, loading this frag will help us
               compute playlist sliding and find the right one after in case it was not the right consecutive one */if(fragPrevious){if(levelDetails.hasProgramDateTime){// Relies on PDT in order to switch bitrates (Support EXT-X-DISCONTINUITY without EXT-X-DISCONTINUITY-SEQUENCE)
logger_1.logger.log("live playlist, switching playlist, load frag with same PDT: "+fragPrevious.programDateTime);frag=fragment_finders_1.findFragmentByPDT(fragments,fragPrevious.endProgramDateTime,config.maxFragLookUpTolerance);}else{// Uses buffer and sequence number to calculate switch segment (required if using EXT-X-DISCONTINUITY-SEQUENCE)
var targetSN=fragPrevious.sn+1;if(targetSN>=levelDetails.startSN&&targetSN<=levelDetails.endSN){var fragNext=fragments[targetSN-levelDetails.startSN];if(fragPrevious.cc===fragNext.cc){frag=fragNext;logger_1.logger.log("live playlist, switching playlist, load frag with next SN: "+frag.sn);}}// next frag SN not available (or not with same continuity counter)
// look for a frag sharing the same CC
if(!frag){frag=binary_search_1.default.search(fragments,function(frag){return fragPrevious.cc-frag.cc;});if(frag){logger_1.logger.log("live playlist, switching playlist, load frag with same CC: "+frag.sn);}}}}if(!frag){/* we have no idea about which fragment should be loaded.
                   so let's load mid fragment. it will help computing playlist sliding and find the right one
                */frag=fragments[Math.min(fragLen-1,Math.round(fragLen/2))];logger_1.logger.log("live playlist, switching playlist, unknown, load middle frag : "+frag.sn);}}return frag;};StreamController.prototype._findFragment=function(start,fragPrevious,fragLen,fragments,bufferEnd,end,levelDetails){var config=this.hls.config;var frag;if(bufferEnd<end){var lookupTolerance=bufferEnd>end-config.maxFragLookUpTolerance?0:config.maxFragLookUpTolerance;// Remove the tolerance if it would put the bufferEnd past the actual end of stream
// Uses buffer and sequence number to calculate switch segment (required if using EXT-X-DISCONTINUITY-SEQUENCE)
frag=fragment_finders_1.findFragmentByPTS(fragPrevious,fragments,bufferEnd,lookupTolerance);}else{// reach end of playlist
frag=fragments[fragLen-1];}if(frag){var curSNIdx=frag.sn-levelDetails.startSN;var sameLevel=fragPrevious&&frag.level===fragPrevious.level;var prevFrag=fragments[curSNIdx-1];var nextFrag=fragments[curSNIdx+1];// logger.log('find SN matching with pos:' +  bufferEnd + ':' + frag.sn);
if(fragPrevious&&frag.sn===fragPrevious.sn){if(sameLevel&&!frag.backtracked){if(frag.sn<levelDetails.endSN){var deltaPTS=fragPrevious.deltaPTS;// if there is a significant delta between audio and video, larger than max allowed hole,
// and if previous remuxed fragment did not start with a keyframe. (fragPrevious.dropped)
// let's try to load previous fragment again to get last keyframe
// then we will reload again current fragment (that way we should be able to fill the buffer hole ...)
if(deltaPTS&&deltaPTS>config.maxBufferHole&&fragPrevious.dropped&&curSNIdx){frag=prevFrag;logger_1.logger.warn('SN just loaded, with large PTS gap between audio and video, maybe frag is not starting with a keyframe ? load previous one to try to overcome this');}else{frag=nextFrag;logger_1.logger.log("SN just loaded, load next one: "+frag.sn,frag);}}else{frag=null;}}else if(frag.backtracked){// Only backtrack a max of 1 consecutive fragment to prevent sliding back too far when little or no frags start with keyframes
if(nextFrag&&nextFrag.backtracked){logger_1.logger.warn("Already backtracked from fragment "+nextFrag.sn+", will not backtrack to fragment "+frag.sn+". Loading fragment "+nextFrag.sn);frag=nextFrag;}else{// If a fragment has dropped frames and it's in a same level/sequence, load the previous fragment to try and find the keyframe
// Reset the dropped count now since it won't be reset until we parse the fragment again, which prevents infinite backtracking on the same segment
logger_1.logger.warn('Loaded fragment with dropped frames, backtracking 1 segment to find a keyframe');frag.dropped=0;if(prevFrag){frag=prevFrag;frag.backtracked=true;}else if(curSNIdx){// can't backtrack on very first fragment
frag=null;}}}}}return frag;};StreamController.prototype._loadKey=function(frag){this.state=base_stream_controller_1.State.KEY_LOADING;this.hls.trigger(events_1.default.KEY_LOADING,{frag:frag});};StreamController.prototype._loadFragment=function(frag){// Check if fragment is not loaded
var fragState=this.fragmentTracker.getState(frag);this.fragCurrent=frag;this.startFragRequested=true;// Don't update nextLoadPosition for fragments which are not buffered
if(Number.isFinite(frag.sn)&&!frag.bitrateTest){this.nextLoadPosition=frag.start+frag.duration;}// Allow backtracked fragments to load
if(frag.backtracked||fragState===fragment_tracker_1.FragmentState.NOT_LOADED||fragState===fragment_tracker_1.FragmentState.PARTIAL){frag.autoLevel=this.hls.autoLevelEnabled;frag.bitrateTest=this.bitrateTest;this.hls.trigger(events_1.default.FRAG_LOADING,{frag:frag});// lazy demuxer init, as this could take some time ... do it during frag loading
if(!this.demuxer){this.demuxer=new demuxer_1.default(this.hls,'main');}this.state=base_stream_controller_1.State.FRAG_LOADING;}else if(fragState===fragment_tracker_1.FragmentState.APPENDING){// Lower the buffer size and try again
if(this._reduceMaxBufferLength(frag.duration)){this.fragmentTracker.removeFragment(frag);}}};Object.defineProperty(StreamController.prototype,"state",{get:function get(){return this._state;},set:function set(nextState){if(this.state!==nextState){var previousState=this.state;this._state=nextState;logger_1.logger.log("main stream:"+previousState+"->"+nextState);this.hls.trigger(events_1.default.STREAM_STATE_TRANSITION,{previousState:previousState,nextState:nextState});}},enumerable:true,configurable:true});StreamController.prototype.getBufferedFrag=function(position){return this.fragmentTracker.getBufferedFrag(position,playlist_loader_1.default.LevelType.MAIN);};Object.defineProperty(StreamController.prototype,"currentLevel",{get:function get(){var media=this.media;if(media){var frag=this.getBufferedFrag(media.currentTime);if(frag){return frag.level;}}return-1;},enumerable:true,configurable:true});Object.defineProperty(StreamController.prototype,"nextBufferedFrag",{get:function get(){var media=this.media;if(media){// first get end range of current fragment
return this.followingBufferedFrag(this.getBufferedFrag(media.currentTime));}else{return null;}},enumerable:true,configurable:true});StreamController.prototype.followingBufferedFrag=function(frag){if(frag){// try to get range of next fragment (500ms after this range)
return this.getBufferedFrag(frag.endPTS+0.5);}return null;};Object.defineProperty(StreamController.prototype,"nextLevel",{get:function get(){var frag=this.nextBufferedFrag;if(frag){return frag.level;}else{return-1;}},enumerable:true,configurable:true});StreamController.prototype._checkFragmentChanged=function(){var fragPlayingCurrent,currentTime,video=this.media;if(video&&video.readyState&&video.seeking===false){currentTime=video.currentTime;/* if video element is in seeked state, currentTime can only increase.
              (assuming that playback rate is positive ...)
              As sometimes currentTime jumps back to zero after a
              media decode error, check this, to avoid seeking back to
              wrong position after a media decode error
            */if(currentTime>this.lastCurrentTime){this.lastCurrentTime=currentTime;}if(buffer_helper_1.BufferHelper.isBuffered(video,currentTime)){fragPlayingCurrent=this.getBufferedFrag(currentTime);}else if(buffer_helper_1.BufferHelper.isBuffered(video,currentTime+0.1)){/* ensure that FRAG_CHANGED event is triggered at startup,
                  when first video frame is displayed and playback is paused.
                  add a tolerance of 100ms, in case current position is not buffered,
                  check if current pos+100ms is buffered and use that buffer range
                  for FRAG_CHANGED event reporting */fragPlayingCurrent=this.getBufferedFrag(currentTime+0.1);}if(fragPlayingCurrent){var fragPlaying=fragPlayingCurrent;if(fragPlaying!==this.fragPlaying){this.hls.trigger(events_1.default.FRAG_CHANGED,{frag:fragPlaying});var fragPlayingLevel=fragPlaying.level;if(!this.fragPlaying||this.fragPlaying.level!==fragPlayingLevel){this.hls.trigger(events_1.default.LEVEL_SWITCHED,{level:fragPlayingLevel});}this.fragPlaying=fragPlaying;}}}};/*
      on immediate level switch :
       - pause playback if playing
       - cancel any pending load request
       - and trigger a buffer flush
    */StreamController.prototype.immediateLevelSwitch=function(){logger_1.logger.log('immediateLevelSwitch');if(!this.immediateSwitch){this.immediateSwitch=true;var media=this.media,previouslyPaused=void 0;if(media){previouslyPaused=media.paused;media.pause();}else{// don't restart playback after instant level switch in case media not attached
previouslyPaused=true;}this.previouslyPaused=previouslyPaused;}var fragCurrent=this.fragCurrent;if(fragCurrent&&fragCurrent.loader){fragCurrent.loader.abort();}this.fragCurrent=null;// flush everything
this.flushMainBuffer(0,Number.POSITIVE_INFINITY);};/**
     * on immediate level switch end, after new fragment has been buffered:
     * - nudge video decoder by slightly adjusting video currentTime (if currentTime buffered)
     * - resume the playback if needed
     */StreamController.prototype.immediateLevelSwitchEnd=function(){var media=this.media;if(media&&media.buffered.length){this.immediateSwitch=false;if(buffer_helper_1.BufferHelper.isBuffered(media,media.currentTime)){// only nudge if currentTime is buffered
media.currentTime-=0.0001;}if(!this.previouslyPaused){media.play();}}};/**
     * try to switch ASAP without breaking video playback:
     * in order to ensure smooth but quick level switching,
     * we need to find the next flushable buffer range
     * we should take into account new segment fetch time
     */StreamController.prototype.nextLevelSwitch=function(){var media=this.media;// ensure that media is defined and that metadata are available (to retrieve currentTime)
if(media&&media.readyState){var fetchdelay=void 0,fragPlayingCurrent=void 0,nextBufferedFrag=void 0;fragPlayingCurrent=this.getBufferedFrag(media.currentTime);if(fragPlayingCurrent&&fragPlayingCurrent.startPTS>1){// flush buffer preceding current fragment (flush until current fragment start offset)
// minus 1s to avoid video freezing, that could happen if we flush keyframe of current video ...
this.flushMainBuffer(0,fragPlayingCurrent.startPTS-1);}if(!media.paused){// add a safety delay of 1s
var nextLevelId=this.hls.nextLoadLevel,nextLevel=this.levels[nextLevelId],fragLastKbps=this.fragLastKbps;if(fragLastKbps&&this.fragCurrent){fetchdelay=this.fragCurrent.duration*nextLevel.bitrate/(1000*fragLastKbps)+1;}else{fetchdelay=0;}}else{fetchdelay=0;}// logger.log('fetchdelay:'+fetchdelay);
// find buffer range that will be reached once new fragment will be fetched
nextBufferedFrag=this.getBufferedFrag(media.currentTime+fetchdelay);if(nextBufferedFrag){// we can flush buffer range following this one without stalling playback
nextBufferedFrag=this.followingBufferedFrag(nextBufferedFrag);if(nextBufferedFrag){// if we are here, we can also cancel any loading/demuxing in progress, as they are useless
var fragCurrent=this.fragCurrent;if(fragCurrent&&fragCurrent.loader){fragCurrent.loader.abort();}this.fragCurrent=null;// start flush position is the start PTS of next buffered frag.
// we use frag.naxStartPTS which is max(audio startPTS, video startPTS).
// in case there is a small PTS Delta between audio and video, using maxStartPTS avoids flushing last samples from current fragment
this.flushMainBuffer(nextBufferedFrag.maxStartPTS,Number.POSITIVE_INFINITY);}}}};StreamController.prototype.flushMainBuffer=function(startOffset,endOffset){this.state=base_stream_controller_1.State.BUFFER_FLUSHING;var flushScope={startOffset:startOffset,endOffset:endOffset};// if alternate audio tracks are used, only flush video, otherwise flush everything
if(this.altAudio){flushScope.type='video';}this.hls.trigger(events_1.default.BUFFER_FLUSHING,flushScope);};StreamController.prototype.onMediaAttached=function(data){var media=this.media=this.mediaBuffer=data.media;this.onvseeking=this.onMediaSeeking.bind(this);this.onvseeked=this.onMediaSeeked.bind(this);this.onvended=this.onMediaEnded.bind(this);media.addEventListener('seeking',this.onvseeking);media.addEventListener('seeked',this.onvseeked);media.addEventListener('ended',this.onvended);var config=this.config;if(this.levels&&config.autoStartLoad){this.hls.startLoad(config.startPosition);}this.gapController=new gap_controller_1.default(config,media,this.fragmentTracker,this.hls);};StreamController.prototype.onMediaDetaching=function(){var media=this.media;if(media&&media.ended){logger_1.logger.log('MSE detaching and video ended, reset startPosition');this.startPosition=this.lastCurrentTime=0;}// reset fragment backtracked flag
var levels=this.levels;if(levels){levels.forEach(function(level){if(level.details){level.details.fragments.forEach(function(fragment){fragment.backtracked=undefined;});}});}// remove video listeners
if(media){media.removeEventListener('seeking',this.onvseeking);media.removeEventListener('seeked',this.onvseeked);media.removeEventListener('ended',this.onvended);this.onvseeking=this.onvseeked=this.onvended=null;}this.media=this.mediaBuffer=null;this.loadedmetadata=false;this.stopLoad();};StreamController.prototype.onMediaSeeked=function(){var media=this.media,currentTime=media?media.currentTime:undefined;if(Number.isFinite(currentTime)){logger_1.logger.log("media seeked to "+currentTime.toFixed(3));}// tick to speed up FRAGMENT_PLAYING triggering
this.tick();};StreamController.prototype.onManifestLoading=function(){// reset buffer on manifest loading
logger_1.logger.log('trigger BUFFER_RESET');this.hls.trigger(events_1.default.BUFFER_RESET);this.fragmentTracker.removeAllFragments();this.stalled=false;this.startPosition=this.lastCurrentTime=0;};StreamController.prototype.onManifestParsed=function(data){var aac=false,heaac=false,codec;data.levels.forEach(function(level){// detect if we have different kind of audio codecs used amongst playlists
codec=level.audioCodec;if(codec){if(codec.indexOf('mp4a.40.2')!==-1){aac=true;}if(codec.indexOf('mp4a.40.5')!==-1){heaac=true;}}});this.audioCodecSwitch=aac&&heaac;if(this.audioCodecSwitch){logger_1.logger.log('both AAC/HE-AAC audio found in levels; declaring level codec as HE-AAC');}this.levels=data.levels;this.startFragRequested=false;var config=this.config;if(config.autoStartLoad||this.forceStartLoad){this.hls.startLoad(config.startPosition);}};StreamController.prototype.onLevelLoaded=function(data){var newDetails=data.details;var newLevelId=data.level;var lastLevel=this.levels[this.levelLastLoaded];var curLevel=this.levels[newLevelId];var duration=newDetails.totalduration;var sliding=0;logger_1.logger.log("level "+newLevelId+" loaded ["+newDetails.startSN+","+newDetails.endSN+"],duration:"+duration);if(newDetails.live){var curDetails=curLevel.details;if(curDetails&&newDetails.fragments.length>0){// we already have details for that level, merge them
LevelHelper.mergeDetails(curDetails,newDetails);sliding=newDetails.fragments[0].start;this.liveSyncPosition=this.computeLivePosition(sliding,curDetails);if(newDetails.PTSKnown&&Number.isFinite(sliding)){logger_1.logger.log("live playlist sliding:"+sliding.toFixed(3));}else{logger_1.logger.log('live playlist - outdated PTS, unknown sliding');discontinuities_1.alignStream(this.fragPrevious,lastLevel,newDetails);}}else{logger_1.logger.log('live playlist - first load, unknown sliding');newDetails.PTSKnown=false;discontinuities_1.alignStream(this.fragPrevious,lastLevel,newDetails);}}else{newDetails.PTSKnown=false;}// override level info
curLevel.details=newDetails;this.levelLastLoaded=newLevelId;this.hls.trigger(events_1.default.LEVEL_UPDATED,{details:newDetails,level:newLevelId});if(this.startFragRequested===false){// compute start position if set to -1. use it straight away if value is defined
if(this.startPosition===-1||this.lastCurrentTime===-1){// first, check if start time offset has been set in playlist, if yes, use this value
var startTimeOffset=newDetails.startTimeOffset;if(Number.isFinite(startTimeOffset)){if(startTimeOffset<0){logger_1.logger.log("negative start time offset "+startTimeOffset+", count from end of last fragment");startTimeOffset=sliding+duration+startTimeOffset;}logger_1.logger.log("start time offset found in playlist, adjust startPosition to "+startTimeOffset);this.startPosition=startTimeOffset;}else{// if live playlist, set start position to be fragment N-this.config.liveSyncDurationCount (usually 3)
if(newDetails.live){this.startPosition=this.computeLivePosition(sliding,newDetails);logger_1.logger.log("configure startPosition to "+this.startPosition);}else{this.startPosition=0;}}this.lastCurrentTime=this.startPosition;}this.nextLoadPosition=this.startPosition;}// only switch batck to IDLE state if we were waiting for level to start downloading a new fragment
if(this.state===base_stream_controller_1.State.WAITING_LEVEL){this.state=base_stream_controller_1.State.IDLE;}// trigger handler right now
this.tick();};StreamController.prototype.onKeyLoaded=function(){if(this.state===base_stream_controller_1.State.KEY_LOADING){this.state=base_stream_controller_1.State.IDLE;this.tick();}};StreamController.prototype.onFragLoaded=function(data){var _a=this,fragCurrent=_a.fragCurrent,hls=_a.hls,levels=_a.levels,media=_a.media;var fragLoaded=data.frag;if(this.state===base_stream_controller_1.State.FRAG_LOADING&&fragCurrent&&fragLoaded.type==='main'&&fragLoaded.level===fragCurrent.level&&fragLoaded.sn===fragCurrent.sn){var stats=data.stats;var currentLevel=levels[fragCurrent.level];var details=currentLevel.details;// reset frag bitrate test in any case after frag loaded event
// if this frag was loaded to perform a bitrate test AND if hls.nextLoadLevel is greater than 0
// then this means that we should be able to load a fragment at a higher quality level
this.bitrateTest=false;this.stats=stats;logger_1.logger.log("Loaded "+fragCurrent.sn+" of ["+details.startSN+" ,"+details.endSN+"],level "+fragCurrent.level);if(fragLoaded.bitrateTest&&hls.nextLoadLevel){// switch back to IDLE state ... we just loaded a fragment to determine adequate start bitrate and initialize autoswitch algo
this.state=base_stream_controller_1.State.IDLE;this.startFragRequested=false;stats.tparsed=stats.tbuffered=window.performance.now();hls.trigger(events_1.default.FRAG_BUFFERED,{stats:stats,frag:fragCurrent,id:'main'});this.tick();}else if(fragLoaded.sn==='initSegment'){this.state=base_stream_controller_1.State.IDLE;stats.tparsed=stats.tbuffered=window.performance.now();details.initSegment.data=data.payload;hls.trigger(events_1.default.FRAG_BUFFERED,{stats:stats,frag:fragCurrent,id:'main'});this.tick();}else{logger_1.logger.log("Parsing "+fragCurrent.sn+" of ["+details.startSN+" ,"+details.endSN+"],level "+fragCurrent.level+", cc "+fragCurrent.cc);this.state=base_stream_controller_1.State.PARSING;this.pendingBuffering=true;this.appended=false;// Bitrate test frags are not usually buffered so the fragment tracker ignores them. If Hls.js decides to buffer
// it (and therefore ends up at this line), then the fragment tracker needs to be manually informed.
if(fragLoaded.bitrateTest){fragLoaded.bitrateTest=false;this.fragmentTracker.onFragLoaded({frag:fragLoaded});}// time Offset is accurate if level PTS is known, or if playlist is not sliding (not live) and if media is not seeking (this is to overcome potential timestamp drifts between playlists and fragments)
var accurateTimeOffset=!(media&&media.seeking)&&(details.PTSKnown||!details.live);var initSegmentData=details.initSegment?details.initSegment.data:[];var audioCodec=this._getAudioCodec(currentLevel);// transmux the MPEG-TS data to ISO-BMFF segments
var demuxer=this.demuxer=this.demuxer||new demuxer_1.default(this.hls,'main');demuxer.push(data.payload,initSegmentData,audioCodec,currentLevel.videoCodec,fragCurrent,details.totalduration,accurateTimeOffset);}}this.fragLoadError=0;};StreamController.prototype.onFragParsingInitSegment=function(data){var fragCurrent=this.fragCurrent;var fragNew=data.frag;if(fragCurrent&&data.id==='main'&&fragNew.sn===fragCurrent.sn&&fragNew.level===fragCurrent.level&&this.state===base_stream_controller_1.State.PARSING){var tracks=data.tracks,trackName=void 0,track=void 0;// if audio track is expected to come from audio stream controller, discard any coming from main
if(tracks.audio&&this.altAudio){delete tracks.audio;}// include levelCodec in audio and video tracks
track=tracks.audio;if(track){var audioCodec=this.levels[this.level].audioCodec,ua=navigator.userAgent.toLowerCase();if(audioCodec&&this.audioCodecSwap){logger_1.logger.log('swapping playlist audio codec');if(audioCodec.indexOf('mp4a.40.5')!==-1){audioCodec='mp4a.40.2';}else{audioCodec='mp4a.40.5';}}// in case AAC and HE-AAC audio codecs are signalled in manifest
// force HE-AAC , as it seems that most browsers prefers that way,
// except for mono streams OR on FF
// these conditions might need to be reviewed ...
if(this.audioCodecSwitch){// don't force HE-AAC if mono stream
if(track.metadata.channelCount!==1&&// don't force HE-AAC if firefox
ua.indexOf('firefox')===-1){audioCodec='mp4a.40.5';}}// HE-AAC is broken on Android, always signal audio codec as AAC even if variant manifest states otherwise
if(ua.indexOf('android')!==-1&&track.container!=='audio/mpeg'){// Exclude mpeg audio
audioCodec='mp4a.40.2';logger_1.logger.log("Android: force audio codec to "+audioCodec);}track.levelCodec=audioCodec;track.id=data.id;}track=tracks.video;if(track){track.levelCodec=this.levels[this.level].videoCodec;track.id=data.id;}this.hls.trigger(events_1.default.BUFFER_CODECS,tracks);// loop through tracks that are going to be provided to bufferController
for(trackName in tracks){track=tracks[trackName];logger_1.logger.log("main track:"+trackName+",container:"+track.container+",codecs[level/parsed]=["+track.levelCodec+"/"+track.codec+"]");var initSegment=track.initSegment;if(initSegment){this.appended=true;// arm pending Buffering flag before appending a segment
this.pendingBuffering=true;this.hls.trigger(events_1.default.BUFFER_APPENDING,{type:trackName,data:initSegment,parent:'main',content:'initSegment'});}}// trigger handler right now
this.tick();}};StreamController.prototype.onFragParsingData=function(data){var _this=this;var fragCurrent=this.fragCurrent;var fragNew=data.frag;if(fragCurrent&&data.id==='main'&&fragNew.sn===fragCurrent.sn&&fragNew.level===fragCurrent.level&&!(data.type==='audio'&&this.altAudio)&&// filter out main audio if audio track is loaded through audio stream controller
this.state===base_stream_controller_1.State.PARSING){var level=this.levels[this.level],frag=fragCurrent;if(!Number.isFinite(data.endPTS)){data.endPTS=data.startPTS+fragCurrent.duration;data.endDTS=data.startDTS+fragCurrent.duration;}if(data.hasAudio===true){frag.addElementaryStream(fragment_1.default.ElementaryStreamTypes.AUDIO);}if(data.hasVideo===true){frag.addElementaryStream(fragment_1.default.ElementaryStreamTypes.VIDEO);}logger_1.logger.log("Parsed "+data.type+",PTS:["+data.startPTS.toFixed(3)+","+data.endPTS.toFixed(3)+"],DTS:["+data.startDTS.toFixed(3)+"/"+data.endDTS.toFixed(3)+"],nb:"+data.nb+",dropped:"+(data.dropped||0));// Detect gaps in a fragment  and try to fix it by finding a keyframe in the previous fragment (see _findFragments)
if(data.type==='video'){frag.dropped=data.dropped;if(frag.dropped){if(!frag.backtracked){var levelDetails=level.details;if(levelDetails&&frag.sn===levelDetails.startSN){logger_1.logger.warn('missing video frame(s) on first frag, appending with gap',frag.sn);}else{logger_1.logger.warn('missing video frame(s), backtracking fragment',frag.sn);// Return back to the IDLE state without appending to buffer
// Causes findFragments to backtrack a segment and find the keyframe
// Audio fragments arriving before video sets the nextLoadPosition, causing _findFragments to skip the backtracked fragment
this.fragmentTracker.removeFragment(frag);frag.backtracked=true;this.nextLoadPosition=data.startPTS;this.state=base_stream_controller_1.State.IDLE;this.fragPrevious=frag;this.tick();return;}}else{logger_1.logger.warn('Already backtracked on this fragment, appending with the gap',frag.sn);}}else{// Only reset the backtracked flag if we've loaded the frag without any dropped frames
frag.backtracked=false;}}var drift=LevelHelper.updateFragPTSDTS(level.details,frag,data.startPTS,data.endPTS,data.startDTS,data.endDTS),hls_2=this.hls;hls_2.trigger(events_1.default.LEVEL_PTS_UPDATED,{details:level.details,level:this.level,drift:drift,type:data.type,start:data.startPTS,end:data.endPTS});// has remuxer dropped video frames located before first keyframe ?
[data.data1,data.data2].forEach(function(buffer){// only append in PARSING state (rationale is that an appending error could happen synchronously on first segment appending)
// in that case it is useless to append following segments
if(buffer&&buffer.length&&_this.state===base_stream_controller_1.State.PARSING){_this.appended=true;// arm pending Buffering flag before appending a segment
_this.pendingBuffering=true;hls_2.trigger(events_1.default.BUFFER_APPENDING,{type:data.type,data:buffer,parent:'main',content:'data'});}});// trigger handler right now
this.tick();}};StreamController.prototype.onFragParsed=function(data){var fragCurrent=this.fragCurrent;var fragNew=data.frag;if(fragCurrent&&data.id==='main'&&fragNew.sn===fragCurrent.sn&&fragNew.level===fragCurrent.level&&this.state===base_stream_controller_1.State.PARSING){this.stats.tparsed=window.performance.now();this.state=base_stream_controller_1.State.PARSED;this._checkAppendedParsed();}};StreamController.prototype.onAudioTrackSwitching=function(data){// if any URL found on new audio track, it is an alternate audio track
var altAudio=!!data.url,trackId=data.id;// if we switch on main audio, ensure that main fragment scheduling is synced with media.buffered
// don't do anything if we switch to alt audio: audio stream controller is handling it.
// we will just have to change buffer scheduling on audioTrackSwitched
if(!altAudio){if(this.mediaBuffer!==this.media){logger_1.logger.log('switching on main audio, use media.buffered to schedule main fragment loading');this.mediaBuffer=this.media;var fragCurrent=this.fragCurrent;// we need to refill audio buffer from main: cancel any frag loading to speed up audio switch
if(fragCurrent.loader){logger_1.logger.log('switching to main audio track, cancel main fragment load');fragCurrent.loader.abort();}this.fragCurrent=null;this.fragPrevious=null;// destroy demuxer to force init segment generation (following audio switch)
if(this.demuxer){this.demuxer.destroy();this.demuxer=null;}// switch to IDLE state to load new fragment
this.state=base_stream_controller_1.State.IDLE;}var hls_3=this.hls;// switching to main audio, flush all audio and trigger track switched
hls_3.trigger(events_1.default.BUFFER_FLUSHING,{startOffset:0,endOffset:Number.POSITIVE_INFINITY,type:'audio'});hls_3.trigger(events_1.default.AUDIO_TRACK_SWITCHED,{id:trackId});this.altAudio=false;}};StreamController.prototype.onAudioTrackSwitched=function(data){var trackId=data.id,altAudio=!!this.hls.audioTracks[trackId].url;if(altAudio){var videoBuffer=this.videoBuffer;// if we switched on alternate audio, ensure that main fragment scheduling is synced with video sourcebuffer buffered
if(videoBuffer&&this.mediaBuffer!==videoBuffer){logger_1.logger.log('switching on alternate audio, use video.buffered to schedule main fragment loading');this.mediaBuffer=videoBuffer;}}this.altAudio=altAudio;this.tick();};StreamController.prototype.onBufferCreated=function(data){var tracks=data.tracks,mediaTrack,name,alternate=false;for(var type in tracks){var track=tracks[type];if(track.id==='main'){name=type;mediaTrack=track;// keep video source buffer reference
if(type==='video'){this.videoBuffer=tracks[type].buffer;}}else{alternate=true;}}if(alternate&&mediaTrack){logger_1.logger.log("alternate track found, use "+name+".buffered to schedule main fragment loading");this.mediaBuffer=mediaTrack.buffer;}else{this.mediaBuffer=this.media;}};StreamController.prototype.onBufferAppended=function(data){if(data.parent==='main'){var state=this.state;if(state===base_stream_controller_1.State.PARSING||state===base_stream_controller_1.State.PARSED){// check if all buffers have been appended
this.pendingBuffering=data.pending>0;this._checkAppendedParsed();}}};StreamController.prototype._checkAppendedParsed=function(){// trigger handler right now
if(this.state===base_stream_controller_1.State.PARSED&&(!this.appended||!this.pendingBuffering)){var frag=this.fragCurrent;if(frag){var media=this.mediaBuffer?this.mediaBuffer:this.media;logger_1.logger.log("main buffered : "+time_ranges_1.default.toString(media.buffered));this.fragPrevious=frag;var stats=this.stats;stats.tbuffered=window.performance.now();// we should get rid of this.fragLastKbps
this.fragLastKbps=Math.round(8*stats.total/(stats.tbuffered-stats.tfirst));this.hls.trigger(events_1.default.FRAG_BUFFERED,{stats:stats,frag:frag,id:'main'});this.state=base_stream_controller_1.State.IDLE;}this.tick();}};StreamController.prototype.onError=function(data){var frag=data.frag||this.fragCurrent;// don't handle frag error not related to main fragment
if(frag&&frag.type!=='main'){return;}// 0.5 : tolerance needed as some browsers stalls playback before reaching buffered end
var mediaBuffered=!!this.media&&buffer_helper_1.BufferHelper.isBuffered(this.media,this.media.currentTime)&&buffer_helper_1.BufferHelper.isBuffered(this.media,this.media.currentTime+0.5);switch(data.details){case errors_1.ErrorDetails.FRAG_LOAD_ERROR:case errors_1.ErrorDetails.FRAG_LOAD_TIMEOUT:case errors_1.ErrorDetails.KEY_LOAD_ERROR:case errors_1.ErrorDetails.KEY_LOAD_TIMEOUT:if(!data.fatal){// keep retrying until the limit will be reached
if(this.fragLoadError+1<=this.config.fragLoadingMaxRetry){// exponential backoff capped to config.fragLoadingMaxRetryTimeout
var delay=Math.min(Math.pow(2,this.fragLoadError)*this.config.fragLoadingRetryDelay,this.config.fragLoadingMaxRetryTimeout);logger_1.logger.warn("mediaController: frag loading failed, retry in "+delay+" ms");this.retryDate=window.performance.now()+delay;// retry loading state
// if loadedmetadata is not set, it means that we are emergency switch down on first frag
// in that case, reset startFragRequested flag
if(!this.loadedmetadata){this.startFragRequested=false;this.nextLoadPosition=this.startPosition;}this.fragLoadError++;this.state=base_stream_controller_1.State.FRAG_LOADING_WAITING_RETRY;}else{logger_1.logger.error("mediaController: "+data.details+" reaches max retry, redispatch as fatal ...");// switch error to fatal
data.fatal=true;this.state=base_stream_controller_1.State.ERROR;}}break;case errors_1.ErrorDetails.LEVEL_LOAD_ERROR:case errors_1.ErrorDetails.LEVEL_LOAD_TIMEOUT:if(this.state!==base_stream_controller_1.State.ERROR){if(data.fatal){// if fatal error, stop processing
this.state=base_stream_controller_1.State.ERROR;logger_1.logger.warn("streamController: "+data.details+",switch to "+this.state+" state ...");}else{// in case of non fatal error while loading level, if level controller is not retrying to load level , switch back to IDLE
if(!data.levelRetry&&this.state===base_stream_controller_1.State.WAITING_LEVEL){this.state=base_stream_controller_1.State.IDLE;}}}break;case errors_1.ErrorDetails.BUFFER_FULL_ERROR:// if in appending state
if(data.parent==='main'&&(this.state===base_stream_controller_1.State.PARSING||this.state===base_stream_controller_1.State.PARSED)){// reduce max buf len if current position is buffered
if(mediaBuffered){this._reduceMaxBufferLength(this.config.maxBufferLength);this.state=base_stream_controller_1.State.IDLE;}else{// current position is not buffered, but browser is still complaining about buffer full error
// this happens on IE/Edge, refer to https://github.com/video-dev/hls.js/pull/708
// in that case flush the whole buffer to recover
logger_1.logger.warn('buffer full error also media.currentTime is not buffered, flush everything');this.fragCurrent=null;// flush everything
this.flushMainBuffer(0,Number.POSITIVE_INFINITY);}}break;default:break;}};StreamController.prototype._reduceMaxBufferLength=function(minLength){var config=this.config;if(config.maxMaxBufferLength>=minLength){// reduce max buffer length as it might be too high. we do this to avoid loop flushing ...
config.maxMaxBufferLength/=2;logger_1.logger.warn("main:reduce max buffer length to "+config.maxMaxBufferLength+"s");return true;}return false;};/**
     * Checks the health of the buffer and attempts to resolve playback stalls.
     * @private
     */StreamController.prototype._checkBuffer=function(){var media=this.media;if(!media||media.readyState===0){// Exit early if we don't have media or if the media hasn't bufferd anything yet (readyState 0)
return;}var mediaBuffer=this.mediaBuffer?this.mediaBuffer:media;var buffered=mediaBuffer.buffered;if(!this.loadedmetadata&&buffered.length){this.loadedmetadata=true;this._seekToStartPos();}else if(this.immediateSwitch){this.immediateLevelSwitchEnd();}else{this.gapController.poll(this.lastCurrentTime,buffered);}};StreamController.prototype.onFragLoadEmergencyAborted=function(){this.state=base_stream_controller_1.State.IDLE;// if loadedmetadata is not set, it means that we are emergency switch down on first frag
// in that case, reset startFragRequested flag
if(!this.loadedmetadata){this.startFragRequested=false;this.nextLoadPosition=this.startPosition;}this.tick();};StreamController.prototype.onBufferFlushed=function(){/* after successful buffer flushing, filter flushed fragments from bufferedFrags
          use mediaBuffered instead of media (so that we will check against video.buffered ranges in case of alt audio track)
        */var media=this.mediaBuffer?this.mediaBuffer:this.media;if(media){// filter fragments potentially evicted from buffer. this is to avoid memleak on live streams
this.fragmentTracker.detectEvictedFragments(fragment_1.default.ElementaryStreamTypes.VIDEO,media.buffered);}// move to IDLE once flush complete. this should trigger new fragment loading
this.state=base_stream_controller_1.State.IDLE;// reset reference to frag
this.fragPrevious=null;};StreamController.prototype.swapAudioCodec=function(){this.audioCodecSwap=!this.audioCodecSwap;};StreamController.prototype.computeLivePosition=function(sliding,levelDetails){var targetLatency=this.config.liveSyncDuration!==undefined?this.config.liveSyncDuration:this.config.liveSyncDurationCount*levelDetails.targetduration;return sliding+Math.max(0,levelDetails.totalduration-targetLatency);};/**
     * Seeks to the set startPosition if not equal to the mediaElement's current time.
     * @private
     */StreamController.prototype._seekToStartPos=function(){var media=this.media;var currentTime=media.currentTime;// only adjust currentTime if different from startPosition or if startPosition not buffered
// at that stage, there should be only one buffered range, as we reach that code after first fragment has been buffered
var startPosition=media.seeking?currentTime:this.startPosition;// if currentTime not matching with expected startPosition or startPosition not buffered but close to first buffered
if(currentTime!==startPosition){// if startPosition not buffered, let's seek to buffered.start(0)
logger_1.logger.log("target start position not buffered, seek to buffered.start(0) "+startPosition+" from current time "+currentTime+" ");media.currentTime=startPosition;}};StreamController.prototype._getAudioCodec=function(currentLevel){var audioCodec=this.config.defaultAudioCodec||currentLevel.audioCodec;if(this.audioCodecSwap){logger_1.logger.log('swapping playlist audio codec');if(audioCodec){if(audioCodec.indexOf('mp4a.40.5')!==-1){audioCodec='mp4a.40.2';}else{audioCodec='mp4a.40.5';}}}return audioCodec;};Object.defineProperty(StreamController.prototype,"liveSyncPosition",{get:function get(){return this._liveSyncPosition;},set:function set(value){this._liveSyncPosition=value;},enumerable:true,configurable:true});return StreamController;}(base_stream_controller_1.default);exports.default=StreamController;/* WEBPACK VAR INJECTION */}).call(this,__webpack_require__(/*! ./src/polyfills/number */"./src/polyfills/number.js")["Number"]);/***/},/***/"./src/controller/subtitle-stream-controller.js":/*!******************************************************!*\
  !*** ./src/controller/subtitle-stream-controller.js ***!
  \******************************************************//*! no static exports found *//*! ModuleConcatenation bailout: Module is not an ECMAScript module *//***/function srcControllerSubtitleStreamControllerJs(module,exports,__webpack_require__){"use strict";/**
 * @class SubtitleStreamController
 */var __extends=this&&this.__extends||function(){var extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;}||function(d,b){for(var p in b){if(b.hasOwnProperty(p))d[p]=b[p];}};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};}();Object.defineProperty(exports,"__esModule",{value:true});var events_1=__webpack_require__(/*! ../events */"./src/events.js");var logger_1=__webpack_require__(/*! ../utils/logger */"./src/utils/logger.js");var decrypter_1=__webpack_require__(/*! ../crypt/decrypter */"./src/crypt/decrypter.js");var buffer_helper_1=__webpack_require__(/*! ../utils/buffer-helper */"./src/utils/buffer-helper.js");var fragment_finders_1=__webpack_require__(/*! ./fragment-finders */"./src/controller/fragment-finders.js");var fragment_tracker_1=__webpack_require__(/*! ./fragment-tracker */"./src/controller/fragment-tracker.js");var base_stream_controller_1=__webpack_require__(/*! ./base-stream-controller */"./src/controller/base-stream-controller.js");var level_helper_1=__webpack_require__(/*! ./level-helper */"./src/controller/level-helper.js");var performance=window.performance;var TICK_INTERVAL=500;// how often to tick in ms
var SubtitleStreamController=/** @class */function(_super){__extends(SubtitleStreamController,_super);function SubtitleStreamController(hls,fragmentTracker){var _this=_super.call(this,hls,events_1.default.MEDIA_ATTACHED,events_1.default.MEDIA_DETACHING,events_1.default.ERROR,events_1.default.KEY_LOADED,events_1.default.FRAG_LOADED,events_1.default.SUBTITLE_TRACKS_UPDATED,events_1.default.SUBTITLE_TRACK_SWITCH,events_1.default.SUBTITLE_TRACK_LOADED,events_1.default.SUBTITLE_FRAG_PROCESSED,events_1.default.LEVEL_UPDATED)||this;_this.fragmentTracker=fragmentTracker;_this.config=hls.config;_this.state=base_stream_controller_1.State.STOPPED;_this.tracks=[];_this.tracksBuffered=[];_this.currentTrackId=-1;_this.decrypter=new decrypter_1.default(hls,hls.config);// lastAVStart stores the time in seconds for the start time of a level load
_this.lastAVStart=0;_this._onMediaSeeking=_this.onMediaSeeking.bind(_this);return _this;}SubtitleStreamController.prototype.onSubtitleFragProcessed=function(data){var frag=data.frag,success=data.success;this.fragPrevious=frag;this.state=base_stream_controller_1.State.IDLE;if(!success){return;}var buffered=this.tracksBuffered[this.currentTrackId];if(!buffered){return;}// Create/update a buffered array matching the interface used by BufferHelper.bufferedInfo
// so we can re-use the logic used to detect how much have been buffered
var timeRange;var fragStart=frag.start;for(var i=0;i<buffered.length;i++){if(fragStart>=buffered[i].start&&fragStart<=buffered[i].end){timeRange=buffered[i];break;}}var fragEnd=frag.start+frag.duration;if(timeRange){timeRange.end=fragEnd;}else{timeRange={start:fragStart,end:fragEnd};buffered.push(timeRange);}};SubtitleStreamController.prototype.onMediaAttached=function(_a){var media=_a.media;this.media=media;media.addEventListener('seeking',this._onMediaSeeking);this.state=base_stream_controller_1.State.IDLE;};SubtitleStreamController.prototype.onMediaDetaching=function(){this.media.removeEventListener('seeking',this._onMediaSeeking);this.media=null;this.state=base_stream_controller_1.State.STOPPED;};// If something goes wrong, proceed to next frag, if we were processing one.
SubtitleStreamController.prototype.onError=function(data){var frag=data.frag;// don't handle error not related to subtitle fragment
if(!frag||frag.type!=='subtitle'){return;}this.state=base_stream_controller_1.State.IDLE;};// Got all new subtitle tracks.
SubtitleStreamController.prototype.onSubtitleTracksUpdated=function(data){var _this=this;logger_1.logger.log('subtitle tracks updated');this.tracksBuffered=[];this.tracks=data.subtitleTracks;this.tracks.forEach(function(track){_this.tracksBuffered[track.id]=[];});};SubtitleStreamController.prototype.onSubtitleTrackSwitch=function(data){this.currentTrackId=data.id;if(!this.tracks||this.currentTrackId===-1){this.clearInterval();return;}// Check if track has the necessary details to load fragments
var currentTrack=this.tracks[this.currentTrackId];if(currentTrack&&currentTrack.details){this.setInterval(TICK_INTERVAL);}};// Got a new set of subtitle fragments.
SubtitleStreamController.prototype.onSubtitleTrackLoaded=function(data){var id=data.id,details=data.details;var _a=this,currentTrackId=_a.currentTrackId,tracks=_a.tracks;var currentTrack=tracks[currentTrackId];if(id>=tracks.length||id!==currentTrackId||!currentTrack){return;}if(details.live){level_helper_1.mergeSubtitlePlaylists(currentTrack.details,details,this.lastAVStart);}currentTrack.details=details;this.setInterval(TICK_INTERVAL);};SubtitleStreamController.prototype.onKeyLoaded=function(){if(this.state===base_stream_controller_1.State.KEY_LOADING){this.state=base_stream_controller_1.State.IDLE;}};SubtitleStreamController.prototype.onFragLoaded=function(data){var fragCurrent=this.fragCurrent;var decryptData=data.frag.decryptdata;var fragLoaded=data.frag;var hls=this.hls;if(this.state===base_stream_controller_1.State.FRAG_LOADING&&fragCurrent&&data.frag.type==='subtitle'&&fragCurrent.sn===data.frag.sn){// check to see if the payload needs to be decrypted
if(data.payload.byteLength>0&&decryptData&&decryptData.key&&decryptData.method==='AES-128'){var startTime_1=performance.now();// decrypt the subtitles
this.decrypter.decrypt(data.payload,decryptData.key.buffer,decryptData.iv.buffer,function(decryptedData){var endTime=performance.now();hls.trigger(events_1.default.FRAG_DECRYPTED,{frag:fragLoaded,payload:decryptedData,stats:{tstart:startTime_1,tdecrypt:endTime}});});}}};SubtitleStreamController.prototype.onLevelUpdated=function(_a){var details=_a.details;var frags=details.fragments;this.lastAVStart=frags.length?frags[0].start:0;};SubtitleStreamController.prototype.doTick=function(){if(!this.media){this.state=base_stream_controller_1.State.IDLE;return;}switch(this.state){case base_stream_controller_1.State.IDLE:{var _a=this,config=_a.config,currentTrackId=_a.currentTrackId,fragmentTracker=_a.fragmentTracker,media=_a.media,tracks=_a.tracks;if(!tracks||!tracks[currentTrackId]||!tracks[currentTrackId].details){break;}var maxBufferHole=config.maxBufferHole,maxFragLookUpTolerance=config.maxFragLookUpTolerance;var maxConfigBuffer=Math.min(config.maxBufferLength,config.maxMaxBufferLength);var bufferedInfo=buffer_helper_1.BufferHelper.bufferedInfo(this._getBuffered(),media.currentTime,maxBufferHole);var bufferEnd=bufferedInfo.end,bufferLen=bufferedInfo.len;var trackDetails=tracks[currentTrackId].details;var fragments=trackDetails.fragments;var fragLen=fragments.length;var end=fragments[fragLen-1].start+fragments[fragLen-1].duration;if(bufferLen>maxConfigBuffer){return;}var foundFrag=void 0;var fragPrevious=this.fragPrevious;if(bufferEnd<end){if(fragPrevious&&trackDetails.hasProgramDateTime){foundFrag=fragment_finders_1.findFragmentByPDT(fragments,fragPrevious.endProgramDateTime,maxFragLookUpTolerance);}if(!foundFrag){foundFrag=fragment_finders_1.findFragmentByPTS(fragPrevious,fragments,bufferEnd,maxFragLookUpTolerance);}}else{foundFrag=fragments[fragLen-1];}if(foundFrag&&foundFrag.encrypted){logger_1.logger.log("Loading key for "+foundFrag.sn);this.state=base_stream_controller_1.State.KEY_LOADING;this.hls.trigger(events_1.default.KEY_LOADING,{frag:foundFrag});}else if(foundFrag&&fragmentTracker.getState(foundFrag)===fragment_tracker_1.FragmentState.NOT_LOADED){// only load if fragment is not loaded
this.fragCurrent=foundFrag;this.state=base_stream_controller_1.State.FRAG_LOADING;this.hls.trigger(events_1.default.FRAG_LOADING,{frag:foundFrag});}}}};SubtitleStreamController.prototype.stopLoad=function(){this.lastAVStart=0;_super.prototype.stopLoad.call(this);};SubtitleStreamController.prototype._getBuffered=function(){return this.tracksBuffered[this.currentTrackId]||[];};SubtitleStreamController.prototype.onMediaSeeking=function(){this.fragPrevious=null;};return SubtitleStreamController;}(base_stream_controller_1.default);exports.SubtitleStreamController=SubtitleStreamController;/***/},/***/"./src/controller/subtitle-track-controller.js":/*!*****************************************************!*\
  !*** ./src/controller/subtitle-track-controller.js ***!
  \*****************************************************//*! no static exports found *//*! ModuleConcatenation bailout: Module is not an ECMAScript module *//***/function srcControllerSubtitleTrackControllerJs(module,exports,__webpack_require__){"use strict";/* WEBPACK VAR INJECTION */(function(Number){var __extends=this&&this.__extends||function(){var extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;}||function(d,b){for(var p in b){if(b.hasOwnProperty(p))d[p]=b[p];}};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};}();Object.defineProperty(exports,"__esModule",{value:true});var events_1=__webpack_require__(/*! ../events */"./src/events.js");var event_handler_1=__webpack_require__(/*! ../event-handler */"./src/event-handler.js");var logger_1=__webpack_require__(/*! ../utils/logger */"./src/utils/logger.js");var level_helper_1=__webpack_require__(/*! ./level-helper */"./src/controller/level-helper.js");var SubtitleTrackController=/** @class */function(_super){__extends(SubtitleTrackController,_super);function SubtitleTrackController(hls){var _this=_super.call(this,hls,events_1.default.MEDIA_ATTACHED,events_1.default.MEDIA_DETACHING,events_1.default.MANIFEST_LOADED,events_1.default.SUBTITLE_TRACK_LOADED)||this;_this.tracks=[];_this.trackId=-1;_this.media=null;_this.stopped=true;/**
         * @member {boolean} subtitleDisplay Enable/disable subtitle display rendering
         */_this.subtitleDisplay=true;return _this;}SubtitleTrackController.prototype.destroy=function(){event_handler_1.default.prototype.destroy.call(this);};// Listen for subtitle track change, then extract the current track ID.
SubtitleTrackController.prototype.onMediaAttached=function(data){var _this=this;this.media=data.media;if(!this.media){return;}if(this.queuedDefaultTrack){this.subtitleTrack=this.queuedDefaultTrack;delete this.queuedDefaultTrack;}this.trackChangeListener=this._onTextTracksChanged.bind(this);this.useTextTrackPolling=!(this.media.textTracks&&'onchange'in this.media.textTracks);if(this.useTextTrackPolling){this.subtitlePollingInterval=setInterval(function(){_this.trackChangeListener();},500);}else{this.media.textTracks.addEventListener('change',this.trackChangeListener);}};SubtitleTrackController.prototype.onMediaDetaching=function(){if(!this.media){return;}if(this.useTextTrackPolling){clearInterval(this.subtitlePollingInterval);}else{this.media.textTracks.removeEventListener('change',this.trackChangeListener);}this.media=null;};// Fired whenever a new manifest is loaded.
SubtitleTrackController.prototype.onManifestLoaded=function(data){var _this=this;var tracks=data.subtitles||[];this.tracks=tracks;this.hls.trigger(events_1.default.SUBTITLE_TRACKS_UPDATED,{subtitleTracks:tracks});// loop through available subtitle tracks and autoselect default if needed
// TODO: improve selection logic to handle forced, etc
tracks.forEach(function(track){if(track.default){// setting this.subtitleTrack will trigger internal logic
// if media has not been attached yet, it will fail
// we keep a reference to the default track id
// and we'll set subtitleTrack when onMediaAttached is triggered
if(_this.media){_this.subtitleTrack=track.id;}else{_this.queuedDefaultTrack=track.id;}}});};SubtitleTrackController.prototype.onSubtitleTrackLoaded=function(data){var _this=this;var id=data.id,details=data.details;var _a=this,trackId=_a.trackId,tracks=_a.tracks;var currentTrack=tracks[trackId];if(id>=tracks.length||id!==trackId||!currentTrack||this.stopped){this._clearReloadTimer();return;}logger_1.logger.log("subtitle track "+id+" loaded");if(details.live){var reloadInterval=level_helper_1.computeReloadInterval(currentTrack.details,details,data.stats.trequest);logger_1.logger.log("Reloading live subtitle playlist in "+reloadInterval+"ms");this.timer=setTimeout(function(){_this._loadCurrentTrack();},reloadInterval);}else{this._clearReloadTimer();}};SubtitleTrackController.prototype.startLoad=function(){this.stopped=false;this._loadCurrentTrack();};SubtitleTrackController.prototype.stopLoad=function(){this.stopped=true;this._clearReloadTimer();};Object.defineProperty(SubtitleTrackController.prototype,"subtitleTracks",{/** get alternate subtitle tracks list from playlist **/get:function get(){return this.tracks;},enumerable:true,configurable:true});Object.defineProperty(SubtitleTrackController.prototype,"subtitleTrack",{/** get index of the selected subtitle track (index in subtitle track lists) **/get:function get(){return this.trackId;},/** select a subtitle track, based on its index in subtitle track lists**/set:function set(subtitleTrackId){if(this.trackId!==subtitleTrackId){this._toggleTrackModes(subtitleTrackId);this._setSubtitleTrackInternal(subtitleTrackId);}},enumerable:true,configurable:true});SubtitleTrackController.prototype._clearReloadTimer=function(){if(this.timer){clearTimeout(this.timer);this.timer=null;}};SubtitleTrackController.prototype._loadCurrentTrack=function(){var _a=this,trackId=_a.trackId,tracks=_a.tracks,hls=_a.hls;var currentTrack=tracks[trackId];if(trackId<0||!currentTrack||currentTrack.details&&!currentTrack.details.live){return;}logger_1.logger.log("Loading subtitle track "+trackId);hls.trigger(events_1.default.SUBTITLE_TRACK_LOADING,{url:currentTrack.url,id:trackId});};/**
     * Disables the old subtitleTrack and sets current mode on the next subtitleTrack.
     * This operates on the DOM textTracks.
     * A value of -1 will disable all subtitle tracks.
     * @param newId - The id of the next track to enable
     * @private
     */SubtitleTrackController.prototype._toggleTrackModes=function(newId){var _a=this,media=_a.media,subtitleDisplay=_a.subtitleDisplay,trackId=_a.trackId;if(!media){return;}var textTracks=filterSubtitleTracks(media.textTracks);if(newId===-1){[].slice.call(textTracks).forEach(function(track){track.mode='disabled';});}else{var oldTrack=textTracks[trackId];if(oldTrack){oldTrack.mode='disabled';}}var nextTrack=textTracks[newId];if(nextTrack){nextTrack.mode=subtitleDisplay?'showing':'hidden';}};/**
       * This method is responsible for validating the subtitle index and periodically reloading if live.
       * Dispatches the SUBTITLE_TRACK_SWITCH event, which instructs the subtitle-stream-controller to load the selected track.
       * @param newId - The id of the subtitle track to activate.
       */SubtitleTrackController.prototype._setSubtitleTrackInternal=function(newId){var _a=this,hls=_a.hls,tracks=_a.tracks;if(!Number.isFinite(newId)||newId<-1||newId>=tracks.length){return;}this.trackId=newId;logger_1.logger.log("Switching to subtitle track "+newId);hls.trigger(events_1.default.SUBTITLE_TRACK_SWITCH,{id:newId});this._loadCurrentTrack();};SubtitleTrackController.prototype._onTextTracksChanged=function(){// Media is undefined when switching streams via loadSource()
if(!this.media){return;}var trackId=-1;var tracks=filterSubtitleTracks(this.media.textTracks);for(var id=0;id<tracks.length;id++){if(tracks[id].mode==='hidden'){// Do not break in case there is a following track with showing.
trackId=id;}else if(tracks[id].mode==='showing'){trackId=id;break;}}// Setting current subtitleTrack will invoke code.
this.subtitleTrack=trackId;};return SubtitleTrackController;}(event_handler_1.default);function filterSubtitleTracks(textTrackList){var tracks=[];for(var i=0;i<textTrackList.length;i++){var track=textTrackList[i];// Edge adds a track without a label; we don't want to use it
if(track.kind==='subtitles'&&track.label){tracks.push(textTrackList[i]);}}return tracks;}exports.default=SubtitleTrackController;/* WEBPACK VAR INJECTION */}).call(this,__webpack_require__(/*! ./src/polyfills/number */"./src/polyfills/number.js")["Number"]);/***/},/***/"./src/controller/timeline-controller.js":/*!***********************************************!*\
  !*** ./src/controller/timeline-controller.js ***!
  \***********************************************//*! no static exports found *//*! ModuleConcatenation bailout: Module is not an ECMAScript module *//***/function srcControllerTimelineControllerJs(module,exports,__webpack_require__){"use strict";/* WEBPACK VAR INJECTION */(function(Number){/*
 * Timeline Controller
*/var __extends=this&&this.__extends||function(){var extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;}||function(d,b){for(var p in b){if(b.hasOwnProperty(p))d[p]=b[p];}};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};}();Object.defineProperty(exports,"__esModule",{value:true});var events_1=__webpack_require__(/*! ../events */"./src/events.js");var event_handler_1=__webpack_require__(/*! ../event-handler */"./src/event-handler.js");var cea_608_parser_1=__webpack_require__(/*! ../utils/cea-608-parser */"./src/utils/cea-608-parser.js");var output_filter_1=__webpack_require__(/*! ../utils/output-filter */"./src/utils/output-filter.js");var webvtt_parser_1=__webpack_require__(/*! ../utils/webvtt-parser */"./src/utils/webvtt-parser.js");var logger_1=__webpack_require__(/*! ../utils/logger */"./src/utils/logger.js");var texttrack_utils_1=__webpack_require__(/*! ../utils/texttrack-utils */"./src/utils/texttrack-utils.js");function canReuseVttTextTrack(inUseTrack,manifestTrack){return inUseTrack&&inUseTrack.label===manifestTrack.name&&!(inUseTrack.textTrack1||inUseTrack.textTrack2);}function intersection(x1,x2,y1,y2){return Math.min(x2,y2)-Math.max(x1,y1);}var TimelineController=/** @class */function(_super){__extends(TimelineController,_super);function TimelineController(hls){var _this=_super.call(this,hls,events_1.default.MEDIA_ATTACHING,events_1.default.MEDIA_DETACHING,events_1.default.FRAG_PARSING_USERDATA,events_1.default.FRAG_DECRYPTED,events_1.default.MANIFEST_LOADING,events_1.default.MANIFEST_LOADED,events_1.default.FRAG_LOADED,events_1.default.LEVEL_SWITCHING,events_1.default.INIT_PTS_FOUND)||this;_this.hls=hls;_this.config=hls.config;_this.enabled=true;_this.Cues=hls.config.cueHandler;_this.textTracks=[];_this.tracks=[];_this.unparsedVttFrags=[];_this.initPTS=[];_this.cueRanges=[];_this.captionsTracks={};_this.captionsProperties={textTrack1:{label:_this.config.captionsTextTrack1Label,languageCode:_this.config.captionsTextTrack1LanguageCode},textTrack2:{label:_this.config.captionsTextTrack2Label,languageCode:_this.config.captionsTextTrack2LanguageCode}};if(_this.config.enableCEA708Captions){var channel1=new output_filter_1.default(_this,'textTrack1');var channel2=new output_filter_1.default(_this,'textTrack2');_this.cea608Parser=new cea_608_parser_1.default(0,channel1,channel2);}return _this;}TimelineController.prototype.addCues=function(trackName,startTime,endTime,screen){// skip cues which overlap more than 50% with previously parsed time ranges
var ranges=this.cueRanges;var merged=false;for(var i=ranges.length;i--;){var cueRange=ranges[i];var overlap=intersection(cueRange[0],cueRange[1],startTime,endTime);if(overlap>=0){cueRange[0]=Math.min(cueRange[0],startTime);cueRange[1]=Math.max(cueRange[1],endTime);merged=true;if(overlap/(endTime-startTime)>0.5){return;}}}if(!merged){ranges.push([startTime,endTime]);}this.Cues.newCue(this.captionsTracks[trackName],startTime,endTime,screen);};// Triggered when an initial PTS is found; used for synchronisation of WebVTT.
TimelineController.prototype.onInitPtsFound=function(data){var _this=this;if(data.id==='main'){this.initPTS[data.frag.cc]=data.initPTS;}// Due to asynchronous processing, initial PTS may arrive later than the first VTT fragments are loaded.
// Parse any unparsed fragments upon receiving the initial PTS.
if(this.unparsedVttFrags.length){var unparsedVttFrags=this.unparsedVttFrags;this.unparsedVttFrags=[];unparsedVttFrags.forEach(function(frag){_this.onFragLoaded(frag);});}};TimelineController.prototype.getExistingTrack=function(trackName){var media=this.media;if(media){for(var i=0;i<media.textTracks.length;i++){var textTrack=media.textTracks[i];if(textTrack[trackName]){return textTrack;}}}return null;};TimelineController.prototype.createCaptionsTrack=function(trackName){var _a=this.captionsProperties[trackName],label=_a.label,languageCode=_a.languageCode;var captionsTracks=this.captionsTracks;if(!captionsTracks[trackName]){// Enable reuse of existing text track.
var existingTrack=this.getExistingTrack(trackName);if(!existingTrack){var textTrack=this.createTextTrack('captions',label,languageCode);if(textTrack){// Set a special property on the track so we know it's managed by Hls.js
textTrack[trackName]=true;captionsTracks[trackName]=textTrack;}}else{captionsTracks[trackName]=existingTrack;texttrack_utils_1.clearCurrentCues(captionsTracks[trackName]);texttrack_utils_1.sendAddTrackEvent(captionsTracks[trackName],this.media);}}};TimelineController.prototype.createTextTrack=function(kind,label,lang){var media=this.media;if(media){return media.addTextTrack(kind,label,lang);}};TimelineController.prototype.destroy=function(){event_handler_1.default.prototype.destroy.call(this);};TimelineController.prototype.onMediaAttaching=function(data){this.media=data.media;this._cleanTracks();};TimelineController.prototype.onMediaDetaching=function(){var captionsTracks=this.captionsTracks;Object.keys(captionsTracks).forEach(function(trackName){texttrack_utils_1.clearCurrentCues(captionsTracks[trackName]);delete captionsTracks[trackName];});};TimelineController.prototype.onManifestLoading=function(){this.lastSn=-1;// Detect discontiguity in fragment parsing
this.prevCC=-1;this.vttCCs={ccOffset:0,presentationOffset:0,0:{start:0,prevCC:-1,new:false}};this._cleanTracks();};TimelineController.prototype._cleanTracks=function(){// clear outdated subtitles
var media=this.media;if(media){var textTracks=media.textTracks;if(textTracks){for(var i=0;i<textTracks.length;i++){texttrack_utils_1.clearCurrentCues(textTracks[i]);}}}};TimelineController.prototype.onManifestLoaded=function(data){var _this=this;this.textTracks=[];this.unparsedVttFrags=this.unparsedVttFrags||[];this.initPTS=[];this.cueRanges=[];if(this.config.enableWebVTT){this.tracks=data.subtitles||[];var inUseTracks_1=this.media?this.media.textTracks:[];this.tracks.forEach(function(track,index){var textTrack;if(index<inUseTracks_1.length){var inUseTrack=null;for(var i=0;i<inUseTracks_1.length;i++){if(canReuseVttTextTrack(inUseTracks_1[i],track)){inUseTrack=inUseTracks_1[i];break;}}// Reuse tracks with the same label, but do not reuse 608/708 tracks
if(inUseTrack){textTrack=inUseTrack;}}if(!textTrack){textTrack=_this.createTextTrack('subtitles',track.name,track.lang);}if(track.default){textTrack.mode=_this.hls.subtitleDisplay?'showing':'hidden';}else{textTrack.mode='disabled';}_this.textTracks.push(textTrack);});}};TimelineController.prototype.onLevelSwitching=function(){this.enabled=this.hls.currentLevel.closedCaptions!=='NONE';};TimelineController.prototype.onFragLoaded=function(data){var frag=data.frag,payload=data.payload;if(frag.type==='main'){var sn=frag.sn;// if this frag isn't contiguous, clear the parser so cues with bad start/end times aren't added to the textTrack
if(sn!==this.lastSn+1){var cea608Parser=this.cea608Parser;if(cea608Parser){cea608Parser.reset();}}this.lastSn=sn;}// eslint-disable-line brace-style
// If fragment is subtitle type, parse as WebVTT.
else if(frag.type==='subtitle'){if(payload.byteLength){// We need an initial synchronisation PTS. Store fragments as long as none has arrived.
if(!Number.isFinite(this.initPTS[frag.cc])){this.unparsedVttFrags.push(data);if(this.initPTS.length){// finish unsuccessfully, otherwise the subtitle-stream-controller could be blocked from loading new frags.
this.hls.trigger(events_1.default.SUBTITLE_FRAG_PROCESSED,{success:false,frag:frag});}return;}var decryptData=frag.decryptdata;// If the subtitles are not encrypted, parse VTTs now. Otherwise, we need to wait.
if(decryptData==null||decryptData.key==null||decryptData.method!=='AES-128'){this._parseVTTs(frag,payload);}}else{// In case there is no payload, finish unsuccessfully.
this.hls.trigger(events_1.default.SUBTITLE_FRAG_PROCESSED,{success:false,frag:frag});}}};TimelineController.prototype._parseVTTs=function(frag,payload){var vttCCs=this.vttCCs;if(!vttCCs[frag.cc]){vttCCs[frag.cc]={start:frag.start,prevCC:this.prevCC,new:true};this.prevCC=frag.cc;}var textTracks=this.textTracks,hls=this.hls;// Parse the WebVTT file contents.
webvtt_parser_1.default.parse(payload,this.initPTS[frag.cc],vttCCs,frag.cc,function(cues){var currentTrack=textTracks[frag.level];// WebVTTParser.parse is an async method and if the currently selected text track mode is set to "disabled"
// before parsing is done then don't try to access currentTrack.cues.getCueById as cues will be null
// and trying to access getCueById method of cues will throw an exception
if(currentTrack.mode==='disabled'){hls.trigger(events_1.default.SUBTITLE_FRAG_PROCESSED,{success:false,frag:frag});return;}// Add cues and trigger event with success true.
cues.forEach(function(cue){// Sometimes there are cue overlaps on segmented vtts so the same
// cue can appear more than once in different vtt files.
// This avoid showing duplicated cues with same timecode and text.
if(!currentTrack.cues.getCueById(cue.id)){try{currentTrack.addCue(cue);}catch(err){var textTrackCue=new window.TextTrackCue(cue.startTime,cue.endTime,cue.text);textTrackCue.id=cue.id;currentTrack.addCue(textTrackCue);}}});hls.trigger(events_1.default.SUBTITLE_FRAG_PROCESSED,{success:true,frag:frag});},function(e){// Something went wrong while parsing. Trigger event with success false.
logger_1.logger.log("Failed to parse VTT cue: "+e);hls.trigger(events_1.default.SUBTITLE_FRAG_PROCESSED,{success:false,frag:frag});});};TimelineController.prototype.onFragDecrypted=function(data){var decryptedData=data.payload,frag=data.frag;if(frag.type==='subtitle'){if(!Number.isFinite(this.initPTS[frag.cc])){this.unparsedVttFrags.push(data);return;}this._parseVTTs(frag,decryptedData);}};TimelineController.prototype.onFragParsingUserdata=function(data){// push all of the CEA-708 messages into the interpreter
// immediately. It will create the proper timestamps based on our PTS value
if(this.enabled&&this.config.enableCEA708Captions){for(var i=0;i<data.samples.length;i++){var ccdatas=this.extractCea608Data(data.samples[i].bytes);this.cea608Parser.addData(data.samples[i].pts,ccdatas);}}};TimelineController.prototype.extractCea608Data=function(byteArray){var count=byteArray[0]&31;var position=2;var tmpByte,ccbyte1,ccbyte2,ccValid,ccType;var actualCCBytes=[];for(var j=0;j<count;j++){tmpByte=byteArray[position++];ccbyte1=0x7F&byteArray[position++];ccbyte2=0x7F&byteArray[position++];ccValid=(4&tmpByte)!==0;ccType=3&tmpByte;if(ccbyte1===0&&ccbyte2===0){continue;}if(ccValid){if(ccType===0){// || ccType === 1
actualCCBytes.push(ccbyte1);actualCCBytes.push(ccbyte2);}}}return actualCCBytes;};return TimelineController;}(event_handler_1.default);exports.default=TimelineController;/* WEBPACK VAR INJECTION */}).call(this,__webpack_require__(/*! ./src/polyfills/number */"./src/polyfills/number.js")["Number"]);/***/},/***/"./src/crypt/aes-crypto.js":/*!*********************************!*\
  !*** ./src/crypt/aes-crypto.js ***!
  \*********************************//*! no static exports found *//*! ModuleConcatenation bailout: Module is not an ECMAScript module *//***/function srcCryptAesCryptoJs(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var AESCrypto=/** @class */function(){function AESCrypto(subtle,iv){this.subtle=subtle;this.aesIV=iv;}AESCrypto.prototype.decrypt=function(data,key){return this.subtle.decrypt({name:'AES-CBC',iv:this.aesIV},key,data);};return AESCrypto;}();exports.default=AESCrypto;/***/},/***/"./src/crypt/aes-decryptor.js":/*!************************************!*\
  !*** ./src/crypt/aes-decryptor.js ***!
  \************************************//*! no static exports found *//*! ModuleConcatenation bailout: Module is not an ECMAScript module *//***/function srcCryptAesDecryptorJs(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});// PKCS7
function removePadding(buffer){var outputBytes=buffer.byteLength;var paddingBytes=outputBytes&&new DataView(buffer).getUint8(outputBytes-1);if(paddingBytes){return buffer.slice(0,outputBytes-paddingBytes);}else{return buffer;}}exports.removePadding=removePadding;var AESDecryptor=/** @class */function(){function AESDecryptor(){// Static after running initTable
this.rcon=[0x0,0x1,0x2,0x4,0x8,0x10,0x20,0x40,0x80,0x1b,0x36];this.subMix=[new Uint32Array(256),new Uint32Array(256),new Uint32Array(256),new Uint32Array(256)];this.invSubMix=[new Uint32Array(256),new Uint32Array(256),new Uint32Array(256),new Uint32Array(256)];this.sBox=new Uint32Array(256);this.invSBox=new Uint32Array(256);// Changes during runtime
this.key=new Uint32Array(0);this.initTable();}// Using view.getUint32() also swaps the byte order.
AESDecryptor.prototype.uint8ArrayToUint32Array_=function(arrayBuffer){var view=new DataView(arrayBuffer);var newArray=new Uint32Array(4);for(var i=0;i<4;i++){newArray[i]=view.getUint32(i*4);}return newArray;};AESDecryptor.prototype.initTable=function(){var sBox=this.sBox;var invSBox=this.invSBox;var subMix=this.subMix;var subMix0=subMix[0];var subMix1=subMix[1];var subMix2=subMix[2];var subMix3=subMix[3];var invSubMix=this.invSubMix;var invSubMix0=invSubMix[0];var invSubMix1=invSubMix[1];var invSubMix2=invSubMix[2];var invSubMix3=invSubMix[3];var d=new Uint32Array(256);var x=0;var xi=0;var i=0;for(i=0;i<256;i++){if(i<128){d[i]=i<<1;}else{d[i]=i<<1^0x11b;}}for(i=0;i<256;i++){var sx=xi^xi<<1^xi<<2^xi<<3^xi<<4;sx=sx>>>8^sx&0xff^0x63;sBox[x]=sx;invSBox[sx]=x;// Compute multiplication
var x2=d[x];var x4=d[x2];var x8=d[x4];// Compute sub/invSub bytes, mix columns tables
var t=d[sx]*0x101^sx*0x1010100;subMix0[x]=t<<24|t>>>8;subMix1[x]=t<<16|t>>>16;subMix2[x]=t<<8|t>>>24;subMix3[x]=t;// Compute inv sub bytes, inv mix columns tables
t=x8*0x1010101^x4*0x10001^x2*0x101^x*0x1010100;invSubMix0[sx]=t<<24|t>>>8;invSubMix1[sx]=t<<16|t>>>16;invSubMix2[sx]=t<<8|t>>>24;invSubMix3[sx]=t;// Compute next counter
if(!x){x=xi=1;}else{x=x2^d[d[d[x8^x2]]];xi^=d[d[xi]];}}};AESDecryptor.prototype.expandKey=function(keyBuffer){// convert keyBuffer to Uint32Array
var key=this.uint8ArrayToUint32Array_(keyBuffer);var sameKey=true;var offset=0;while(offset<key.length&&sameKey){sameKey=key[offset]===this.key[offset];offset++;}if(sameKey){return;}this.key=key;var keySize=this.keySize=key.length;if(keySize!==4&&keySize!==6&&keySize!==8){throw new Error('Invalid aes key size='+keySize);}var ksRows=this.ksRows=(keySize+6+1)*4;var ksRow;var invKsRow;var keySchedule=this.keySchedule=new Uint32Array(ksRows);var invKeySchedule=this.invKeySchedule=new Uint32Array(ksRows);var sbox=this.sBox;var rcon=this.rcon;var invSubMix=this.invSubMix;var invSubMix0=invSubMix[0];var invSubMix1=invSubMix[1];var invSubMix2=invSubMix[2];var invSubMix3=invSubMix[3];var prev;var t;for(ksRow=0;ksRow<ksRows;ksRow++){if(ksRow<keySize){prev=keySchedule[ksRow]=key[ksRow];continue;}t=prev;if(ksRow%keySize===0){// Rot word
t=t<<8|t>>>24;// Sub word
t=sbox[t>>>24]<<24|sbox[t>>>16&0xff]<<16|sbox[t>>>8&0xff]<<8|sbox[t&0xff];// Mix Rcon
t^=rcon[ksRow/keySize|0]<<24;}else if(keySize>6&&ksRow%keySize===4){// Sub word
t=sbox[t>>>24]<<24|sbox[t>>>16&0xff]<<16|sbox[t>>>8&0xff]<<8|sbox[t&0xff];}keySchedule[ksRow]=prev=(keySchedule[ksRow-keySize]^t)>>>0;}for(invKsRow=0;invKsRow<ksRows;invKsRow++){ksRow=ksRows-invKsRow;if(invKsRow&3){t=keySchedule[ksRow];}else{t=keySchedule[ksRow-4];}if(invKsRow<4||ksRow<=4){invKeySchedule[invKsRow]=t;}else{invKeySchedule[invKsRow]=invSubMix0[sbox[t>>>24]]^invSubMix1[sbox[t>>>16&0xff]]^invSubMix2[sbox[t>>>8&0xff]]^invSubMix3[sbox[t&0xff]];}invKeySchedule[invKsRow]=invKeySchedule[invKsRow]>>>0;}};// Adding this as a method greatly improves performance.
AESDecryptor.prototype.networkToHostOrderSwap=function(word){return word<<24|(word&0xff00)<<8|(word&0xff0000)>>8|word>>>24;};AESDecryptor.prototype.decrypt=function(inputArrayBuffer,offset,aesIV,removePKCS7Padding){var nRounds=this.keySize+6;var invKeySchedule=this.invKeySchedule;var invSBOX=this.invSBox;var invSubMix=this.invSubMix;var invSubMix0=invSubMix[0];var invSubMix1=invSubMix[1];var invSubMix2=invSubMix[2];var invSubMix3=invSubMix[3];var initVector=this.uint8ArrayToUint32Array_(aesIV);var initVector0=initVector[0];var initVector1=initVector[1];var initVector2=initVector[2];var initVector3=initVector[3];var inputInt32=new Int32Array(inputArrayBuffer);var outputInt32=new Int32Array(inputInt32.length);var t0,t1,t2,t3;var s0,s1,s2,s3;var inputWords0,inputWords1,inputWords2,inputWords3;var ksRow,i;var swapWord=this.networkToHostOrderSwap;while(offset<inputInt32.length){inputWords0=swapWord(inputInt32[offset]);inputWords1=swapWord(inputInt32[offset+1]);inputWords2=swapWord(inputInt32[offset+2]);inputWords3=swapWord(inputInt32[offset+3]);s0=inputWords0^invKeySchedule[0];s1=inputWords3^invKeySchedule[1];s2=inputWords2^invKeySchedule[2];s3=inputWords1^invKeySchedule[3];ksRow=4;// Iterate through the rounds of decryption
for(i=1;i<nRounds;i++){t0=invSubMix0[s0>>>24]^invSubMix1[s1>>16&0xff]^invSubMix2[s2>>8&0xff]^invSubMix3[s3&0xff]^invKeySchedule[ksRow];t1=invSubMix0[s1>>>24]^invSubMix1[s2>>16&0xff]^invSubMix2[s3>>8&0xff]^invSubMix3[s0&0xff]^invKeySchedule[ksRow+1];t2=invSubMix0[s2>>>24]^invSubMix1[s3>>16&0xff]^invSubMix2[s0>>8&0xff]^invSubMix3[s1&0xff]^invKeySchedule[ksRow+2];t3=invSubMix0[s3>>>24]^invSubMix1[s0>>16&0xff]^invSubMix2[s1>>8&0xff]^invSubMix3[s2&0xff]^invKeySchedule[ksRow+3];// Update state
s0=t0;s1=t1;s2=t2;s3=t3;ksRow=ksRow+4;}// Shift rows, sub bytes, add round key
t0=invSBOX[s0>>>24]<<24^invSBOX[s1>>16&0xff]<<16^invSBOX[s2>>8&0xff]<<8^invSBOX[s3&0xff]^invKeySchedule[ksRow];t1=invSBOX[s1>>>24]<<24^invSBOX[s2>>16&0xff]<<16^invSBOX[s3>>8&0xff]<<8^invSBOX[s0&0xff]^invKeySchedule[ksRow+1];t2=invSBOX[s2>>>24]<<24^invSBOX[s3>>16&0xff]<<16^invSBOX[s0>>8&0xff]<<8^invSBOX[s1&0xff]^invKeySchedule[ksRow+2];t3=invSBOX[s3>>>24]<<24^invSBOX[s0>>16&0xff]<<16^invSBOX[s1>>8&0xff]<<8^invSBOX[s2&0xff]^invKeySchedule[ksRow+3];ksRow=ksRow+3;// Write
outputInt32[offset]=swapWord(t0^initVector0);outputInt32[offset+1]=swapWord(t3^initVector1);outputInt32[offset+2]=swapWord(t2^initVector2);outputInt32[offset+3]=swapWord(t1^initVector3);// reset initVector to last 4 unsigned int
initVector0=inputWords0;initVector1=inputWords1;initVector2=inputWords2;initVector3=inputWords3;offset=offset+4;}return removePKCS7Padding?removePadding(outputInt32.buffer):outputInt32.buffer;};AESDecryptor.prototype.destroy=function(){this.key=undefined;this.keySize=undefined;this.ksRows=undefined;this.sBox=undefined;this.invSBox=undefined;this.subMix=undefined;this.invSubMix=undefined;this.keySchedule=undefined;this.invKeySchedule=undefined;this.rcon=undefined;};return AESDecryptor;}();exports.default=AESDecryptor;/***/},/***/"./src/crypt/decrypter.js":/*!********************************!*\
  !*** ./src/crypt/decrypter.js ***!
  \********************************//*! no static exports found *//*! ModuleConcatenation bailout: Module is not an ECMAScript module *//***/function srcCryptDecrypterJs(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var aes_crypto_1=__webpack_require__(/*! ./aes-crypto */"./src/crypt/aes-crypto.js");var fast_aes_key_1=__webpack_require__(/*! ./fast-aes-key */"./src/crypt/fast-aes-key.js");var aes_decryptor_1=__webpack_require__(/*! ./aes-decryptor */"./src/crypt/aes-decryptor.js");var errors_1=__webpack_require__(/*! ../errors */"./src/errors.js");var logger_1=__webpack_require__(/*! ../utils/logger */"./src/utils/logger.js");var events_1=__webpack_require__(/*! ../events */"./src/events.js");var get_self_scope_1=__webpack_require__(/*! ../utils/get-self-scope */"./src/utils/get-self-scope.js");// see https://stackoverflow.com/a/11237259/589493
var global=get_self_scope_1.getSelfScope();// safeguard for code that might run both on worker and main thread
var Decrypter=/** @class */function(){function Decrypter(observer,config,_a){var _b=(_a===void 0?{}:_a).removePKCS7Padding,removePKCS7Padding=_b===void 0?true:_b;this.logEnabled=true;this.observer=observer;this.config=config;this.removePKCS7Padding=removePKCS7Padding;// built in decryptor expects PKCS7 padding
if(removePKCS7Padding){try{var browserCrypto=global.crypto;if(browserCrypto){this.subtle=browserCrypto.subtle||browserCrypto.webkitSubtle;}}catch(e){}}this.disableWebCrypto=!this.subtle;}Decrypter.prototype.isSync=function(){return this.disableWebCrypto&&this.config.enableSoftwareAES;};Decrypter.prototype.decrypt=function(data,key,iv,callback){var _this=this;if(this.disableWebCrypto&&this.config.enableSoftwareAES){if(this.logEnabled){logger_1.logger.log('JS AES decrypt');this.logEnabled=false;}var decryptor=this.decryptor;if(!decryptor){this.decryptor=decryptor=new aes_decryptor_1.default();}decryptor.expandKey(key);callback(decryptor.decrypt(data,0,iv,this.removePKCS7Padding));}else{if(this.logEnabled){logger_1.logger.log('WebCrypto AES decrypt');this.logEnabled=false;}var subtle_1=this.subtle;if(this.key!==key){this.key=key;this.fastAesKey=new fast_aes_key_1.default(subtle_1,key);}this.fastAesKey.expandKey().then(function(aesKey){// decrypt using web crypto
var crypto=new aes_crypto_1.default(subtle_1,iv);crypto.decrypt(data,aesKey).catch(function(err){_this.onWebCryptoError(err,data,key,iv,callback);}).then(function(result){callback(result);});}).catch(function(err){_this.onWebCryptoError(err,data,key,iv,callback);});}};Decrypter.prototype.onWebCryptoError=function(err,data,key,iv,callback){if(this.config.enableSoftwareAES){logger_1.logger.log('WebCrypto Error, disable WebCrypto API');this.disableWebCrypto=true;this.logEnabled=true;this.decrypt(data,key,iv,callback);}else{logger_1.logger.error("decrypting error : "+err.message);this.observer.trigger(events_1.default.ERROR,{type:errors_1.ErrorTypes.MEDIA_ERROR,details:errors_1.ErrorDetails.FRAG_DECRYPT_ERROR,fatal:true,reason:err.message});}};Decrypter.prototype.destroy=function(){var decryptor=this.decryptor;if(decryptor){decryptor.destroy();this.decryptor=undefined;}};return Decrypter;}();exports.default=Decrypter;/***/},/***/"./src/crypt/fast-aes-key.js":/*!***********************************!*\
  !*** ./src/crypt/fast-aes-key.js ***!
  \***********************************//*! no static exports found *//*! ModuleConcatenation bailout: Module is not an ECMAScript module *//***/function srcCryptFastAesKeyJs(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var FastAESKey=/** @class */function(){function FastAESKey(subtle,key){this.subtle=subtle;this.key=key;}FastAESKey.prototype.expandKey=function(){return this.subtle.importKey('raw',this.key,{name:'AES-CBC'},false,['encrypt','decrypt']);};return FastAESKey;}();exports.default=FastAESKey;/***/},/***/"./src/demux/aacdemuxer.js":/*!*********************************!*\
  !*** ./src/demux/aacdemuxer.js ***!
  \*********************************//*! no static exports found *//*! ModuleConcatenation bailout: Module is not an ECMAScript module *//***/function srcDemuxAacdemuxerJs(module,exports,__webpack_require__){"use strict";/* WEBPACK VAR INJECTION */(function(Number){Object.defineProperty(exports,"__esModule",{value:true});/**
 * AAC demuxer
 */var ADTS=__webpack_require__(/*! ./adts */"./src/demux/adts.js");var logger_1=__webpack_require__(/*! ../utils/logger */"./src/utils/logger.js");var id3_1=__webpack_require__(/*! ../demux/id3 */"./src/demux/id3.js");var AACDemuxer=/** @class */function(){function AACDemuxer(observer,remuxer,config){this.observer=observer;this.config=config;this.remuxer=remuxer;}AACDemuxer.prototype.resetInitSegment=function(initSegment,audioCodec,videoCodec,duration){this._audioTrack={container:'audio/adts',type:'audio',id:0,sequenceNumber:0,isAAC:true,samples:[],len:0,manifestCodec:audioCodec,duration:duration,inputTimeScale:90000};};AACDemuxer.prototype.resetTimeStamp=function(){};AACDemuxer.probe=function(data){if(!data){return false;}// Check for the ADTS sync word
// Look for ADTS header | 1111 1111 | 1111 X00X | where X can be either 0 or 1
// Layer bits (position 14 and 15) in header should be always 0 for ADTS
// More info https://wiki.multimedia.cx/index.php?title=ADTS
var id3Data=id3_1.default.getID3Data(data,0)||[];var offset=id3Data.length;for(var length_1=data.length;offset<length_1;offset++){if(ADTS.probe(data,offset)){logger_1.logger.log('ADTS sync word found !');return true;}}return false;};// feed incoming data to the front of the parsing pipeline
AACDemuxer.prototype.append=function(data,timeOffset,contiguous,accurateTimeOffset){var track=this._audioTrack;var id3Data=id3_1.default.getID3Data(data,0)||[];var timestamp=id3_1.default.getTimeStamp(id3Data);var pts=Number.isFinite(timestamp)?timestamp*90:timeOffset*90000;var frameIndex=0;var stamp=pts;var length=data.length;var offset=id3Data.length;var id3Samples=[{pts:stamp,dts:stamp,data:id3Data}];while(offset<length-1){if(ADTS.isHeader(data,offset)&&offset+5<length){ADTS.initTrackConfig(track,this.observer,data,offset,track.manifestCodec);var frame=ADTS.appendFrame(track,data,offset,pts,frameIndex);if(frame){offset+=frame.length;stamp=frame.sample.pts;frameIndex++;}else{logger_1.logger.log('Unable to parse AAC frame');break;}}else if(id3_1.default.isHeader(data,offset)){id3Data=id3_1.default.getID3Data(data,offset);id3Samples.push({pts:stamp,dts:stamp,data:id3Data});offset+=id3Data.length;}else{// nothing found, keep looking
offset++;}}this.remuxer.remux(track,{samples:[]},{samples:id3Samples,inputTimeScale:90000},{samples:[]},timeOffset,contiguous,accurateTimeOffset);};AACDemuxer.prototype.destroy=function(){};return AACDemuxer;}();exports.default=AACDemuxer;/* WEBPACK VAR INJECTION */}).call(this,__webpack_require__(/*! ./src/polyfills/number */"./src/polyfills/number.js")["Number"]);/***/},/***/"./src/demux/adts.js":/*!***************************!*\
  !*** ./src/demux/adts.js ***!
  \***************************//*! no static exports found *//*! ModuleConcatenation bailout: Module is not an ECMAScript module *//***/function srcDemuxAdtsJs(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});/**
 *  ADTS parser helper
 */var logger_1=__webpack_require__(/*! ../utils/logger */"./src/utils/logger.js");var errors_1=__webpack_require__(/*! ../errors */"./src/errors.js");var events_1=__webpack_require__(/*! ../events */"./src/events.js");function getAudioConfig(observer,data,offset,audioCodec){var adtsObjectType,// :int
adtsSampleingIndex,// :int
adtsExtensionSampleingIndex,// :int
adtsChanelConfig,// :int
config,userAgent=navigator.userAgent.toLowerCase(),manifestCodec=audioCodec,adtsSampleingRates=[96000,88200,64000,48000,44100,32000,24000,22050,16000,12000,11025,8000,7350];// byte 2
adtsObjectType=((data[offset+2]&0xC0)>>>6)+1;adtsSampleingIndex=(data[offset+2]&0x3C)>>>2;if(adtsSampleingIndex>adtsSampleingRates.length-1){observer.trigger(events_1.default.ERROR,{type:errors_1.ErrorTypes.MEDIA_ERROR,details:errors_1.ErrorDetails.FRAG_PARSING_ERROR,fatal:true,reason:"invalid ADTS sampling index:"+adtsSampleingIndex});return;}adtsChanelConfig=(data[offset+2]&0x01)<<2;// byte 3
adtsChanelConfig|=(data[offset+3]&0xC0)>>>6;logger_1.logger.log("manifest codec:"+audioCodec+",ADTS data:type:"+adtsObjectType+",sampleingIndex:"+adtsSampleingIndex+"["+adtsSampleingRates[adtsSampleingIndex]+"Hz],channelConfig:"+adtsChanelConfig);// firefox: freq less than 24kHz = AAC SBR (HE-AAC)
if(/firefox/i.test(userAgent)){if(adtsSampleingIndex>=6){adtsObjectType=5;config=new Array(4);// HE-AAC uses SBR (Spectral Band Replication) , high frequencies are constructed from low frequencies
// there is a factor 2 between frame sample rate and output sample rate
// multiply frequency by 2 (see table below, equivalent to substract 3)
adtsExtensionSampleingIndex=adtsSampleingIndex-3;}else{adtsObjectType=2;config=new Array(2);adtsExtensionSampleingIndex=adtsSampleingIndex;}// Android : always use AAC
}else if(userAgent.indexOf('android')!==-1){adtsObjectType=2;config=new Array(2);adtsExtensionSampleingIndex=adtsSampleingIndex;}else{/*  for other browsers (Chrome/Vivaldi/Opera ...)
            always force audio type to be HE-AAC SBR, as some browsers do not support audio codec switch properly (like Chrome ...)
        */adtsObjectType=5;config=new Array(4);// if (manifest codec is HE-AAC or HE-AACv2) OR (manifest codec not specified AND frequency less than 24kHz)
if(audioCodec&&(audioCodec.indexOf('mp4a.40.29')!==-1||audioCodec.indexOf('mp4a.40.5')!==-1)||!audioCodec&&adtsSampleingIndex>=6){// HE-AAC uses SBR (Spectral Band Replication) , high frequencies are constructed from low frequencies
// there is a factor 2 between frame sample rate and output sample rate
// multiply frequency by 2 (see table below, equivalent to substract 3)
adtsExtensionSampleingIndex=adtsSampleingIndex-3;}else{// if (manifest codec is AAC) AND (frequency less than 24kHz AND nb channel is 1) OR (manifest codec not specified and mono audio)
// Chrome fails to play back with low frequency AAC LC mono when initialized with HE-AAC.  This is not a problem with stereo.
if(audioCodec&&audioCodec.indexOf('mp4a.40.2')!==-1&&(adtsSampleingIndex>=6&&adtsChanelConfig===1||/vivaldi/i.test(userAgent))||!audioCodec&&adtsChanelConfig===1){adtsObjectType=2;config=new Array(2);}adtsExtensionSampleingIndex=adtsSampleingIndex;}}/* refer to http://wiki.multimedia.cx/index.php?title=MPEG-4_Audio#Audio_Specific_Config
        ISO 14496-3 (AAC).pdf - Table 1.13 — Syntax of AudioSpecificConfig()
      Audio Profile / Audio Object Type
      0: Null
      1: AAC Main
      2: AAC LC (Low Complexity)
      3: AAC SSR (Scalable Sample Rate)
      4: AAC LTP (Long Term Prediction)
      5: SBR (Spectral Band Replication)
      6: AAC Scalable
     sampling freq
      0: 96000 Hz
      1: 88200 Hz
      2: 64000 Hz
      3: 48000 Hz
      4: 44100 Hz
      5: 32000 Hz
      6: 24000 Hz
      7: 22050 Hz
      8: 16000 Hz
      9: 12000 Hz
      10: 11025 Hz
      11: 8000 Hz
      12: 7350 Hz
      13: Reserved
      14: Reserved
      15: frequency is written explictly
      Channel Configurations
      These are the channel configurations:
      0: Defined in AOT Specifc Config
      1: 1 channel: front-center
      2: 2 channels: front-left, front-right
    */// audioObjectType = profile => profile, the MPEG-4 Audio Object Type minus 1
config[0]=adtsObjectType<<3;// samplingFrequencyIndex
config[0]|=(adtsSampleingIndex&0x0E)>>1;config[1]|=(adtsSampleingIndex&0x01)<<7;// channelConfiguration
config[1]|=adtsChanelConfig<<3;if(adtsObjectType===5){// adtsExtensionSampleingIndex
config[1]|=(adtsExtensionSampleingIndex&0x0E)>>1;config[2]=(adtsExtensionSampleingIndex&0x01)<<7;// adtsObjectType (force to 2, chrome is checking that object type is less than 5 ???
//    https://chromium.googlesource.com/chromium/src.git/+/master/media/formats/mp4/aac.cc
config[2]|=2<<2;config[3]=0;}return{config:config,samplerate:adtsSampleingRates[adtsSampleingIndex],channelCount:adtsChanelConfig,codec:'mp4a.40.'+adtsObjectType,manifestCodec:manifestCodec};}exports.getAudioConfig=getAudioConfig;function isHeaderPattern(data,offset){return data[offset]===0xff&&(data[offset+1]&0xf6)===0xf0;}exports.isHeaderPattern=isHeaderPattern;function getHeaderLength(data,offset){return data[offset+1]&0x01?7:9;}exports.getHeaderLength=getHeaderLength;function getFullFrameLength(data,offset){return(data[offset+3]&0x03)<<11|data[offset+4]<<3|(data[offset+5]&0xE0)>>>5;}exports.getFullFrameLength=getFullFrameLength;function isHeader(data,offset){// Look for ADTS header | 1111 1111 | 1111 X00X | where X can be either 0 or 1
// Layer bits (position 14 and 15) in header should be always 0 for ADTS
// More info https://wiki.multimedia.cx/index.php?title=ADTS
if(offset+1<data.length&&isHeaderPattern(data,offset)){return true;}return false;}exports.isHeader=isHeader;function probe(data,offset){// same as isHeader but we also check that ADTS frame follows last ADTS frame
// or end of data is reached
if(offset+1<data.length&&isHeaderPattern(data,offset)){// ADTS header Length
var headerLength=getHeaderLength(data,offset);// ADTS frame Length
var frameLength=headerLength;if(offset+5<data.length){frameLength=getFullFrameLength(data,offset);}var newOffset=offset+frameLength;if(newOffset===data.length||newOffset+1<data.length&&isHeaderPattern(data,newOffset)){return true;}}return false;}exports.probe=probe;function initTrackConfig(track,observer,data,offset,audioCodec){if(!track.samplerate){var config=getAudioConfig(observer,data,offset,audioCodec);track.config=config.config;track.samplerate=config.samplerate;track.channelCount=config.channelCount;track.codec=config.codec;track.manifestCodec=config.manifestCodec;logger_1.logger.log("parsed codec:"+track.codec+",rate:"+config.samplerate+",nb channel:"+config.channelCount);}}exports.initTrackConfig=initTrackConfig;function getFrameDuration(samplerate){return 1024*90000/samplerate;}exports.getFrameDuration=getFrameDuration;function parseFrameHeader(data,offset,pts,frameIndex,frameDuration){var headerLength,frameLength,stamp;var length=data.length;// The protection skip bit tells us if we have 2 bytes of CRC data at the end of the ADTS header
headerLength=getHeaderLength(data,offset);// retrieve frame size
frameLength=getFullFrameLength(data,offset);frameLength-=headerLength;if(frameLength>0&&offset+headerLength+frameLength<=length){stamp=pts+frameIndex*frameDuration;// logger.log(`AAC frame, offset/length/total/pts:${offset+headerLength}/${frameLength}/${data.byteLength}/${(stamp/90).toFixed(0)}`);
return{headerLength:headerLength,frameLength:frameLength,stamp:stamp};}return undefined;}exports.parseFrameHeader=parseFrameHeader;function appendFrame(track,data,offset,pts,frameIndex){var frameDuration=getFrameDuration(track.samplerate);var header=parseFrameHeader(data,offset,pts,frameIndex,frameDuration);if(header){var stamp=header.stamp;var headerLength=header.headerLength;var frameLength=header.frameLength;// logger.log(`AAC frame, offset/length/total/pts:${offset+headerLength}/${frameLength}/${data.byteLength}/${(stamp/90).toFixed(0)}`);
var aacSample={unit:data.subarray(offset+headerLength,offset+headerLength+frameLength),pts:stamp,dts:stamp};track.samples.push(aacSample);track.len+=frameLength;return{sample:aacSample,length:frameLength+headerLength};}return undefined;}exports.appendFrame=appendFrame;/***/},/***/"./src/demux/demuxer-inline.js":/*!*************************************!*\
  !*** ./src/demux/demuxer-inline.js ***!
  \*************************************//*! no static exports found *//*! ModuleConcatenation bailout: Module is not an ECMAScript module *//***/function srcDemuxDemuxerInlineJs(module,exports,__webpack_require__){"use strict";/**
 *
 * inline demuxer: probe fragments and instantiate
 * appropriate demuxer depending on content type (TSDemuxer, AACDemuxer, ...)
 *
 */Object.defineProperty(exports,"__esModule",{value:true});var events_1=__webpack_require__(/*! ../events */"./src/events.js");var errors_1=__webpack_require__(/*! ../errors */"./src/errors.js");var decrypter_1=__webpack_require__(/*! ../crypt/decrypter */"./src/crypt/decrypter.js");var aacdemuxer_1=__webpack_require__(/*! ../demux/aacdemuxer */"./src/demux/aacdemuxer.js");var mp4demuxer_1=__webpack_require__(/*! ../demux/mp4demuxer */"./src/demux/mp4demuxer.js");var tsdemuxer_1=__webpack_require__(/*! ../demux/tsdemuxer */"./src/demux/tsdemuxer.js");var mp3demuxer_1=__webpack_require__(/*! ../demux/mp3demuxer */"./src/demux/mp3demuxer.js");var mp4_remuxer_1=__webpack_require__(/*! ../remux/mp4-remuxer */"./src/remux/mp4-remuxer.js");var passthrough_remuxer_1=__webpack_require__(/*! ../remux/passthrough-remuxer */"./src/remux/passthrough-remuxer.js");var get_self_scope_1=__webpack_require__(/*! ../utils/get-self-scope */"./src/utils/get-self-scope.js");var logger_1=__webpack_require__(/*! ../utils/logger */"./src/utils/logger.js");// see https://stackoverflow.com/a/11237259/589493
var global=get_self_scope_1.getSelfScope();// safeguard for code that might run both on worker and main thread
var now;// performance.now() not available on WebWorker, at least on Safari Desktop
try{now=global.performance.now.bind(global.performance);}catch(err){logger_1.logger.debug('Unable to use Performance API on this environment');now=global.Date.now;}var DemuxerInline=/** @class */function(){function DemuxerInline(observer,typeSupported,config,vendor){this.observer=observer;this.typeSupported=typeSupported;this.config=config;this.vendor=vendor;}DemuxerInline.prototype.destroy=function(){var demuxer=this.demuxer;if(demuxer){demuxer.destroy();}};DemuxerInline.prototype.push=function(data,decryptdata,initSegment,audioCodec,videoCodec,timeOffset,discontinuity,trackSwitch,contiguous,duration,accurateTimeOffset,defaultInitPTS){var _this=this;if(data.byteLength>0&&decryptdata!=null&&decryptdata.key!=null&&decryptdata.method==='AES-128'){var decrypter=this.decrypter;if(decrypter==null){decrypter=this.decrypter=new decrypter_1.default(this.observer,this.config);}var startTime_1=now();decrypter.decrypt(data,decryptdata.key.buffer,decryptdata.iv.buffer,function(decryptedData){var endTime=now();_this.observer.trigger(events_1.default.FRAG_DECRYPTED,{stats:{tstart:startTime_1,tdecrypt:endTime}});_this.pushDecrypted(new Uint8Array(decryptedData),decryptdata,new Uint8Array(initSegment),audioCodec,videoCodec,timeOffset,discontinuity,trackSwitch,contiguous,duration,accurateTimeOffset,defaultInitPTS);});}else{this.pushDecrypted(new Uint8Array(data),decryptdata,new Uint8Array(initSegment),audioCodec,videoCodec,timeOffset,discontinuity,trackSwitch,contiguous,duration,accurateTimeOffset,defaultInitPTS);}};DemuxerInline.prototype.pushDecrypted=function(data,decryptdata,initSegment,audioCodec,videoCodec,timeOffset,discontinuity,trackSwitch,contiguous,duration,accurateTimeOffset,defaultInitPTS){var demuxer=this.demuxer;if(!demuxer||// in case of continuity change, or track switch
// we might switch from content type (AAC container to TS container, or TS to fmp4 for example)
// so let's check that current demuxer is still valid
(discontinuity||trackSwitch)&&!this.probe(data)){var observer=this.observer;var typeSupported=this.typeSupported;var config=this.config;// probing order is TS/AAC/MP3/MP4
var muxConfig=[{demux:tsdemuxer_1.default,remux:mp4_remuxer_1.default},{demux:mp4demuxer_1.default,remux:passthrough_remuxer_1.default},{demux:aacdemuxer_1.default,remux:mp4_remuxer_1.default},{demux:mp3demuxer_1.default,remux:mp4_remuxer_1.default}];// probe for content type
for(var i=0,len=muxConfig.length;i<len;i++){var mux=muxConfig[i];var probe=mux.demux.probe;if(probe(data)){var remuxer_1=this.remuxer=new mux.remux(observer,config,typeSupported,this.vendor);demuxer=new mux.demux(observer,remuxer_1,config,typeSupported);this.probe=probe;break;}}if(!demuxer){observer.trigger(events_1.default.ERROR,{type:errors_1.ErrorTypes.MEDIA_ERROR,details:errors_1.ErrorDetails.FRAG_PARSING_ERROR,fatal:true,reason:'no demux matching with content found'});return;}this.demuxer=demuxer;}var remuxer=this.remuxer;if(discontinuity||trackSwitch){demuxer.resetInitSegment(initSegment,audioCodec,videoCodec,duration);remuxer.resetInitSegment();}if(discontinuity){demuxer.resetTimeStamp(defaultInitPTS);remuxer.resetTimeStamp(defaultInitPTS);}if(typeof demuxer.setDecryptData==='function'){demuxer.setDecryptData(decryptdata);}demuxer.append(data,timeOffset,contiguous,accurateTimeOffset);};return DemuxerInline;}();exports.default=DemuxerInline;/***/},/***/"./src/demux/demuxer-worker.js":/*!*************************************!*\
  !*** ./src/demux/demuxer-worker.js ***!
  \*************************************//*! no static exports found *//*! ModuleConcatenation bailout: Module is not an ECMAScript module *//***/function srcDemuxDemuxerWorkerJs(module,exports,__webpack_require__){"use strict";/* demuxer web worker.
 *  - listen to worker message, and trigger DemuxerInline upon reception of Fragments.
 *  - provides MP4 Boxes back to main thread using [transferable objects](https://developers.google.com/web/updates/2011/12/Transferable-Objects-Lightning-Fast) in order to minimize message passing overhead.
 */Object.defineProperty(exports,"__esModule",{value:true});var demuxer_inline_1=__webpack_require__(/*! ../demux/demuxer-inline */"./src/demux/demuxer-inline.js");var events_1=__webpack_require__(/*! ../events */"./src/events.js");var logger_1=__webpack_require__(/*! ../utils/logger */"./src/utils/logger.js");var events_2=__webpack_require__(/*! events */"./node_modules/node-libs-browser/node_modules/events/events.js");var DemuxerWorker=function DemuxerWorker(self){// observer setup
var observer=new events_2.EventEmitter();observer.trigger=function trigger(event){var data=[];for(var _i=1;_i<arguments.length;_i++){data[_i-1]=arguments[_i];}observer.emit.apply(observer,[event,event].concat(data));};observer.off=function off(event){var data=[];for(var _i=1;_i<arguments.length;_i++){data[_i-1]=arguments[_i];}observer.removeListener.apply(observer,[event].concat(data));};var forwardMessage=function forwardMessage(ev,data){self.postMessage({event:ev,data:data});};self.addEventListener('message',function(ev){var data=ev.data;// console.log('demuxer cmd:' + data.cmd);
switch(data.cmd){case'init':var config=JSON.parse(data.config);self.demuxer=new demuxer_inline_1.default(observer,data.typeSupported,config,data.vendor);logger_1.enableLogs(config.debug);// signal end of worker init
forwardMessage('init',null);break;case'demux':self.demuxer.push(data.data,data.decryptdata,data.initSegment,data.audioCodec,data.videoCodec,data.timeOffset,data.discontinuity,data.trackSwitch,data.contiguous,data.duration,data.accurateTimeOffset,data.defaultInitPTS);break;default:break;}});// forward events to main thread
observer.on(events_1.default.FRAG_DECRYPTED,forwardMessage);observer.on(events_1.default.FRAG_PARSING_INIT_SEGMENT,forwardMessage);observer.on(events_1.default.FRAG_PARSED,forwardMessage);observer.on(events_1.default.ERROR,forwardMessage);observer.on(events_1.default.FRAG_PARSING_METADATA,forwardMessage);observer.on(events_1.default.FRAG_PARSING_USERDATA,forwardMessage);observer.on(events_1.default.INIT_PTS_FOUND,forwardMessage);// special case for FRAG_PARSING_DATA: pass data1/data2 as transferable object (no copy)
observer.on(events_1.default.FRAG_PARSING_DATA,function(ev,data){var transferable=[];var message={event:ev,data:data};if(data.data1){message.data1=data.data1.buffer;transferable.push(data.data1.buffer);delete data.data1;}if(data.data2){message.data2=data.data2.buffer;transferable.push(data.data2.buffer);delete data.data2;}self.postMessage(message,transferable);});};exports.default=DemuxerWorker;/***/},/***/"./src/demux/demuxer.js":/*!******************************!*\
  !*** ./src/demux/demuxer.js ***!
  \******************************//*! no static exports found *//*! ModuleConcatenation bailout: Module is not an ECMAScript module *//***/function srcDemuxDemuxerJs(module,exports,__webpack_require__){"use strict";/* WEBPACK VAR INJECTION */(function(Number){Object.defineProperty(exports,"__esModule",{value:true});var work=__webpack_require__(/*! webworkify-webpack */"./node_modules/webworkify-webpack/index.js");var events_1=__webpack_require__(/*! ../events */"./src/events.js");var demuxer_inline_1=__webpack_require__(/*! ../demux/demuxer-inline */"./src/demux/demuxer-inline.js");var logger_1=__webpack_require__(/*! ../utils/logger */"./src/utils/logger.js");var errors_1=__webpack_require__(/*! ../errors */"./src/errors.js");var mediasource_helper_1=__webpack_require__(/*! ../utils/mediasource-helper */"./src/utils/mediasource-helper.js");var get_self_scope_1=__webpack_require__(/*! ../utils/get-self-scope */"./src/utils/get-self-scope.js");var observer_1=__webpack_require__(/*! ../observer */"./src/observer.js");// see https://stackoverflow.com/a/11237259/589493
var global=get_self_scope_1.getSelfScope();// safeguard for code that might run both on worker and main thread
var MediaSource=mediasource_helper_1.getMediaSource();var Demuxer=/** @class */function(){function Demuxer(hls,id){var _this=this;this.hls=hls;this.id=id;var observer=this.observer=new observer_1.Observer();var config=hls.config;var forwardMessage=function forwardMessage(ev,data){data=data||{};data.frag=_this.frag;data.id=_this.id;hls.trigger(ev,data);};// forward events to main thread
observer.on(events_1.default.FRAG_DECRYPTED,forwardMessage);observer.on(events_1.default.FRAG_PARSING_INIT_SEGMENT,forwardMessage);observer.on(events_1.default.FRAG_PARSING_DATA,forwardMessage);observer.on(events_1.default.FRAG_PARSED,forwardMessage);observer.on(events_1.default.ERROR,forwardMessage);observer.on(events_1.default.FRAG_PARSING_METADATA,forwardMessage);observer.on(events_1.default.FRAG_PARSING_USERDATA,forwardMessage);observer.on(events_1.default.INIT_PTS_FOUND,forwardMessage);var typeSupported={mp4:MediaSource.isTypeSupported('video/mp4'),mpeg:MediaSource.isTypeSupported('audio/mpeg'),mp3:MediaSource.isTypeSupported('audio/mp4; codecs="mp3"')};// navigator.vendor is not always available in Web Worker
// refer to https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/navigator
var vendor=navigator.vendor;if(config.enableWorker&&typeof Worker!=='undefined'){logger_1.logger.log('demuxing in webworker');var w=void 0;try{w=this.w=work(/*require.resolve*//*! ../demux/demuxer-worker.js */"./src/demux/demuxer-worker.js");this.onwmsg=this.onWorkerMessage.bind(this);w.addEventListener('message',this.onwmsg);w.onerror=function(event){hls.trigger(events_1.default.ERROR,{type:errors_1.ErrorTypes.OTHER_ERROR,details:errors_1.ErrorDetails.INTERNAL_EXCEPTION,fatal:true,event:'demuxerWorker',err:{message:event.message+' ('+event.filename+':'+event.lineno+')'}});};w.postMessage({cmd:'init',typeSupported:typeSupported,vendor:vendor,id:id,config:JSON.stringify(config)});}catch(err){logger_1.logger.warn('Error in worker:',err);logger_1.logger.error('Error while initializing DemuxerWorker, fallback on DemuxerInline');if(w){// revoke the Object URL that was used to create demuxer worker, so as not to leak it
global.URL.revokeObjectURL(w.objectURL);}this.demuxer=new demuxer_inline_1.default(observer,typeSupported,config,vendor);this.w=undefined;}}else{this.demuxer=new demuxer_inline_1.default(observer,typeSupported,config,vendor);}}Demuxer.prototype.destroy=function(){var w=this.w;if(w){w.removeEventListener('message',this.onwmsg);w.terminate();this.w=null;}else{var demuxer=this.demuxer;if(demuxer){demuxer.destroy();this.demuxer=null;}}var observer=this.observer;if(observer){observer.removeAllListeners();this.observer=null;}};Demuxer.prototype.push=function(data,initSegment,audioCodec,videoCodec,frag,duration,accurateTimeOffset,defaultInitPTS){var w=this.w;var timeOffset=Number.isFinite(frag.startPTS)?frag.startPTS:frag.start;var decryptdata=frag.decryptdata;var lastFrag=this.frag;var discontinuity=!(lastFrag&&frag.cc===lastFrag.cc);var trackSwitch=!(lastFrag&&frag.level===lastFrag.level);var nextSN=lastFrag&&frag.sn===lastFrag.sn+1;var contiguous=!trackSwitch&&nextSN;if(discontinuity){logger_1.logger.log(this.id+":discontinuity detected");}if(trackSwitch){logger_1.logger.log(this.id+":switch detected");}this.frag=frag;if(w){// post fragment payload as transferable objects for ArrayBuffer (no copy)
w.postMessage({cmd:'demux',data:data,decryptdata:decryptdata,initSegment:initSegment,audioCodec:audioCodec,videoCodec:videoCodec,timeOffset:timeOffset,discontinuity:discontinuity,trackSwitch:trackSwitch,contiguous:contiguous,duration:duration,accurateTimeOffset:accurateTimeOffset,defaultInitPTS:defaultInitPTS},data instanceof ArrayBuffer?[data]:[]);}else{var demuxer=this.demuxer;if(demuxer){demuxer.push(data,decryptdata,initSegment,audioCodec,videoCodec,timeOffset,discontinuity,trackSwitch,contiguous,duration,accurateTimeOffset,defaultInitPTS);}}};Demuxer.prototype.onWorkerMessage=function(ev){var data=ev.data,hls=this.hls;switch(data.event){case'init':// revoke the Object URL that was used to create demuxer worker, so as not to leak it
global.URL.revokeObjectURL(this.w.objectURL);break;// special case for FRAG_PARSING_DATA: data1 and data2 are transferable objects
case events_1.default.FRAG_PARSING_DATA:data.data.data1=new Uint8Array(data.data1);if(data.data2){data.data.data2=new Uint8Array(data.data2);}/* falls through */default:data.data=data.data||{};data.data.frag=this.frag;data.data.id=this.id;hls.trigger(data.event,data.data);break;}};return Demuxer;}();exports.default=Demuxer;/* WEBPACK VAR INJECTION */}).call(this,__webpack_require__(/*! ./src/polyfills/number */"./src/polyfills/number.js")["Number"]);/***/},/***/"./src/demux/exp-golomb.js":/*!*********************************!*\
  !*** ./src/demux/exp-golomb.js ***!
  \*********************************//*! no static exports found *//*! ModuleConcatenation bailout: Module is not an ECMAScript module *//***/function srcDemuxExpGolombJs(module,exports,__webpack_require__){"use strict";/**
 * Parser for exponential Golomb codes, a variable-bitwidth number encoding scheme used by h264.
*/Object.defineProperty(exports,"__esModule",{value:true});var logger_1=__webpack_require__(/*! ../utils/logger */"./src/utils/logger.js");var ExpGolomb=/** @class */function(){function ExpGolomb(data){this.data=data;// the number of bytes left to examine in this.data
this.bytesAvailable=data.byteLength;// the current word being examined
this.word=0;// :uint
// the number of bits left to examine in the current word
this.bitsAvailable=0;// :uint
}// ():void
ExpGolomb.prototype.loadWord=function(){var data=this.data,bytesAvailable=this.bytesAvailable,position=data.byteLength-bytesAvailable,workingBytes=new Uint8Array(4),availableBytes=Math.min(4,bytesAvailable);if(availableBytes===0){throw new Error('no bytes available');}workingBytes.set(data.subarray(position,position+availableBytes));this.word=new DataView(workingBytes.buffer).getUint32(0);// track the amount of this.data that has been processed
this.bitsAvailable=availableBytes*8;this.bytesAvailable-=availableBytes;};// (count:int):void
ExpGolomb.prototype.skipBits=function(count){var skipBytes;// :int
if(this.bitsAvailable>count){this.word<<=count;this.bitsAvailable-=count;}else{count-=this.bitsAvailable;skipBytes=count>>3;count-=skipBytes>>3;this.bytesAvailable-=skipBytes;this.loadWord();this.word<<=count;this.bitsAvailable-=count;}};// (size:int):uint
ExpGolomb.prototype.readBits=function(size){var bits=Math.min(this.bitsAvailable,size),// :uint
valu=this.word>>>32-bits;// :uint
if(size>32){logger_1.logger.error('Cannot read more than 32 bits at a time');}this.bitsAvailable-=bits;if(this.bitsAvailable>0){this.word<<=bits;}else if(this.bytesAvailable>0){this.loadWord();}bits=size-bits;if(bits>0&&this.bitsAvailable){return valu<<bits|this.readBits(bits);}else{return valu;}};// ():uint
ExpGolomb.prototype.skipLZ=function(){var leadingZeroCount;// :uint
for(leadingZeroCount=0;leadingZeroCount<this.bitsAvailable;++leadingZeroCount){if((this.word&0x80000000>>>leadingZeroCount)!==0){// the first bit of working word is 1
this.word<<=leadingZeroCount;this.bitsAvailable-=leadingZeroCount;return leadingZeroCount;}}// we exhausted word and still have not found a 1
this.loadWord();return leadingZeroCount+this.skipLZ();};// ():void
ExpGolomb.prototype.skipUEG=function(){this.skipBits(1+this.skipLZ());};// ():void
ExpGolomb.prototype.skipEG=function(){this.skipBits(1+this.skipLZ());};// ():uint
ExpGolomb.prototype.readUEG=function(){var clz=this.skipLZ();// :uint
return this.readBits(clz+1)-1;};// ():int
ExpGolomb.prototype.readEG=function(){var valu=this.readUEG();// :int
if(0x01&valu){// the number is odd if the low order bit is set
return 1+valu>>>1;// add 1 to make it even, and divide by 2
}else{return-1*(valu>>>1);// divide by two then make it negative
}};// Some convenience functions
// :Boolean
ExpGolomb.prototype.readBoolean=function(){return this.readBits(1)===1;};// ():int
ExpGolomb.prototype.readUByte=function(){return this.readBits(8);};// ():int
ExpGolomb.prototype.readUShort=function(){return this.readBits(16);};// ():int
ExpGolomb.prototype.readUInt=function(){return this.readBits(32);};/**
     * Advance the ExpGolomb decoder past a scaling list. The scaling
     * list is optionally transmitted as part of a sequence parameter
     * set and is not relevant to transmuxing.
     * @param count {number} the number of entries in this scaling list
     * @see Recommendation ITU-T H.264, Section 7.3.2.1.1.1
     */ExpGolomb.prototype.skipScalingList=function(count){var lastScale=8,nextScale=8,j,deltaScale;for(j=0;j<count;j++){if(nextScale!==0){deltaScale=this.readEG();nextScale=(lastScale+deltaScale+256)%256;}lastScale=nextScale===0?lastScale:nextScale;}};/**
     * Read a sequence parameter set and return some interesting video
     * properties. A sequence parameter set is the H264 metadata that
     * describes the properties of upcoming video frames.
     * @param data {Uint8Array} the bytes of a sequence parameter set
     * @return {object} an object with configuration parsed from the
     * sequence parameter set, including the dimensions of the
     * associated video frames.
     */ExpGolomb.prototype.readSPS=function(){var frameCropLeftOffset=0,frameCropRightOffset=0,frameCropTopOffset=0,frameCropBottomOffset=0,profileIdc,profileCompat,levelIdc,numRefFramesInPicOrderCntCycle,picWidthInMbsMinus1,picHeightInMapUnitsMinus1,frameMbsOnlyFlag,scalingListCount,i,readUByte=this.readUByte.bind(this),readBits=this.readBits.bind(this),readUEG=this.readUEG.bind(this),readBoolean=this.readBoolean.bind(this),skipBits=this.skipBits.bind(this),skipEG=this.skipEG.bind(this),skipUEG=this.skipUEG.bind(this),skipScalingList=this.skipScalingList.bind(this);readUByte();profileIdc=readUByte();// profile_idc
profileCompat=readBits(5);// constraint_set[0-4]_flag, u(5)
skipBits(3);// reserved_zero_3bits u(3),
levelIdc=readUByte();// level_idc u(8)
skipUEG();// seq_parameter_set_id
// some profiles have more optional data we don't need
if(profileIdc===100||profileIdc===110||profileIdc===122||profileIdc===244||profileIdc===44||profileIdc===83||profileIdc===86||profileIdc===118||profileIdc===128){var chromaFormatIdc=readUEG();if(chromaFormatIdc===3){skipBits(1);}// separate_colour_plane_flag
skipUEG();// bit_depth_luma_minus8
skipUEG();// bit_depth_chroma_minus8
skipBits(1);// qpprime_y_zero_transform_bypass_flag
if(readBoolean()){// seq_scaling_matrix_present_flag
scalingListCount=chromaFormatIdc!==3?8:12;for(i=0;i<scalingListCount;i++){if(readBoolean()){// seq_scaling_list_present_flag[ i ]
if(i<6){skipScalingList(16);}else{skipScalingList(64);}}}}}skipUEG();// log2_max_frame_num_minus4
var picOrderCntType=readUEG();if(picOrderCntType===0){readUEG();// log2_max_pic_order_cnt_lsb_minus4
}else if(picOrderCntType===1){skipBits(1);// delta_pic_order_always_zero_flag
skipEG();// offset_for_non_ref_pic
skipEG();// offset_for_top_to_bottom_field
numRefFramesInPicOrderCntCycle=readUEG();for(i=0;i<numRefFramesInPicOrderCntCycle;i++){skipEG();}// offset_for_ref_frame[ i ]
}skipUEG();// max_num_ref_frames
skipBits(1);// gaps_in_frame_num_value_allowed_flag
picWidthInMbsMinus1=readUEG();picHeightInMapUnitsMinus1=readUEG();frameMbsOnlyFlag=readBits(1);if(frameMbsOnlyFlag===0){skipBits(1);}// mb_adaptive_frame_field_flag
skipBits(1);// direct_8x8_inference_flag
if(readBoolean()){// frame_cropping_flag
frameCropLeftOffset=readUEG();frameCropRightOffset=readUEG();frameCropTopOffset=readUEG();frameCropBottomOffset=readUEG();}var pixelRatio=[1,1];if(readBoolean()){// vui_parameters_present_flag
if(readBoolean()){// aspect_ratio_info_present_flag
var aspectRatioIdc=readUByte();switch(aspectRatioIdc){case 1:pixelRatio=[1,1];break;case 2:pixelRatio=[12,11];break;case 3:pixelRatio=[10,11];break;case 4:pixelRatio=[16,11];break;case 5:pixelRatio=[40,33];break;case 6:pixelRatio=[24,11];break;case 7:pixelRatio=[20,11];break;case 8:pixelRatio=[32,11];break;case 9:pixelRatio=[80,33];break;case 10:pixelRatio=[18,11];break;case 11:pixelRatio=[15,11];break;case 12:pixelRatio=[64,33];break;case 13:pixelRatio=[160,99];break;case 14:pixelRatio=[4,3];break;case 15:pixelRatio=[3,2];break;case 16:pixelRatio=[2,1];break;case 255:{pixelRatio=[readUByte()<<8|readUByte(),readUByte()<<8|readUByte()];break;}}}}return{width:Math.ceil((picWidthInMbsMinus1+1)*16-frameCropLeftOffset*2-frameCropRightOffset*2),height:(2-frameMbsOnlyFlag)*(picHeightInMapUnitsMinus1+1)*16-(frameMbsOnlyFlag?2:4)*(frameCropTopOffset+frameCropBottomOffset),pixelRatio:pixelRatio};};ExpGolomb.prototype.readSliceType=function(){// skip NALu type
this.readUByte();// discard first_mb_in_slice
this.readUEG();// return slice_type
return this.readUEG();};return ExpGolomb;}();exports.default=ExpGolomb;/***/},/***/"./src/demux/id3.js":/*!**************************!*\
  !*** ./src/demux/id3.js ***!
  \**************************//*! no static exports found *//*! ModuleConcatenation bailout: Module is not an ECMAScript module *//***/function srcDemuxId3Js(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});/**
 * ID3 parser
 */var ID3=/** @class */function(){function ID3(){}/**
     * Returns true if an ID3 header can be found at offset in data
     * @param {Uint8Array} data - The data to search in
     * @param {number} offset - The offset at which to start searching
     * @return {boolean} - True if an ID3 header is found
     */ID3.isHeader=function(data,offset){/*
        * http://id3.org/id3v2.3.0
        * [0]     = 'I'
        * [1]     = 'D'
        * [2]     = '3'
        * [3,4]   = {Version}
        * [5]     = {Flags}
        * [6-9]   = {ID3 Size}
        *
        * An ID3v2 tag can be detected with the following pattern:
        *  $49 44 33 yy yy xx zz zz zz zz
        * Where yy is less than $FF, xx is the 'flags' byte and zz is less than $80
        */if(offset+10<=data.length){// look for 'ID3' identifier
if(data[offset]===0x49&&data[offset+1]===0x44&&data[offset+2]===0x33){// check version is within range
if(data[offset+3]<0xFF&&data[offset+4]<0xFF){// check size is within range
if(data[offset+6]<0x80&&data[offset+7]<0x80&&data[offset+8]<0x80&&data[offset+9]<0x80){return true;}}}}return false;};/**
     * Returns true if an ID3 footer can be found at offset in data
     * @param {Uint8Array} data - The data to search in
     * @param {number} offset - The offset at which to start searching
     * @return {boolean} - True if an ID3 footer is found
     */ID3.isFooter=function(data,offset){/*
        * The footer is a copy of the header, but with a different identifier
        */if(offset+10<=data.length){// look for '3DI' identifier
if(data[offset]===0x33&&data[offset+1]===0x44&&data[offset+2]===0x49){// check version is within range
if(data[offset+3]<0xFF&&data[offset+4]<0xFF){// check size is within range
if(data[offset+6]<0x80&&data[offset+7]<0x80&&data[offset+8]<0x80&&data[offset+9]<0x80){return true;}}}}return false;};/**
     * Returns any adjacent ID3 tags found in data starting at offset, as one block of data
     * @param {Uint8Array} data - The data to search in
     * @param {number} offset - The offset at which to start searching
     * @return {Uint8Array} - The block of data containing any ID3 tags found
     */ID3.getID3Data=function(data,offset){var front=offset;var length=0;while(ID3.isHeader(data,offset)){// ID3 header is 10 bytes
length+=10;var size=ID3._readSize(data,offset+6);length+=size;if(ID3.isFooter(data,offset+10)){// ID3 footer is 10 bytes
length+=10;}offset+=length;}if(length>0){return data.subarray(front,front+length);}return undefined;};ID3._readSize=function(data,offset){var size=0;size=(data[offset]&0x7f)<<21;size|=(data[offset+1]&0x7f)<<14;size|=(data[offset+2]&0x7f)<<7;size|=data[offset+3]&0x7f;return size;};/**
     * Searches for the Elementary Stream timestamp found in the ID3 data chunk
     * @param {Uint8Array} data - Block of data containing one or more ID3 tags
     * @return {number} - The timestamp
     */ID3.getTimeStamp=function(data){var frames=ID3.getID3Frames(data);for(var i=0;i<frames.length;i++){var frame=frames[i];if(ID3.isTimeStampFrame(frame)){return ID3._readTimeStamp(frame);}}return undefined;};/**
     * Returns true if the ID3 frame is an Elementary Stream timestamp frame
     * @param {ID3 frame} frame
     */ID3.isTimeStampFrame=function(frame){return frame&&frame.key==='PRIV'&&frame.info==='com.apple.streaming.transportStreamTimestamp';};ID3._getFrameData=function(data){/*
        Frame ID       $xx xx xx xx (four characters)
        Size           $xx xx xx xx
        Flags          $xx xx
        */var type=String.fromCharCode(data[0],data[1],data[2],data[3]);var size=ID3._readSize(data,4);// skip frame id, size, and flags
var offset=10;return{type:type,size:size,data:data.subarray(offset,offset+size)};};/**
     * Returns an array of ID3 frames found in all the ID3 tags in the id3Data
     * @param {Uint8Array} id3Data - The ID3 data containing one or more ID3 tags
     * @return {ID3 frame[]} - Array of ID3 frame objects
     */ID3.getID3Frames=function(id3Data){var offset=0;var frames=[];while(ID3.isHeader(id3Data,offset)){var size=ID3._readSize(id3Data,offset+6);// skip past ID3 header
offset+=10;var end=offset+size;// loop through frames in the ID3 tag
while(offset+8<end){var frameData=ID3._getFrameData(id3Data.subarray(offset));var frame=ID3._decodeFrame(frameData);if(frame){frames.push(frame);}// skip frame header and frame data
offset+=frameData.size+10;}if(ID3.isFooter(id3Data,offset)){offset+=10;}}return frames;};ID3._decodeFrame=function(frame){if(frame.type==='PRIV'){return ID3._decodePrivFrame(frame);}else if(frame.type[0]==='T'){return ID3._decodeTextFrame(frame);}else if(frame.type[0]==='W'){return ID3._decodeURLFrame(frame);}return undefined;};ID3._readTimeStamp=function(timeStampFrame){if(timeStampFrame.data.byteLength===8){var data=new Uint8Array(timeStampFrame.data);// timestamp is 33 bit expressed as a big-endian eight-octet number,
// with the upper 31 bits set to zero.
var pts33Bit=data[3]&0x1;var timestamp=(data[4]<<23)+(data[5]<<15)+(data[6]<<7)+data[7];timestamp/=45;if(pts33Bit){timestamp+=47721858.84;}// 2^32 / 90
return Math.round(timestamp);}return undefined;};ID3._decodePrivFrame=function(frame){/*
        Format: <text string>\0<binary data>
        */if(frame.size<2){return undefined;}var owner=ID3._utf8ArrayToStr(frame.data,true);var privateData=new Uint8Array(frame.data.subarray(owner.length+1));return{key:frame.type,info:owner,data:privateData.buffer};};ID3._decodeTextFrame=function(frame){if(frame.size<2){return undefined;}if(frame.type==='TXXX'){/*
            Format:
            [0]   = {Text Encoding}
            [1-?] = {Description}\0{Value}
            */var index=1;var description=ID3._utf8ArrayToStr(frame.data.subarray(index));index+=description.length+1;var value=ID3._utf8ArrayToStr(frame.data.subarray(index));return{key:frame.type,info:description,data:value};}else{/*
            Format:
            [0]   = {Text Encoding}
            [1-?] = {Value}
            */var text=ID3._utf8ArrayToStr(frame.data.subarray(1));return{key:frame.type,data:text};}};ID3._decodeURLFrame=function(frame){if(frame.type==='WXXX'){/*
            Format:
            [0]   = {Text Encoding}
            [1-?] = {Description}\0{URL}
            */if(frame.size<2){return undefined;}var index=1;var description=ID3._utf8ArrayToStr(frame.data.subarray(index));index+=description.length+1;var value=ID3._utf8ArrayToStr(frame.data.subarray(index));return{key:frame.type,info:description,data:value};}else{/*
            Format:
            [0-?] = {URL}
            */var url=ID3._utf8ArrayToStr(frame.data);return{key:frame.type,data:url};}};// http://stackoverflow.com/questions/8936984/uint8array-to-string-in-javascript/22373197
// http://www.onicos.com/staff/iz/amuse/javascript/expert/utf.txt
/* utf.js - UTF-8 <=> UTF-16 convertion
     *
     * Copyright (C) 1999 Masanao Izumo <iz@onicos.co.jp>
     * Version: 1.0
     * LastModified: Dec 25 1999
     * This library is free.  You can redistribute it and/or modify it.
     */ID3._utf8ArrayToStr=function(array,exitOnNull){if(exitOnNull===void 0){exitOnNull=false;}var len=array.length;var c;var char2;var char3;var out='';var i=0;while(i<len){c=array[i++];if(c===0x00&&exitOnNull){return out;}else if(c===0x00||c===0x03){// If the character is 3 (END_OF_TEXT) or 0 (NULL) then skip it
continue;}switch(c>>4){case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:// 0xxxxxxx
out+=String.fromCharCode(c);break;case 12:case 13:// 110x xxxx   10xx xxxx
char2=array[i++];out+=String.fromCharCode((c&0x1F)<<6|char2&0x3F);break;case 14:// 1110 xxxx  10xx xxxx  10xx xxxx
char2=array[i++];char3=array[i++];out+=String.fromCharCode((c&0x0F)<<12|(char2&0x3F)<<6|(char3&0x3F)<<0);break;default:}}return out;};return ID3;}();var utf8ArrayToStr=ID3._utf8ArrayToStr;exports.utf8ArrayToStr=utf8ArrayToStr;exports.default=ID3;/***/},/***/"./src/demux/mp3demuxer.js":/*!*********************************!*\
  !*** ./src/demux/mp3demuxer.js ***!
  \*********************************//*! no static exports found *//*! ModuleConcatenation bailout: Module is not an ECMAScript module *//***/function srcDemuxMp3demuxerJs(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});/**
 * MP3 demuxer
 */var id3_1=__webpack_require__(/*! ../demux/id3 */"./src/demux/id3.js");var logger_1=__webpack_require__(/*! ../utils/logger */"./src/utils/logger.js");var mpegaudio_1=__webpack_require__(/*! ./mpegaudio */"./src/demux/mpegaudio.js");var MP3Demuxer=/** @class */function(){function MP3Demuxer(observer,remuxer,config){this.observer=observer;this.config=config;this.remuxer=remuxer;}MP3Demuxer.prototype.resetInitSegment=function(initSegment,audioCodec,videoCodec,duration){this._audioTrack={container:'audio/mpeg',type:'audio',id:-1,sequenceNumber:0,isAAC:false,samples:[],len:0,manifestCodec:audioCodec,duration:duration,inputTimeScale:90000};};MP3Demuxer.prototype.resetTimeStamp=function(){};MP3Demuxer.probe=function(data){// check if data contains ID3 timestamp and MPEG sync word
var offset,length;var id3Data=id3_1.default.getID3Data(data,0);if(id3Data&&id3_1.default.getTimeStamp(id3Data)!==undefined){// Look for MPEG header | 1111 1111 | 111X XYZX | where X can be either 0 or 1 and Y or Z should be 1
// Layer bits (position 14 and 15) in header should be always different from 0 (Layer I or Layer II or Layer III)
// More info http://www.mp3-tech.org/programmer/frame_header.html
for(offset=id3Data.length,length=Math.min(data.length-1,offset+100);offset<length;offset++){if(mpegaudio_1.default.probe(data,offset)){logger_1.logger.log('MPEG Audio sync word found !');return true;}}}return false;};// feed incoming data to the front of the parsing pipeline
MP3Demuxer.prototype.append=function(data,timeOffset,contiguous,accurateTimeOffset){var id3Data=id3_1.default.getID3Data(data,0);var timestamp=id3_1.default.getTimeStamp(id3Data);var pts=timestamp?90*timestamp:timeOffset*90000;var offset=id3Data.length;var length=data.length;var frameIndex=0,stamp=0;var track=this._audioTrack;var id3Samples=[{pts:pts,dts:pts,data:id3Data}];while(offset<length){if(mpegaudio_1.default.isHeader(data,offset)){var frame=mpegaudio_1.default.appendFrame(track,data,offset,pts,frameIndex);if(frame){offset+=frame.length;stamp=frame.sample.pts;frameIndex++;}else{// logger.log('Unable to parse Mpeg audio frame');
break;}}else if(id3_1.default.isHeader(data,offset)){id3Data=id3_1.default.getID3Data(data,offset);id3Samples.push({pts:stamp,dts:stamp,data:id3Data});offset+=id3Data.length;}else{// nothing found, keep looking
offset++;}}this.remuxer.remux(track,{samples:[]},{samples:id3Samples,inputTimeScale:90000},{samples:[]},timeOffset,contiguous,accurateTimeOffset);};MP3Demuxer.prototype.destroy=function(){};return MP3Demuxer;}();exports.default=MP3Demuxer;/***/},/***/"./src/demux/mp4demuxer.js":/*!*********************************!*\
  !*** ./src/demux/mp4demuxer.js ***!
  \*********************************//*! no static exports found *//*! ModuleConcatenation bailout: Module is not an ECMAScript module *//***/function srcDemuxMp4demuxerJs(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});/**
 * MP4 demuxer
 */var logger_1=__webpack_require__(/*! ../utils/logger */"./src/utils/logger.js");var events_1=__webpack_require__(/*! ../events */"./src/events.js");var UINT32_MAX=Math.pow(2,32)-1;var MP4Demuxer=/** @class */function(){function MP4Demuxer(observer,remuxer){this.observer=observer;this.remuxer=remuxer;}MP4Demuxer.prototype.resetTimeStamp=function(initPTS){this.initPTS=initPTS;};MP4Demuxer.prototype.resetInitSegment=function(initSegment,audioCodec,videoCodec,duration){// jshint unused:false
if(initSegment&&initSegment.byteLength){var initData=this.initData=MP4Demuxer.parseInitSegment(initSegment);// default audio codec if nothing specified
// TODO : extract that from initsegment
if(audioCodec==null){audioCodec='mp4a.40.5';}if(videoCodec==null){videoCodec='avc1.42e01e';}var tracks={};if(initData.audio&&initData.video){tracks.audiovideo={container:'video/mp4',codec:audioCodec+','+videoCodec,initSegment:duration?initSegment:null};}else{if(initData.audio){tracks.audio={container:'audio/mp4',codec:audioCodec,initSegment:duration?initSegment:null};}if(initData.video){tracks.video={container:'video/mp4',codec:videoCodec,initSegment:duration?initSegment:null};}}this.observer.trigger(events_1.default.FRAG_PARSING_INIT_SEGMENT,{tracks:tracks});}else{if(audioCodec){this.audioCodec=audioCodec;}if(videoCodec){this.videoCodec=videoCodec;}}};MP4Demuxer.probe=function(data){// ensure we find a moof box in the first 16 kB
return MP4Demuxer.findBox({data:data,start:0,end:Math.min(data.length,16384)},['moof']).length>0;};MP4Demuxer.bin2str=function(buffer){return String.fromCharCode.apply(null,buffer);};MP4Demuxer.readUint16=function(buffer,offset){if(buffer.data){offset+=buffer.start;buffer=buffer.data;}var val=buffer[offset]<<8|buffer[offset+1];return val<0?65536+val:val;};MP4Demuxer.readUint32=function(buffer,offset){if(buffer.data){offset+=buffer.start;buffer=buffer.data;}var val=buffer[offset]<<24|buffer[offset+1]<<16|buffer[offset+2]<<8|buffer[offset+3];return val<0?4294967296+val:val;};MP4Demuxer.writeUint32=function(buffer,offset,value){if(buffer.data){offset+=buffer.start;buffer=buffer.data;}buffer[offset]=value>>24;buffer[offset+1]=value>>16&0xff;buffer[offset+2]=value>>8&0xff;buffer[offset+3]=value&0xff;};// Find the data for a box specified by its path
MP4Demuxer.findBox=function(data,path){var results=[],i,size,type,end,subresults,start,endbox;if(data.data){start=data.start;end=data.end;data=data.data;}else{start=0;end=data.byteLength;}if(!path.length){// short-circuit the search for empty paths
return null;}for(i=start;i<end;){size=MP4Demuxer.readUint32(data,i);type=MP4Demuxer.bin2str(data.subarray(i+4,i+8));endbox=size>1?i+size:end;if(type===path[0]){if(path.length===1){// this is the end of the path and we've found the box we were
// looking for
results.push({data:data,start:i+8,end:endbox});}else{// recursively search for the next box along the path
subresults=MP4Demuxer.findBox({data:data,start:i+8,end:endbox},path.slice(1));if(subresults.length){results=results.concat(subresults);}}}i=endbox;}// we've finished searching all of data
return results;};MP4Demuxer.parseSegmentIndex=function(initSegment){var moov=MP4Demuxer.findBox(initSegment,['moov'])[0];var moovEndOffset=moov?moov.end:null;// we need this in case we need to chop of garbage of the end of current data
var index=0;var sidx=MP4Demuxer.findBox(initSegment,['sidx']);var references;if(!sidx||!sidx[0]){return null;}references=[];sidx=sidx[0];var version=sidx.data[0];// set initial offset, we skip the reference ID (not needed)
index=version===0?8:16;var timescale=MP4Demuxer.readUint32(sidx,index);index+=4;// TODO: parse earliestPresentationTime and firstOffset
// usually zero in our case
var earliestPresentationTime=0;var firstOffset=0;if(version===0){index+=8;}else{index+=16;}// skip reserved
index+=2;var startByte=sidx.end+firstOffset;var referencesCount=MP4Demuxer.readUint16(sidx,index);index+=2;for(var i=0;i<referencesCount;i++){var referenceIndex=index;var referenceInfo=MP4Demuxer.readUint32(sidx,referenceIndex);referenceIndex+=4;var referenceSize=referenceInfo&0x7FFFFFFF;var referenceType=(referenceInfo&0x80000000)>>>31;if(referenceType===1){console.warn('SIDX has hierarchical references (not supported)');return;}var subsegmentDuration=MP4Demuxer.readUint32(sidx,referenceIndex);referenceIndex+=4;references.push({referenceSize:referenceSize,subsegmentDuration:subsegmentDuration,info:{duration:subsegmentDuration/timescale,start:startByte,end:startByte+referenceSize-1}});startByte+=referenceSize;// Skipping 1 bit for |startsWithSap|, 3 bits for |sapType|, and 28 bits
// for |sapDelta|.
referenceIndex+=4;// skip to next ref
index=referenceIndex;}return{earliestPresentationTime:earliestPresentationTime,timescale:timescale,version:version,referencesCount:referencesCount,references:references,moovEndOffset:moovEndOffset};};/**
     * Parses an MP4 initialization segment and extracts stream type and
     * timescale values for any declared tracks. Timescale values indicate the
     * number of clock ticks per second to assume for time-based values
     * elsewhere in the MP4.
     *
     * To determine the start time of an MP4, you need two pieces of
     * information: the timescale unit and the earliest base media decode
     * time. Multiple timescales can be specified within an MP4 but the
     * base media decode time is always expressed in the timescale from
     * the media header box for the track:
     * ```
     * moov > trak > mdia > mdhd.timescale
     * moov > trak > mdia > hdlr
     * ```
     * @param init {Uint8Array} the bytes of the init segment
     * @return {object} a hash of track type to timescale values or null if
     * the init segment is malformed.
     */MP4Demuxer.parseInitSegment=function(initSegment){var result=[];var traks=MP4Demuxer.findBox(initSegment,['moov','trak']);traks.forEach(function(trak){var tkhd=MP4Demuxer.findBox(trak,['tkhd'])[0];if(tkhd){var version=tkhd.data[tkhd.start];var index=version===0?12:20;var trackId=MP4Demuxer.readUint32(tkhd,index);var mdhd=MP4Demuxer.findBox(trak,['mdia','mdhd'])[0];if(mdhd){version=mdhd.data[mdhd.start];index=version===0?12:20;var timescale=MP4Demuxer.readUint32(mdhd,index);var hdlr=MP4Demuxer.findBox(trak,['mdia','hdlr'])[0];if(hdlr){var hdlrType=MP4Demuxer.bin2str(hdlr.data.subarray(hdlr.start+8,hdlr.start+12));var type={'soun':'audio','vide':'video'}[hdlrType];if(type){// extract codec info. TODO : parse codec details to be able to build MIME type
var codecBox=MP4Demuxer.findBox(trak,['mdia','minf','stbl','stsd']);if(codecBox.length){codecBox=codecBox[0];var codecType=MP4Demuxer.bin2str(codecBox.data.subarray(codecBox.start+12,codecBox.start+16));logger_1.logger.log("MP4Demuxer:"+type+":"+codecType+" found");}result[trackId]={timescale:timescale,type:type};result[type]={timescale:timescale,id:trackId};}}}}});return result;};/**
   * Determine the base media decode start time, in seconds, for an MP4
   * fragment. If multiple fragments are specified, the earliest time is
   * returned.
   *
   * The base media decode time can be parsed from track fragment
   * metadata:
   * ```
   * moof > traf > tfdt.baseMediaDecodeTime
   * ```
   * It requires the timescale value from the mdhd to interpret.
   *
   * @param timescale {object} a hash of track ids to timescale values.
   * @return {number} the earliest base media decode start time for the
   * fragment, in seconds
   */MP4Demuxer.getStartDTS=function(initData,fragment){var trafs,baseTimes,result;// we need info from two childrend of each track fragment box
trafs=MP4Demuxer.findBox(fragment,['moof','traf']);// determine the start times for each track
baseTimes=[].concat.apply([],trafs.map(function(traf){return MP4Demuxer.findBox(traf,['tfhd']).map(function(tfhd){var id,scale,baseTime;// get the track id from the tfhd
id=MP4Demuxer.readUint32(tfhd,4);// assume a 90kHz clock if no timescale was specified
scale=initData[id].timescale||90e3;// get the base media decode time from the tfdt
baseTime=MP4Demuxer.findBox(traf,['tfdt']).map(function(tfdt){var version,result;version=tfdt.data[tfdt.start];result=MP4Demuxer.readUint32(tfdt,4);if(version===1){result*=Math.pow(2,32);result+=MP4Demuxer.readUint32(tfdt,8);}return result;})[0];// convert base time to seconds
return baseTime/scale;});}));// return the minimum
result=Math.min.apply(null,baseTimes);return isFinite(result)?result:0;};MP4Demuxer.offsetStartDTS=function(initData,fragment,timeOffset){MP4Demuxer.findBox(fragment,['moof','traf']).map(function(traf){return MP4Demuxer.findBox(traf,['tfhd']).map(function(tfhd){// get the track id from the tfhd
var id=MP4Demuxer.readUint32(tfhd,4);// assume a 90kHz clock if no timescale was specified
var timescale=initData[id].timescale||90e3;// get the base media decode time from the tfdt
MP4Demuxer.findBox(traf,['tfdt']).map(function(tfdt){var version=tfdt.data[tfdt.start];var baseMediaDecodeTime=MP4Demuxer.readUint32(tfdt,4);if(version===0){MP4Demuxer.writeUint32(tfdt,4,baseMediaDecodeTime-timeOffset*timescale);}else{baseMediaDecodeTime*=Math.pow(2,32);baseMediaDecodeTime+=MP4Demuxer.readUint32(tfdt,8);baseMediaDecodeTime-=timeOffset*timescale;baseMediaDecodeTime=Math.max(baseMediaDecodeTime,0);var upper=Math.floor(baseMediaDecodeTime/(UINT32_MAX+1));var lower=Math.floor(baseMediaDecodeTime%(UINT32_MAX+1));MP4Demuxer.writeUint32(tfdt,4,upper);MP4Demuxer.writeUint32(tfdt,8,lower);}});});});};// feed incoming data to the front of the parsing pipeline
MP4Demuxer.prototype.append=function(data,timeOffset,contiguous,accurateTimeOffset){var initData=this.initData;if(!initData){this.resetInitSegment(data,this.audioCodec,this.videoCodec,false);initData=this.initData;}var startDTS,initPTS=this.initPTS;if(initPTS===undefined){var startDTS_1=MP4Demuxer.getStartDTS(initData,data);this.initPTS=initPTS=startDTS_1-timeOffset;this.observer.trigger(events_1.default.INIT_PTS_FOUND,{initPTS:initPTS});}MP4Demuxer.offsetStartDTS(initData,data,initPTS);startDTS=MP4Demuxer.getStartDTS(initData,data);this.remuxer.remux(initData.audio,initData.video,null,null,startDTS,contiguous,accurateTimeOffset,data);};MP4Demuxer.prototype.destroy=function(){};return MP4Demuxer;}();exports.default=MP4Demuxer;/***/},/***/"./src/demux/mpegaudio.js":/*!********************************!*\
  !*** ./src/demux/mpegaudio.js ***!
  \********************************//*! no static exports found *//*! ModuleConcatenation bailout: Module is not an ECMAScript module *//***/function srcDemuxMpegaudioJs(module,exports,__webpack_require__){"use strict";/**
 *  MPEG parser helper
 */Object.defineProperty(exports,"__esModule",{value:true});var MpegAudio={BitratesMap:[32,64,96,128,160,192,224,256,288,320,352,384,416,448,32,48,56,64,80,96,112,128,160,192,224,256,320,384,32,40,48,56,64,80,96,112,128,160,192,224,256,320,32,48,56,64,80,96,112,128,144,160,176,192,224,256,8,16,24,32,40,48,56,64,80,96,112,128,144,160],SamplingRateMap:[44100,48000,32000,22050,24000,16000,11025,12000,8000],SamplesCoefficients:[// MPEG 2.5
[0,72,144,12// Layer1
],// Reserved
[0,0,0,0// Layer1
],// MPEG 2
[0,72,144,12// Layer1
],// MPEG 1
[0,144,144,12// Layer1
]],BytesInSlot:[0,1,1,4// Layer1
],appendFrame:function appendFrame(track,data,offset,pts,frameIndex){// Using http://www.datavoyage.com/mpgscript/mpeghdr.htm as a reference
if(offset+24>data.length){return undefined;}var header=this.parseHeader(data,offset);if(header&&offset+header.frameLength<=data.length){var frameDuration=header.samplesPerFrame*90000/header.sampleRate;var stamp=pts+frameIndex*frameDuration;var sample={unit:data.subarray(offset,offset+header.frameLength),pts:stamp,dts:stamp};track.config=[];track.channelCount=header.channelCount;track.samplerate=header.sampleRate;track.samples.push(sample);track.len+=header.frameLength;return{sample:sample,length:header.frameLength};}return undefined;},parseHeader:function parseHeader(data,offset){var headerB=data[offset+1]>>3&3;var headerC=data[offset+1]>>1&3;var headerE=data[offset+2]>>4&15;var headerF=data[offset+2]>>2&3;var headerG=data[offset+2]>>1&1;if(headerB!==1&&headerE!==0&&headerE!==15&&headerF!==3){var columnInBitrates=headerB===3?3-headerC:headerC===3?3:4;var bitRate=MpegAudio.BitratesMap[columnInBitrates*14+headerE-1]*1000;var columnInSampleRates=headerB===3?0:headerB===2?1:2;var sampleRate=MpegAudio.SamplingRateMap[columnInSampleRates*3+headerF];var channelCount=data[offset+3]>>6===3?1:2;// If bits of channel mode are `11` then it is a single channel (Mono)
var sampleCoefficient=MpegAudio.SamplesCoefficients[headerB][headerC];var bytesInSlot=MpegAudio.BytesInSlot[headerC];var samplesPerFrame=sampleCoefficient*8*bytesInSlot;var frameLength=parseInt(sampleCoefficient*bitRate/sampleRate+headerG,10)*bytesInSlot;return{sampleRate:sampleRate,channelCount:channelCount,frameLength:frameLength,samplesPerFrame:samplesPerFrame};}return undefined;},isHeaderPattern:function isHeaderPattern(data,offset){return data[offset]===0xff&&(data[offset+1]&0xe0)===0xe0&&(data[offset+1]&0x06)!==0x00;},isHeader:function isHeader(data,offset){// Look for MPEG header | 1111 1111 | 111X XYZX | where X can be either 0 or 1 and Y or Z should be 1
// Layer bits (position 14 and 15) in header should be always different from 0 (Layer I or Layer II or Layer III)
// More info http://www.mp3-tech.org/programmer/frame_header.html
if(offset+1<data.length&&this.isHeaderPattern(data,offset)){return true;}return false;},probe:function probe(data,offset){// same as isHeader but we also check that MPEG frame follows last MPEG frame
// or end of data is reached
if(offset+1<data.length&&this.isHeaderPattern(data,offset)){// MPEG header Length
var headerLength=4;// MPEG frame Length
var header=this.parseHeader(data,offset);var frameLength=headerLength;if(header&&header.frameLength){frameLength=header.frameLength;}var newOffset=offset+frameLength;if(newOffset===data.length||newOffset+1<data.length&&this.isHeaderPattern(data,newOffset)){return true;}}return false;}};exports.default=MpegAudio;/***/},/***/"./src/demux/sample-aes.js":/*!*********************************!*\
  !*** ./src/demux/sample-aes.js ***!
  \*********************************//*! no static exports found *//*! ModuleConcatenation bailout: Module is not an ECMAScript module *//***/function srcDemuxSampleAesJs(module,exports,__webpack_require__){"use strict";/**
 * SAMPLE-AES decrypter
*/Object.defineProperty(exports,"__esModule",{value:true});var decrypter_1=__webpack_require__(/*! ../crypt/decrypter */"./src/crypt/decrypter.js");var SampleAesDecrypter=/** @class */function(){function SampleAesDecrypter(observer,config,decryptdata,discardEPB){this.decryptdata=decryptdata;this.discardEPB=discardEPB;this.decrypter=new decrypter_1.default(observer,config,{removePKCS7Padding:false});}SampleAesDecrypter.prototype.decryptBuffer=function(encryptedData,callback){this.decrypter.decrypt(encryptedData,this.decryptdata.key.buffer,this.decryptdata.iv.buffer,callback);};// AAC - encrypt all full 16 bytes blocks starting from offset 16
SampleAesDecrypter.prototype.decryptAacSample=function(samples,sampleIndex,callback,sync){var curUnit=samples[sampleIndex].unit;var encryptedData=curUnit.subarray(16,curUnit.length-curUnit.length%16);var encryptedBuffer=encryptedData.buffer.slice(encryptedData.byteOffset,encryptedData.byteOffset+encryptedData.length);var localthis=this;this.decryptBuffer(encryptedBuffer,function(decryptedData){decryptedData=new Uint8Array(decryptedData);curUnit.set(decryptedData,16);if(!sync){localthis.decryptAacSamples(samples,sampleIndex+1,callback);}});};SampleAesDecrypter.prototype.decryptAacSamples=function(samples,sampleIndex,callback){for(;;sampleIndex++){if(sampleIndex>=samples.length){callback();return;}if(samples[sampleIndex].unit.length<32){continue;}var sync=this.decrypter.isSync();this.decryptAacSample(samples,sampleIndex,callback,sync);if(!sync){return;}}};// AVC - encrypt one 16 bytes block out of ten, starting from offset 32
SampleAesDecrypter.prototype.getAvcEncryptedData=function(decodedData){var encryptedDataLen=Math.floor((decodedData.length-48)/160)*16+16;var encryptedData=new Int8Array(encryptedDataLen);var outputPos=0;for(var inputPos=32;inputPos<=decodedData.length-16;inputPos+=160,outputPos+=16){encryptedData.set(decodedData.subarray(inputPos,inputPos+16),outputPos);}return encryptedData;};SampleAesDecrypter.prototype.getAvcDecryptedUnit=function(decodedData,decryptedData){decryptedData=new Uint8Array(decryptedData);var inputPos=0;for(var outputPos=32;outputPos<=decodedData.length-16;outputPos+=160,inputPos+=16){decodedData.set(decryptedData.subarray(inputPos,inputPos+16),outputPos);}return decodedData;};SampleAesDecrypter.prototype.decryptAvcSample=function(samples,sampleIndex,unitIndex,callback,curUnit,sync){var decodedData=this.discardEPB(curUnit.data);var encryptedData=this.getAvcEncryptedData(decodedData);var localthis=this;this.decryptBuffer(encryptedData.buffer,function(decryptedData){curUnit.data=localthis.getAvcDecryptedUnit(decodedData,decryptedData);if(!sync){localthis.decryptAvcSamples(samples,sampleIndex,unitIndex+1,callback);}});};SampleAesDecrypter.prototype.decryptAvcSamples=function(samples,sampleIndex,unitIndex,callback){for(;;sampleIndex++,unitIndex=0){if(sampleIndex>=samples.length){callback();return;}var curUnits=samples[sampleIndex].units;for(;;unitIndex++){if(unitIndex>=curUnits.length){break;}var curUnit=curUnits[unitIndex];if(curUnit.length<=48||curUnit.type!==1&&curUnit.type!==5){continue;}var sync=this.decrypter.isSync();this.decryptAvcSample(samples,sampleIndex,unitIndex,callback,curUnit,sync);if(!sync){return;}}}};return SampleAesDecrypter;}();exports.default=SampleAesDecrypter;/***/},/***/"./src/demux/tsdemuxer.js":/*!********************************!*\
  !*** ./src/demux/tsdemuxer.js ***!
  \********************************//*! no static exports found *//*! ModuleConcatenation bailout: Module is not an ECMAScript module *//***/function srcDemuxTsdemuxerJs(module,exports,__webpack_require__){"use strict";/**
 * highly optimized TS demuxer:
 * parse PAT, PMT
 * extract PES packet from audio and video PIDs
 * extract AVC/H264 NAL units and AAC/ADTS samples from PES packet
 * trigger the remuxer upon parsing completion
 * it also tries to workaround as best as it can audio codec switch (HE-AAC to AAC and vice versa), without having to restart the MediaSource.
 * it also controls the remuxing process :
 * upon discontinuity or level switch detection, it will also notifies the remuxer so that it can reset its state.
*/Object.defineProperty(exports,"__esModule",{value:true});var ADTS=__webpack_require__(/*! ./adts */"./src/demux/adts.js");var mpegaudio_1=__webpack_require__(/*! ./mpegaudio */"./src/demux/mpegaudio.js");var events_1=__webpack_require__(/*! ../events */"./src/events.js");var exp_golomb_1=__webpack_require__(/*! ./exp-golomb */"./src/demux/exp-golomb.js");var sample_aes_1=__webpack_require__(/*! ./sample-aes */"./src/demux/sample-aes.js");// import Hex from '../utils/hex';
var logger_1=__webpack_require__(/*! ../utils/logger */"./src/utils/logger.js");var errors_1=__webpack_require__(/*! ../errors */"./src/errors.js");// We are using fixed track IDs for driving the MP4 remuxer
// instead of following the TS PIDs.
// There is no reason not to do this and some browsers/SourceBuffer-demuxers
// may not like if there are TrackID "switches"
// See https://github.com/video-dev/hls.js/issues/1331
// Here we are mapping our internal track types to constant MP4 track IDs
// With MSE currently one can only have one track of each, and we are muxing
// whatever video/audio rendition in them.
var RemuxerTrackIdConfig={video:1,audio:2,id3:3,text:4};var TSDemuxer=/** @class */function(){function TSDemuxer(observer,remuxer,config,typeSupported){this.observer=observer;this.config=config;this.typeSupported=typeSupported;this.remuxer=remuxer;this.sampleAes=null;}TSDemuxer.prototype.setDecryptData=function(decryptdata){if(decryptdata!=null&&decryptdata.key!=null&&decryptdata.method==='SAMPLE-AES'){this.sampleAes=new sample_aes_1.default(this.observer,this.config,decryptdata,this.discardEPB);}else{this.sampleAes=null;}};TSDemuxer.probe=function(data){var syncOffset=TSDemuxer._syncOffset(data);if(syncOffset<0){return false;}else{if(syncOffset){logger_1.logger.warn("MPEG2-TS detected but first sync word found @ offset "+syncOffset+", junk ahead ?");}return true;}};TSDemuxer._syncOffset=function(data){// scan 1000 first bytes
var scanwindow=Math.min(1000,data.length-3*188);var i=0;while(i<scanwindow){// a TS fragment should contain at least 3 TS packets, a PAT, a PMT, and one PID, each starting with 0x47
if(data[i]===0x47&&data[i+188]===0x47&&data[i+2*188]===0x47){return i;}else{i++;}}return-1;};/**
     * Creates a track model internal to demuxer used to drive remuxing input
     *
     * @param {string} type 'audio' | 'video' | 'id3' | 'text'
     * @param {number} duration
     * @return {object} TSDemuxer's internal track model
     */TSDemuxer.createTrack=function(type,duration){return{container:type==='video'||type==='audio'?'video/mp2t':undefined,type:type,id:RemuxerTrackIdConfig[type],pid:-1,inputTimeScale:90000,sequenceNumber:0,samples:[],len:0,dropped:type==='video'?0:undefined,isAAC:type==='audio'?true:undefined,duration:type==='audio'?duration:undefined};};/**
     * Initializes a new init segment on the demuxer/remuxer interface. Needed for discontinuities/track-switches (or at stream start)
     * Resets all internal track instances of the demuxer.
     *
     * @override Implements generic demuxing/remuxing interface (see DemuxerInline)
     * @param {object} initSegment
     * @param {string} audioCodec
     * @param {string} videoCodec
     * @param {number} duration (in TS timescale = 90kHz)
     */TSDemuxer.prototype.resetInitSegment=function(initSegment,audioCodec,videoCodec,duration){this.pmtParsed=false;this._pmtId=-1;this._avcTrack=TSDemuxer.createTrack('video',duration);this._audioTrack=TSDemuxer.createTrack('audio',duration);this._id3Track=TSDemuxer.createTrack('id3',duration);this._txtTrack=TSDemuxer.createTrack('text',duration);// flush any partial content
this.aacOverFlow=null;this.aacLastPTS=null;this.avcSample=null;this.audioCodec=audioCodec;this.videoCodec=videoCodec;this._duration=duration;};/**
     *
     * @override
     */TSDemuxer.prototype.resetTimeStamp=function(){};// feed incoming data to the front of the parsing pipeline
TSDemuxer.prototype.append=function(data,timeOffset,contiguous,accurateTimeOffset){var start,len=data.length,stt,pid,atf,offset,pes,unknownPIDs=false;this.contiguous=contiguous;var pmtParsed=this.pmtParsed,avcTrack=this._avcTrack,audioTrack=this._audioTrack,id3Track=this._id3Track,avcId=avcTrack.pid,audioId=audioTrack.pid,id3Id=id3Track.pid,pmtId=this._pmtId,avcData=avcTrack.pesData,audioData=audioTrack.pesData,id3Data=id3Track.pesData,parsePAT=this._parsePAT,parsePMT=this._parsePMT,parsePES=this._parsePES,parseAVCPES=this._parseAVCPES.bind(this),parseAACPES=this._parseAACPES.bind(this),parseMPEGPES=this._parseMPEGPES.bind(this),parseID3PES=this._parseID3PES.bind(this);var syncOffset=TSDemuxer._syncOffset(data);// don't parse last TS packet if incomplete
len-=(len+syncOffset)%188;// loop through TS packets
for(start=syncOffset;start<len;start+=188){if(data[start]===0x47){stt=!!(data[start+1]&0x40);// pid is a 13-bit field starting at the last bit of TS[1]
pid=((data[start+1]&0x1f)<<8)+data[start+2];atf=(data[start+3]&0x30)>>4;// if an adaption field is present, its length is specified by the fifth byte of the TS packet header.
if(atf>1){offset=start+5+data[start+4];// continue if there is only adaptation field
if(offset===start+188){continue;}}else{offset=start+4;}switch(pid){case avcId:if(stt){if(avcData&&(pes=parsePES(avcData))&&pes.pts!==undefined){parseAVCPES(pes,false);}avcData={data:[],size:0};}if(avcData){avcData.data.push(data.subarray(offset,start+188));avcData.size+=start+188-offset;}break;case audioId:if(stt){if(audioData&&(pes=parsePES(audioData))&&pes.pts!==undefined){if(audioTrack.isAAC){parseAACPES(pes);}else{parseMPEGPES(pes);}}audioData={data:[],size:0};}if(audioData){audioData.data.push(data.subarray(offset,start+188));audioData.size+=start+188-offset;}break;case id3Id:if(stt){if(id3Data&&(pes=parsePES(id3Data))&&pes.pts!==undefined){parseID3PES(pes);}id3Data={data:[],size:0};}if(id3Data){id3Data.data.push(data.subarray(offset,start+188));id3Data.size+=start+188-offset;}break;case 0:if(stt){offset+=data[offset]+1;}pmtId=this._pmtId=parsePAT(data,offset);break;case pmtId:if(stt){offset+=data[offset]+1;}var parsedPIDs=parsePMT(data,offset,this.typeSupported.mpeg===true||this.typeSupported.mp3===true,this.sampleAes!=null);// only update track id if track PID found while parsing PMT
// this is to avoid resetting the PID to -1 in case
// track PID transiently disappears from the stream
// this could happen in case of transient missing audio samples for example
// NOTE this is only the PID of the track as found in TS,
// but we are not using this for MP4 track IDs.
avcId=parsedPIDs.avc;if(avcId>0){avcTrack.pid=avcId;}audioId=parsedPIDs.audio;if(audioId>0){audioTrack.pid=audioId;audioTrack.isAAC=parsedPIDs.isAAC;}id3Id=parsedPIDs.id3;if(id3Id>0){id3Track.pid=id3Id;}if(unknownPIDs&&!pmtParsed){logger_1.logger.log('reparse from beginning');unknownPIDs=false;// we set it to -188, the += 188 in the for loop will reset start to 0
start=syncOffset-188;}pmtParsed=this.pmtParsed=true;break;case 17:case 0x1fff:break;default:unknownPIDs=true;break;}}else{this.observer.trigger(events_1.default.ERROR,{type:errors_1.ErrorTypes.MEDIA_ERROR,details:errors_1.ErrorDetails.FRAG_PARSING_ERROR,fatal:false,reason:'TS packet did not start with 0x47'});}}// try to parse last PES packets
if(avcData&&(pes=parsePES(avcData))&&pes.pts!==undefined){parseAVCPES(pes,true);avcTrack.pesData=null;}else{// either avcData null or PES truncated, keep it for next frag parsing
avcTrack.pesData=avcData;}if(audioData&&(pes=parsePES(audioData))&&pes.pts!==undefined){if(audioTrack.isAAC){parseAACPES(pes);}else{parseMPEGPES(pes);}audioTrack.pesData=null;}else{if(audioData&&audioData.size){logger_1.logger.log('last AAC PES packet truncated,might overlap between fragments');}// either audioData null or PES truncated, keep it for next frag parsing
audioTrack.pesData=audioData;}if(id3Data&&(pes=parsePES(id3Data))&&pes.pts!==undefined){parseID3PES(pes);id3Track.pesData=null;}else{// either id3Data null or PES truncated, keep it for next frag parsing
id3Track.pesData=id3Data;}if(this.sampleAes==null){this.remuxer.remux(audioTrack,avcTrack,id3Track,this._txtTrack,timeOffset,contiguous,accurateTimeOffset);}else{this.decryptAndRemux(audioTrack,avcTrack,id3Track,this._txtTrack,timeOffset,contiguous,accurateTimeOffset);}};TSDemuxer.prototype.decryptAndRemux=function(audioTrack,videoTrack,id3Track,textTrack,timeOffset,contiguous,accurateTimeOffset){if(audioTrack.samples&&audioTrack.isAAC){var localthis_1=this;this.sampleAes.decryptAacSamples(audioTrack.samples,0,function(){localthis_1.decryptAndRemuxAvc(audioTrack,videoTrack,id3Track,textTrack,timeOffset,contiguous,accurateTimeOffset);});}else{this.decryptAndRemuxAvc(audioTrack,videoTrack,id3Track,textTrack,timeOffset,contiguous,accurateTimeOffset);}};TSDemuxer.prototype.decryptAndRemuxAvc=function(audioTrack,videoTrack,id3Track,textTrack,timeOffset,contiguous,accurateTimeOffset){if(videoTrack.samples){var localthis_2=this;this.sampleAes.decryptAvcSamples(videoTrack.samples,0,0,function(){localthis_2.remuxer.remux(audioTrack,videoTrack,id3Track,textTrack,timeOffset,contiguous,accurateTimeOffset);});}else{this.remuxer.remux(audioTrack,videoTrack,id3Track,textTrack,timeOffset,contiguous,accurateTimeOffset);}};TSDemuxer.prototype.destroy=function(){this._initPTS=this._initDTS=undefined;this._duration=0;};TSDemuxer.prototype._parsePAT=function(data,offset){// skip the PSI header and parse the first PMT entry
return(data[offset+10]&0x1F)<<8|data[offset+11];// logger.log('PMT PID:'  + this._pmtId);
};TSDemuxer.prototype._parsePMT=function(data,offset,mpegSupported,isSampleAes){var sectionLength,tableEnd,programInfoLength,pid,result={audio:-1,avc:-1,id3:-1,isAAC:true};sectionLength=(data[offset+1]&0x0f)<<8|data[offset+2];tableEnd=offset+3+sectionLength-4;// to determine where the table is, we have to figure out how
// long the program info descriptors are
programInfoLength=(data[offset+10]&0x0f)<<8|data[offset+11];// advance the offset to the first entry in the mapping table
offset+=12+programInfoLength;while(offset<tableEnd){pid=(data[offset+1]&0x1F)<<8|data[offset+2];switch(data[offset]){case 0xcf:// SAMPLE-AES AAC
if(!isSampleAes){logger_1.logger.log('unkown stream type:'+data[offset]);break;}/* falls through */// ISO/IEC 13818-7 ADTS AAC (MPEG-2 lower bit-rate audio)
case 0x0f:// logger.log('AAC PID:'  + pid);
if(result.audio===-1){result.audio=pid;}break;// Packetized metadata (ID3)
case 0x15:// logger.log('ID3 PID:'  + pid);
if(result.id3===-1){result.id3=pid;}break;case 0xdb:// SAMPLE-AES AVC
if(!isSampleAes){logger_1.logger.log('unkown stream type:'+data[offset]);break;}/* falls through */// ITU-T Rec. H.264 and ISO/IEC 14496-10 (lower bit-rate video)
case 0x1b:// logger.log('AVC PID:'  + pid);
if(result.avc===-1){result.avc=pid;}break;// ISO/IEC 11172-3 (MPEG-1 audio)
// or ISO/IEC 13818-3 (MPEG-2 halved sample rate audio)
case 0x03:case 0x04:// logger.log('MPEG PID:'  + pid);
if(!mpegSupported){logger_1.logger.log('MPEG audio found, not supported in this browser for now');}else if(result.audio===-1){result.audio=pid;result.isAAC=false;}break;case 0x24:logger_1.logger.warn('HEVC stream type found, not supported for now');break;default:logger_1.logger.log('unkown stream type:'+data[offset]);break;}// move to the next table entry
// skip past the elementary stream descriptors, if present
offset+=((data[offset+3]&0x0F)<<8|data[offset+4])+5;}return result;};TSDemuxer.prototype._parsePES=function(stream){var i=0,frag,pesFlags,pesPrefix,pesLen,pesHdrLen,pesData,pesPts,pesDts,payloadStartOffset,data=stream.data;// safety check
if(!stream||stream.size===0){return null;}// we might need up to 19 bytes to read PES header
// if first chunk of data is less than 19 bytes, let's merge it with following ones until we get 19 bytes
// usually only one merge is needed (and this is rare ...)
while(data[0].length<19&&data.length>1){var newData=new Uint8Array(data[0].length+data[1].length);newData.set(data[0]);newData.set(data[1],data[0].length);data[0]=newData;data.splice(1,1);}// retrieve PTS/DTS from first fragment
frag=data[0];pesPrefix=(frag[0]<<16)+(frag[1]<<8)+frag[2];if(pesPrefix===1){pesLen=(frag[4]<<8)+frag[5];// if PES parsed length is not zero and greater than total received length, stop parsing. PES might be truncated
// minus 6 : PES header size
if(pesLen&&pesLen>stream.size-6){return null;}pesFlags=frag[7];if(pesFlags&0xC0){/* PES header described here : http://dvd.sourceforge.net/dvdinfo/pes-hdr.html
                    as PTS / DTS is 33 bit we cannot use bitwise operator in JS,
                    as Bitwise operators treat their operands as a sequence of 32 bits */pesPts=(frag[9]&0x0E)*536870912+// 1 << 29
(frag[10]&0xFF)*4194304+// 1 << 22
(frag[11]&0xFE)*16384+// 1 << 14
(frag[12]&0xFF)*128+// 1 << 7
(frag[13]&0xFE)/2;// check if greater than 2^32 -1
if(pesPts>4294967295){// decrement 2^33
pesPts-=8589934592;}if(pesFlags&0x40){pesDts=(frag[14]&0x0E)*536870912+// 1 << 29
(frag[15]&0xFF)*4194304+// 1 << 22
(frag[16]&0xFE)*16384+// 1 << 14
(frag[17]&0xFF)*128+// 1 << 7
(frag[18]&0xFE)/2;// check if greater than 2^32 -1
if(pesDts>4294967295){// decrement 2^33
pesDts-=8589934592;}if(pesPts-pesDts>60*90000){logger_1.logger.warn(Math.round((pesPts-pesDts)/90000)+"s delta between PTS and DTS, align them");pesPts=pesDts;}}else{pesDts=pesPts;}}pesHdrLen=frag[8];// 9 bytes : 6 bytes for PES header + 3 bytes for PES extension
payloadStartOffset=pesHdrLen+9;stream.size-=payloadStartOffset;// reassemble PES packet
pesData=new Uint8Array(stream.size);for(var j=0,dataLen=data.length;j<dataLen;j++){frag=data[j];var len=frag.byteLength;if(payloadStartOffset){if(payloadStartOffset>len){// trim full frag if PES header bigger than frag
payloadStartOffset-=len;continue;}else{// trim partial frag if PES header smaller than frag
frag=frag.subarray(payloadStartOffset);len-=payloadStartOffset;payloadStartOffset=0;}}pesData.set(frag,i);i+=len;}if(pesLen){// payload size : remove PES header + PES extension
pesLen-=pesHdrLen+3;}return{data:pesData,pts:pesPts,dts:pesDts,len:pesLen};}else{return null;}};TSDemuxer.prototype.pushAccesUnit=function(avcSample,avcTrack){if(avcSample.units.length&&avcSample.frame){var samples=avcTrack.samples;var nbSamples=samples.length;// only push AVC sample if starting with a keyframe is not mandatory OR
//    if keyframe already found in this fragment OR
//       keyframe found in last fragment (track.sps) AND
//          samples already appended (we already found a keyframe in this fragment) OR fragment is contiguous
if(!this.config.forceKeyFrameOnDiscontinuity||avcSample.key===true||avcTrack.sps&&(nbSamples||this.contiguous)){avcSample.id=nbSamples;samples.push(avcSample);}else{// dropped samples, track it
avcTrack.dropped++;}}if(avcSample.debug.length){logger_1.logger.log(avcSample.pts+'/'+avcSample.dts+':'+avcSample.debug);}};TSDemuxer.prototype._parseAVCPES=function(pes,last){var _this=this;// logger.log('parse new PES');
var track=this._avcTrack,units=this._parseAVCNALu(pes.data),debug=false,expGolombDecoder,avcSample=this.avcSample,push,spsfound=false,i,pushAccesUnit=this.pushAccesUnit.bind(this),createAVCSample=function createAVCSample(key,pts,dts,debug){return{key:key,pts:pts,dts:dts,units:[],debug:debug};};// free pes.data to save up some memory
pes.data=null;// if new NAL units found and last sample still there, let's push ...
// this helps parsing streams with missing AUD (only do this if AUD never found)
if(avcSample&&units.length&&!track.audFound){pushAccesUnit(avcSample,track);avcSample=this.avcSample=createAVCSample(false,pes.pts,pes.dts,'');}units.forEach(function(unit){switch(unit.type){// NDR
case 1:push=true;if(!avcSample){avcSample=_this.avcSample=createAVCSample(true,pes.pts,pes.dts,'');}if(debug){avcSample.debug+='NDR ';}avcSample.frame=true;var data=unit.data;// only check slice type to detect KF in case SPS found in same packet (any keyframe is preceded by SPS ...)
if(spsfound&&data.length>4){// retrieve slice type by parsing beginning of NAL unit (follow H264 spec, slice_header definition) to detect keyframe embedded in NDR
var sliceType=new exp_golomb_1.default(data).readSliceType();// 2 : I slice, 4 : SI slice, 7 : I slice, 9: SI slice
// SI slice : A slice that is coded using intra prediction only and using quantisation of the prediction samples.
// An SI slice can be coded such that its decoded samples can be constructed identically to an SP slice.
// I slice: A slice that is not an SI slice that is decoded using intra prediction only.
// if (sliceType === 2 || sliceType === 7) {
if(sliceType===2||sliceType===4||sliceType===7||sliceType===9){avcSample.key=true;}}break;// IDR
case 5:push=true;// handle PES not starting with AUD
if(!avcSample){avcSample=_this.avcSample=createAVCSample(true,pes.pts,pes.dts,'');}if(debug){avcSample.debug+='IDR ';}avcSample.key=true;avcSample.frame=true;break;// SEI
case 6:push=true;if(debug&&avcSample){avcSample.debug+='SEI ';}expGolombDecoder=new exp_golomb_1.default(_this.discardEPB(unit.data));// skip frameType
expGolombDecoder.readUByte();var payloadType=0;var payloadSize=0;var endOfCaptions=false;var b=0;while(!endOfCaptions&&expGolombDecoder.bytesAvailable>1){payloadType=0;do{b=expGolombDecoder.readUByte();payloadType+=b;}while(b===0xFF);// Parse payload size.
payloadSize=0;do{b=expGolombDecoder.readUByte();payloadSize+=b;}while(b===0xFF);// TODO: there can be more than one payload in an SEI packet...
// TODO: need to read type and size in a while loop to get them all
if(payloadType===4&&expGolombDecoder.bytesAvailable!==0){endOfCaptions=true;var countryCode=expGolombDecoder.readUByte();if(countryCode===181){var providerCode=expGolombDecoder.readUShort();if(providerCode===49){var userStructure=expGolombDecoder.readUInt();if(userStructure===0x47413934){var userDataType=expGolombDecoder.readUByte();// Raw CEA-608 bytes wrapped in CEA-708 packet
if(userDataType===3){var firstByte=expGolombDecoder.readUByte();var secondByte=expGolombDecoder.readUByte();var totalCCs=31&firstByte;var byteArray=[firstByte,secondByte];for(i=0;i<totalCCs;i++){// 3 bytes per CC
byteArray.push(expGolombDecoder.readUByte());byteArray.push(expGolombDecoder.readUByte());byteArray.push(expGolombDecoder.readUByte());}_this._insertSampleInOrder(_this._txtTrack.samples,{type:3,pts:pes.pts,bytes:byteArray});}}}}}else if(payloadSize<expGolombDecoder.bytesAvailable){for(i=0;i<payloadSize;i++){expGolombDecoder.readUByte();}}}break;// SPS
case 7:push=true;spsfound=true;if(debug&&avcSample){avcSample.debug+='SPS ';}if(!track.sps){expGolombDecoder=new exp_golomb_1.default(unit.data);var config=expGolombDecoder.readSPS();track.width=config.width;track.height=config.height;track.pixelRatio=config.pixelRatio;track.sps=[unit.data];track.duration=_this._duration;var codecarray=unit.data.subarray(1,4);var codecstring='avc1.';for(i=0;i<3;i++){var h=codecarray[i].toString(16);if(h.length<2){h='0'+h;}codecstring+=h;}track.codec=codecstring;}break;// PPS
case 8:push=true;if(debug&&avcSample){avcSample.debug+='PPS ';}if(!track.pps){track.pps=[unit.data];}break;// AUD
case 9:push=false;track.audFound=true;if(avcSample){pushAccesUnit(avcSample,track);}avcSample=_this.avcSample=createAVCSample(false,pes.pts,pes.dts,debug?'AUD ':'');break;// Filler Data
case 12:push=false;break;default:push=false;if(avcSample){avcSample.debug+='unknown NAL '+unit.type+' ';}break;}if(avcSample&&push){var units_1=avcSample.units;units_1.push(unit);}});// if last PES packet, push samples
if(last&&avcSample){pushAccesUnit(avcSample,track);this.avcSample=null;}};TSDemuxer.prototype._insertSampleInOrder=function(arr,data){var len=arr.length;if(len>0){if(data.pts>=arr[len-1].pts){arr.push(data);}else{for(var pos=len-1;pos>=0;pos--){if(data.pts<arr[pos].pts){arr.splice(pos,0,data);break;}}}}else{arr.push(data);}};TSDemuxer.prototype._getLastNalUnit=function(){var avcSample=this.avcSample,lastUnit;// try to fallback to previous sample if current one is empty
if(!avcSample||avcSample.units.length===0){var track=this._avcTrack,samples=track.samples;avcSample=samples[samples.length-1];}if(avcSample){var units=avcSample.units;lastUnit=units[units.length-1];}return lastUnit;};TSDemuxer.prototype._parseAVCNALu=function(array){var i=0,len=array.byteLength,value,overflow,track=this._avcTrack,state=track.naluState||0,lastState=state;var units=[],unit,unitType,lastUnitStart=-1,lastUnitType;// logger.log('PES:' + Hex.hexDump(array));
if(state===-1){// special use case where we found 3 or 4-byte start codes exactly at the end of previous PES packet
lastUnitStart=0;// NALu type is value read from offset 0
lastUnitType=array[0]&0x1f;state=0;i=1;}while(i<len){value=array[i++];// optimization. state 0 and 1 are the predominant case. let's handle them outside of the switch/case
if(!state){state=value?0:1;continue;}if(state===1){state=value?0:2;continue;}// here we have state either equal to 2 or 3
if(!value){state=3;}else if(value===1){if(lastUnitStart>=0){unit={data:array.subarray(lastUnitStart,i-state-1),type:lastUnitType};// logger.log('pushing NALU, type/size:' + unit.type + '/' + unit.data.byteLength);
units.push(unit);}else{// lastUnitStart is undefined => this is the first start code found in this PES packet
// first check if start code delimiter is overlapping between 2 PES packets,
// ie it started in last packet (lastState not zero)
// and ended at the beginning of this PES packet (i <= 4 - lastState)
var lastUnit=this._getLastNalUnit();if(lastUnit){if(lastState&&i<=4-lastState){// start delimiter overlapping between PES packets
// strip start delimiter bytes from the end of last NAL unit
// check if lastUnit had a state different from zero
if(lastUnit.state){// strip last bytes
lastUnit.data=lastUnit.data.subarray(0,lastUnit.data.byteLength-lastState);}}// If NAL units are not starting right at the beginning of the PES packet, push preceding data into previous NAL unit.
overflow=i-state-1;if(overflow>0){// logger.log('first NALU found with overflow:' + overflow);
var tmp=new Uint8Array(lastUnit.data.byteLength+overflow);tmp.set(lastUnit.data,0);tmp.set(array.subarray(0,overflow),lastUnit.data.byteLength);lastUnit.data=tmp;}}}// check if we can read unit type
if(i<len){unitType=array[i]&0x1f;// logger.log('find NALU @ offset:' + i + ',type:' + unitType);
lastUnitStart=i;lastUnitType=unitType;state=0;}else{// not enough byte to read unit type. let's read it on next PES parsing
state=-1;}}else{state=0;}}if(lastUnitStart>=0&&state>=0){unit={data:array.subarray(lastUnitStart,len),type:lastUnitType,state:state};units.push(unit);// logger.log('pushing NALU, type/size/state:' + unit.type + '/' + unit.data.byteLength + '/' + state);
}// no NALu found
if(units.length===0){// append pes.data to previous NAL unit
var lastUnit=this._getLastNalUnit();if(lastUnit){var tmp=new Uint8Array(lastUnit.data.byteLength+array.byteLength);tmp.set(lastUnit.data,0);tmp.set(array,lastUnit.data.byteLength);lastUnit.data=tmp;}}track.naluState=state;return units;};/**
     * remove Emulation Prevention bytes from a RBSP
     */TSDemuxer.prototype.discardEPB=function(data){var length=data.byteLength,EPBPositions=[],i=1,newLength,newData;// Find all `Emulation Prevention Bytes`
while(i<length-2){if(data[i]===0&&data[i+1]===0&&data[i+2]===0x03){EPBPositions.push(i+2);i+=2;}else{i++;}}// If no Emulation Prevention Bytes were found just return the original
// array
if(EPBPositions.length===0){return data;}// Create a new array to hold the NAL unit data
newLength=length-EPBPositions.length;newData=new Uint8Array(newLength);var sourceIndex=0;for(i=0;i<newLength;sourceIndex++,i++){if(sourceIndex===EPBPositions[0]){// Skip this byte
sourceIndex++;// Remove this position index
EPBPositions.shift();}newData[i]=data[sourceIndex];}return newData;};TSDemuxer.prototype._parseAACPES=function(pes){var track=this._audioTrack,data=pes.data,pts=pes.pts,startOffset=0,aacOverFlow=this.aacOverFlow,aacLastPTS=this.aacLastPTS,frameDuration,frameIndex,offset,stamp,len;if(aacOverFlow){var tmp=new Uint8Array(aacOverFlow.byteLength+data.byteLength);tmp.set(aacOverFlow,0);tmp.set(data,aacOverFlow.byteLength);// logger.log(`AAC: append overflowing ${aacOverFlow.byteLength} bytes to beginning of new PES`);
data=tmp;}// look for ADTS header (0xFFFx)
for(offset=startOffset,len=data.length;offset<len-1;offset++){if(ADTS.isHeader(data,offset)){break;}}// if ADTS header does not start straight from the beginning of the PES payload, raise an error
if(offset){var reason=void 0,fatal=void 0;if(offset<len-1){reason="AAC PES did not start with ADTS header,offset:"+offset;fatal=false;}else{reason='no ADTS header found in AAC PES';fatal=true;}logger_1.logger.warn("parsing error:"+reason);this.observer.trigger(events_1.default.ERROR,{type:errors_1.ErrorTypes.MEDIA_ERROR,details:errors_1.ErrorDetails.FRAG_PARSING_ERROR,fatal:fatal,reason:reason});if(fatal){return;}}ADTS.initTrackConfig(track,this.observer,data,offset,this.audioCodec);frameIndex=0;frameDuration=ADTS.getFrameDuration(track.samplerate);// if last AAC frame is overflowing, we should ensure timestamps are contiguous:
// first sample PTS should be equal to last sample PTS + frameDuration
if(aacOverFlow&&aacLastPTS){var newPTS=aacLastPTS+frameDuration;if(Math.abs(newPTS-pts)>1){logger_1.logger.log("AAC: align PTS for overlapping frames by "+Math.round((newPTS-pts)/90));pts=newPTS;}}// scan for aac samples
while(offset<len){if(ADTS.isHeader(data,offset)&&offset+5<len){var frame=ADTS.appendFrame(track,data,offset,pts,frameIndex);if(frame){// logger.log(`${Math.round(frame.sample.pts)} : AAC`);
offset+=frame.length;stamp=frame.sample.pts;frameIndex++;}else{// logger.log('Unable to parse AAC frame');
break;}}else{// nothing found, keep looking
offset++;}}if(offset<len){aacOverFlow=data.subarray(offset,len);// logger.log(`AAC: overflow detected:${len-offset}`);
}else{aacOverFlow=null;}this.aacOverFlow=aacOverFlow;this.aacLastPTS=stamp;};TSDemuxer.prototype._parseMPEGPES=function(pes){var data=pes.data;var length=data.length;var frameIndex=0;var offset=0;var pts=pes.pts;while(offset<length){if(mpegaudio_1.default.isHeader(data,offset)){var frame=mpegaudio_1.default.appendFrame(this._audioTrack,data,offset,pts,frameIndex);if(frame){offset+=frame.length;frameIndex++;}else{// logger.log('Unable to parse Mpeg audio frame');
break;}}else{// nothing found, keep looking
offset++;}}};TSDemuxer.prototype._parseID3PES=function(pes){this._id3Track.samples.push(pes);};return TSDemuxer;}();exports.default=TSDemuxer;/***/},/***/"./src/errors.js":/*!***********************!*\
  !*** ./src/errors.js ***!
  \***********************//*! no static exports found *//*! ModuleConcatenation bailout: Module is not an ECMAScript module *//***/function srcErrorsJs(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.ErrorTypes={// Identifier for a network error (loading error / timeout ...)
NETWORK_ERROR:'networkError',// Identifier for a media Error (video/parsing/mediasource error)
MEDIA_ERROR:'mediaError',// EME (encrypted media extensions) errors
KEY_SYSTEM_ERROR:'keySystemError',// Identifier for a mux Error (demuxing/remuxing)
MUX_ERROR:'muxError',// Identifier for all other errors
OTHER_ERROR:'otherError'};/**
 * @enum {ErrorDetails}
 * @typedef {string} ErrorDetail
 */exports.ErrorDetails={KEY_SYSTEM_NO_KEYS:'keySystemNoKeys',KEY_SYSTEM_NO_ACCESS:'keySystemNoAccess',KEY_SYSTEM_NO_SESSION:'keySystemNoSession',KEY_SYSTEM_LICENSE_REQUEST_FAILED:'keySystemLicenseRequestFailed',// Identifier for a manifest load error - data: { url : faulty URL, response : { code: error code, text: error text }}
MANIFEST_LOAD_ERROR:'manifestLoadError',// Identifier for a manifest load timeout - data: { url : faulty URL, response : { code: error code, text: error text }}
MANIFEST_LOAD_TIMEOUT:'manifestLoadTimeOut',// Identifier for a manifest parsing error - data: { url : faulty URL, reason : error reason}
MANIFEST_PARSING_ERROR:'manifestParsingError',// Identifier for a manifest with only incompatible codecs error - data: { url : faulty URL, reason : error reason}
MANIFEST_INCOMPATIBLE_CODECS_ERROR:'manifestIncompatibleCodecsError',// Identifier for a level load error - data: { url : faulty URL, response : { code: error code, text: error text }}
LEVEL_LOAD_ERROR:'levelLoadError',// Identifier for a level load timeout - data: { url : faulty URL, response : { code: error code, text: error text }}
LEVEL_LOAD_TIMEOUT:'levelLoadTimeOut',// Identifier for a level switch error - data: { level : faulty level Id, event : error description}
LEVEL_SWITCH_ERROR:'levelSwitchError',// Identifier for an audio track load error - data: { url : faulty URL, response : { code: error code, text: error text }}
AUDIO_TRACK_LOAD_ERROR:'audioTrackLoadError',// Identifier for an audio track load timeout - data: { url : faulty URL, response : { code: error code, text: error text }}
AUDIO_TRACK_LOAD_TIMEOUT:'audioTrackLoadTimeOut',// Identifier for fragment load error - data: { frag : fragment object, response : { code: error code, text: error text }}
FRAG_LOAD_ERROR:'fragLoadError',// Identifier for fragment load timeout error - data: { frag : fragment object}
FRAG_LOAD_TIMEOUT:'fragLoadTimeOut',// Identifier for a fragment decryption error event - data: {id : demuxer Id,frag: fragment object, reason : parsing error description }
FRAG_DECRYPT_ERROR:'fragDecryptError',// Identifier for a fragment parsing error event - data: { id : demuxer Id, reason : parsing error description }
// will be renamed DEMUX_PARSING_ERROR and switched to MUX_ERROR in the next major release
FRAG_PARSING_ERROR:'fragParsingError',// Identifier for a remux alloc error event - data: { id : demuxer Id, frag : fragment object, bytes : nb of bytes on which allocation failed , reason : error text }
REMUX_ALLOC_ERROR:'remuxAllocError',// Identifier for decrypt key load error - data: { frag : fragment object, response : { code: error code, text: error text }}
KEY_LOAD_ERROR:'keyLoadError',// Identifier for decrypt key load timeout error - data: { frag : fragment object}
KEY_LOAD_TIMEOUT:'keyLoadTimeOut',// Triggered when an exception occurs while adding a sourceBuffer to MediaSource - data : {  err : exception , mimeType : mimeType }
BUFFER_ADD_CODEC_ERROR:'bufferAddCodecError',// Identifier for a buffer append error - data: append error description
BUFFER_APPEND_ERROR:'bufferAppendError',// Identifier for a buffer appending error event - data: appending error description
BUFFER_APPENDING_ERROR:'bufferAppendingError',// Identifier for a buffer stalled error event
BUFFER_STALLED_ERROR:'bufferStalledError',// Identifier for a buffer full event
BUFFER_FULL_ERROR:'bufferFullError',// Identifier for a buffer seek over hole event
BUFFER_SEEK_OVER_HOLE:'bufferSeekOverHole',// Identifier for a buffer nudge on stall (playback is stuck although currentTime is in a buffered area)
BUFFER_NUDGE_ON_STALL:'bufferNudgeOnStall',// Identifier for an internal exception happening inside hls.js while handling an event
INTERNAL_EXCEPTION:'internalException'};/***/},/***/"./src/event-handler.js":/*!******************************!*\
  !*** ./src/event-handler.js ***!
  \******************************//*! no static exports found *//*! ModuleConcatenation bailout: Module is not an ECMAScript module *//***/function srcEventHandlerJs(module,exports,__webpack_require__){"use strict";/*
*
* All objects in the event handling chain should inherit from this class
*
*/Object.defineProperty(exports,"__esModule",{value:true});var logger_1=__webpack_require__(/*! ./utils/logger */"./src/utils/logger.js");var errors_1=__webpack_require__(/*! ./errors */"./src/errors.js");var events_1=__webpack_require__(/*! ./events */"./src/events.js");var FORBIDDEN_EVENT_NAMES={'hlsEventGeneric':true,'hlsHandlerDestroying':true,'hlsHandlerDestroyed':true};var EventHandler=/** @class */function(){function EventHandler(hls){var events=[];for(var _i=1;_i<arguments.length;_i++){events[_i-1]=arguments[_i];}this.hls=hls;this.onEvent=this.onEvent.bind(this);this.handledEvents=events;this.useGenericHandler=true;this.registerListeners();}EventHandler.prototype.destroy=function(){this.onHandlerDestroying();this.unregisterListeners();this.onHandlerDestroyed();};EventHandler.prototype.onHandlerDestroying=function(){};EventHandler.prototype.onHandlerDestroyed=function(){};EventHandler.prototype.isEventHandler=function(){return typeof this.handledEvents==='object'&&this.handledEvents.length&&typeof this.onEvent==='function';};EventHandler.prototype.registerListeners=function(){if(this.isEventHandler()){this.handledEvents.forEach(function(event){if(FORBIDDEN_EVENT_NAMES[event]){throw new Error('Forbidden event-name: '+event);}this.hls.on(event,this.onEvent);},this);}};EventHandler.prototype.unregisterListeners=function(){if(this.isEventHandler()){this.handledEvents.forEach(function(event){this.hls.off(event,this.onEvent);},this);}};/**
     * arguments: event (string), data (any)
     */EventHandler.prototype.onEvent=function(event,data){this.onEventGeneric(event,data);};EventHandler.prototype.onEventGeneric=function(event,data){var eventToFunction=function eventToFunction(event,data){var funcName='on'+event.replace('hls','');if(typeof this[funcName]!=='function'){throw new Error("Event "+event+" has no generic handler in this "+this.constructor.name+" class (tried "+funcName+")");}return this[funcName].bind(this,data);};try{eventToFunction.call(this,event,data).call();}catch(err){logger_1.logger.error("An internal error happened while handling event "+event+". Error message: \""+err.message+"\". Here is a stacktrace:",err);this.hls.trigger(events_1.default.ERROR,{type:errors_1.ErrorTypes.OTHER_ERROR,details:errors_1.ErrorDetails.INTERNAL_EXCEPTION,fatal:false,event:event,err:err});}};return EventHandler;}();exports.default=EventHandler;/***/},/***/"./src/events.js":/*!***********************!*\
  !*** ./src/events.js ***!
  \***********************//*! no static exports found *//*! ModuleConcatenation bailout: Module is not an ECMAScript module *//***/function srcEventsJs(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});/**
 * @readonly
 * @enum {string}
 */var HlsEvents={// fired before MediaSource is attaching to media element - data: { media }
MEDIA_ATTACHING:'hlsMediaAttaching',// fired when MediaSource has been succesfully attached to media element - data: { }
MEDIA_ATTACHED:'hlsMediaAttached',// fired before detaching MediaSource from media element - data: { }
MEDIA_DETACHING:'hlsMediaDetaching',// fired when MediaSource has been detached from media element - data: { }
MEDIA_DETACHED:'hlsMediaDetached',// fired when we buffer is going to be reset - data: { }
BUFFER_RESET:'hlsBufferReset',// fired when we know about the codecs that we need buffers for to push into - data: {tracks : { container, codec, levelCodec, initSegment, metadata }}
BUFFER_CODECS:'hlsBufferCodecs',// fired when sourcebuffers have been created - data: { tracks : tracks }
BUFFER_CREATED:'hlsBufferCreated',// fired when we append a segment to the buffer - data: { segment: segment object }
BUFFER_APPENDING:'hlsBufferAppending',// fired when we are done with appending a media segment to the buffer - data : { parent : segment parent that triggered BUFFER_APPENDING, pending : nb of segments waiting for appending for this segment parent}
BUFFER_APPENDED:'hlsBufferAppended',// fired when the stream is finished and we want to notify the media buffer that there will be no more data - data: { }
BUFFER_EOS:'hlsBufferEos',// fired when the media buffer should be flushed - data { startOffset, endOffset }
BUFFER_FLUSHING:'hlsBufferFlushing',// fired when the media buffer has been flushed - data: { }
BUFFER_FLUSHED:'hlsBufferFlushed',// fired to signal that a manifest loading starts - data: { url : manifestURL}
MANIFEST_LOADING:'hlsManifestLoading',// fired after manifest has been loaded - data: { levels : [available quality levels], audioTracks : [ available audio tracks], url : manifestURL, stats : { trequest, tfirst, tload, mtime}}
MANIFEST_LOADED:'hlsManifestLoaded',// fired after manifest has been parsed - data: { levels : [available quality levels], firstLevel : index of first quality level appearing in Manifest}
MANIFEST_PARSED:'hlsManifestParsed',// fired when a level switch is requested - data: { level : id of new level }
LEVEL_SWITCHING:'hlsLevelSwitching',// fired when a level switch is effective - data: { level : id of new level }
LEVEL_SWITCHED:'hlsLevelSwitched',// fired when a level playlist loading starts - data: { url : level URL, level : id of level being loaded}
LEVEL_LOADING:'hlsLevelLoading',// fired when a level playlist loading finishes - data: { details : levelDetails object, level : id of loaded level, stats : { trequest, tfirst, tload, mtime} }
LEVEL_LOADED:'hlsLevelLoaded',// fired when a level's details have been updated based on previous details, after it has been loaded - data: { details : levelDetails object, level : id of updated level }
LEVEL_UPDATED:'hlsLevelUpdated',// fired when a level's PTS information has been updated after parsing a fragment - data: { details : levelDetails object, level : id of updated level, drift: PTS drift observed when parsing last fragment }
LEVEL_PTS_UPDATED:'hlsLevelPtsUpdated',// fired to notify that audio track lists has been updated - data: { audioTracks : audioTracks }
AUDIO_TRACKS_UPDATED:'hlsAudioTracksUpdated',// fired when an audio track switching is requested - data: { id : audio track id }
AUDIO_TRACK_SWITCHING:'hlsAudioTrackSwitching',// fired when an audio track switch actually occurs - data: { id : audio track id }
AUDIO_TRACK_SWITCHED:'hlsAudioTrackSwitched',// fired when an audio track loading starts - data: { url : audio track URL, id : audio track id }
AUDIO_TRACK_LOADING:'hlsAudioTrackLoading',// fired when an audio track loading finishes - data: { details : levelDetails object, id : audio track id, stats : { trequest, tfirst, tload, mtime } }
AUDIO_TRACK_LOADED:'hlsAudioTrackLoaded',// fired to notify that subtitle track lists has been updated - data: { subtitleTracks : subtitleTracks }
SUBTITLE_TRACKS_UPDATED:'hlsSubtitleTracksUpdated',// fired when an subtitle track switch occurs - data: { id : subtitle track id }
SUBTITLE_TRACK_SWITCH:'hlsSubtitleTrackSwitch',// fired when a subtitle track loading starts - data: { url : subtitle track URL, id : subtitle track id }
SUBTITLE_TRACK_LOADING:'hlsSubtitleTrackLoading',// fired when a subtitle track loading finishes - data: { details : levelDetails object, id : subtitle track id, stats : { trequest, tfirst, tload, mtime } }
SUBTITLE_TRACK_LOADED:'hlsSubtitleTrackLoaded',// fired when a subtitle fragment has been processed - data: { success : boolean, frag : the processed frag }
SUBTITLE_FRAG_PROCESSED:'hlsSubtitleFragProcessed',// fired when the first timestamp is found - data: { id : demuxer id, initPTS: initPTS, frag : fragment object }
INIT_PTS_FOUND:'hlsInitPtsFound',// fired when a fragment loading starts - data: { frag : fragment object }
FRAG_LOADING:'hlsFragLoading',// fired when a fragment loading is progressing - data: { frag : fragment object, { trequest, tfirst, loaded } }
FRAG_LOAD_PROGRESS:'hlsFragLoadProgress',// Identifier for fragment load aborting for emergency switch down - data: { frag : fragment object }
FRAG_LOAD_EMERGENCY_ABORTED:'hlsFragLoadEmergencyAborted',// fired when a fragment loading is completed - data: { frag : fragment object, payload : fragment payload, stats : { trequest, tfirst, tload, length } }
FRAG_LOADED:'hlsFragLoaded',// fired when a fragment has finished decrypting - data: { id : demuxer id, frag: fragment object, payload : fragment payload, stats : { tstart, tdecrypt } }
FRAG_DECRYPTED:'hlsFragDecrypted',// fired when Init Segment has been extracted from fragment - data: { id : demuxer id, frag: fragment object, moov : moov MP4 box, codecs : codecs found while parsing fragment }
FRAG_PARSING_INIT_SEGMENT:'hlsFragParsingInitSegment',// fired when parsing sei text is completed - data: { id : demuxer id, frag: fragment object, samples : [ sei samples pes ] }
FRAG_PARSING_USERDATA:'hlsFragParsingUserdata',// fired when parsing id3 is completed - data: { id : demuxer id, frag: fragment object, samples : [ id3 samples pes ] }
FRAG_PARSING_METADATA:'hlsFragParsingMetadata',// fired when data have been extracted from fragment - data: { id : demuxer id, frag: fragment object, data1 : moof MP4 box or TS fragments, data2 : mdat MP4 box or null}
FRAG_PARSING_DATA:'hlsFragParsingData',// fired when fragment parsing is completed - data: { id : demuxer id, frag: fragment object }
FRAG_PARSED:'hlsFragParsed',// fired when fragment remuxed MP4 boxes have all been appended into SourceBuffer - data: { id : demuxer id, frag : fragment object, stats : { trequest, tfirst, tload, tparsed, tbuffered, length, bwEstimate } }
FRAG_BUFFERED:'hlsFragBuffered',// fired when fragment matching with current media position is changing - data : { id : demuxer id, frag : fragment object }
FRAG_CHANGED:'hlsFragChanged',// Identifier for a FPS drop event - data: { curentDropped, currentDecoded, totalDroppedFrames }
FPS_DROP:'hlsFpsDrop',// triggered when FPS drop triggers auto level capping - data: { level, droppedlevel }
FPS_DROP_LEVEL_CAPPING:'hlsFpsDropLevelCapping',// Identifier for an error event - data: { type : error type, details : error details, fatal : if true, hls.js cannot/will not try to recover, if false, hls.js will try to recover,other error specific data }
ERROR:'hlsError',// fired when hls.js instance starts destroying. Different from MEDIA_DETACHED as one could want to detach and reattach a media to the instance of hls.js to handle mid-rolls for example - data: { }
DESTROYING:'hlsDestroying',// fired when a decrypt key loading starts - data: { frag : fragment object }
KEY_LOADING:'hlsKeyLoading',// fired when a decrypt key loading is completed - data: { frag : fragment object, payload : key payload, stats : { trequest, tfirst, tload, length } }
KEY_LOADED:'hlsKeyLoaded',// fired upon stream controller state transitions - data: { previousState, nextState }
STREAM_STATE_TRANSITION:'hlsStreamStateTransition'};exports.default=HlsEvents;/***/},/***/"./src/hls.js":/*!********************!*\
  !*** ./src/hls.js ***!
  \********************//*! no static exports found *//*! ModuleConcatenation bailout: Module is not an ECMAScript module *//***/function srcHlsJs(module,exports,__webpack_require__){"use strict";var __extends=this&&this.__extends||function(){var extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;}||function(d,b){for(var p in b){if(b.hasOwnProperty(p))d[p]=b[p];}};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};}();Object.defineProperty(exports,"__esModule",{value:true});var URLToolkit=__webpack_require__(/*! url-toolkit */"./node_modules/url-toolkit/src/url-toolkit.js");var errors_1=__webpack_require__(/*! ./errors */"./src/errors.js");var playlist_loader_1=__webpack_require__(/*! ./loader/playlist-loader */"./src/loader/playlist-loader.js");var fragment_loader_1=__webpack_require__(/*! ./loader/fragment-loader */"./src/loader/fragment-loader.js");var key_loader_1=__webpack_require__(/*! ./loader/key-loader */"./src/loader/key-loader.js");var fragment_tracker_1=__webpack_require__(/*! ./controller/fragment-tracker */"./src/controller/fragment-tracker.js");var stream_controller_1=__webpack_require__(/*! ./controller/stream-controller */"./src/controller/stream-controller.js");var level_controller_1=__webpack_require__(/*! ./controller/level-controller */"./src/controller/level-controller.js");var id3_track_controller_1=__webpack_require__(/*! ./controller/id3-track-controller */"./src/controller/id3-track-controller.js");var is_supported_1=__webpack_require__(/*! ./is-supported */"./src/is-supported.js");var logger_1=__webpack_require__(/*! ./utils/logger */"./src/utils/logger.js");var config_1=__webpack_require__(/*! ./config */"./src/config.js");var events_1=__webpack_require__(/*! ./events */"./src/events.js");var observer_1=__webpack_require__(/*! ./observer */"./src/observer.js");/**
 * @module Hls
 * @class
 * @constructor
 */var Hls=/** @class */function(_super){__extends(Hls,_super);/**
     * Creates an instance of an HLS client that can attach to exactly one `HTMLMediaElement`.
     *
     * @constructs Hls
     * @param {HlsConfig} config
     */function Hls(config){if(config===void 0){config={};}var _this=_super.call(this)||this;var defaultConfig=Hls.DefaultConfig;if((config.liveSyncDurationCount||config.liveMaxLatencyDurationCount)&&(config.liveSyncDuration||config.liveMaxLatencyDuration)){throw new Error('Illegal hls.js config: don\'t mix up liveSyncDurationCount/liveMaxLatencyDurationCount and liveSyncDuration/liveMaxLatencyDuration');}for(var prop in defaultConfig){if(prop in config)continue;config[prop]=defaultConfig[prop];}if(config.liveMaxLatencyDurationCount!==undefined&&config.liveMaxLatencyDurationCount<=config.liveSyncDurationCount){throw new Error('Illegal hls.js config: "liveMaxLatencyDurationCount" must be gt "liveSyncDurationCount"');}if(config.liveMaxLatencyDuration!==undefined&&(config.liveMaxLatencyDuration<=config.liveSyncDuration||config.liveSyncDuration===undefined)){throw new Error('Illegal hls.js config: "liveMaxLatencyDuration" must be gt "liveSyncDuration"');}logger_1.enableLogs(config.debug);_this.config=config;_this._autoLevelCapping=-1;// core controllers and network loaders
/**
         * @member {AbrController} abrController
         */var abrController=_this.abrController=new config.abrController(_this);var bufferController=new config.bufferController(_this);var capLevelController=new config.capLevelController(_this);var fpsController=new config.fpsController(_this);var playListLoader=new playlist_loader_1.default(_this);var fragmentLoader=new fragment_loader_1.default(_this);var keyLoader=new key_loader_1.default(_this);var id3TrackController=new id3_track_controller_1.default(_this);// network controllers
/**
         * @member {LevelController} levelController
         */var levelController=_this.levelController=new level_controller_1.default(_this);// FIXME: FragmentTracker must be defined before StreamController because the order of event handling is important
var fragmentTracker=new fragment_tracker_1.FragmentTracker(_this);/**
         * @member {StreamController} streamController
         */var streamController=_this.streamController=new stream_controller_1.default(_this,fragmentTracker);var networkControllers=[levelController,streamController];// optional audio stream controller
/**
         * @var {ICoreComponent | Controller}
         */var Controller=config.audioStreamController;if(Controller){networkControllers.push(new Controller(_this,fragmentTracker));}/**
         * @member {INetworkController[]} networkControllers
         */_this.networkControllers=networkControllers;/**
         * @var {ICoreComponent[]}
         */var coreComponents=[playListLoader,fragmentLoader,keyLoader,abrController,bufferController,capLevelController,fpsController,id3TrackController,fragmentTracker];// optional audio track and subtitle controller
Controller=config.audioTrackController;if(Controller){var audioTrackController=new Controller(_this);/**
             * @member {AudioTrackController} audioTrackController
             */_this.audioTrackController=audioTrackController;coreComponents.push(audioTrackController);}Controller=config.subtitleTrackController;if(Controller){var subtitleTrackController=new Controller(_this);/**
             * @member {SubtitleTrackController} subtitleTrackController
             */_this.subtitleTrackController=subtitleTrackController;networkControllers.push(subtitleTrackController);}Controller=config.emeController;if(Controller){var emeController=new Controller(_this);/**
             * @member {EMEController} emeController
             */_this.emeController=emeController;coreComponents.push(emeController);}// optional subtitle controllers
Controller=config.subtitleStreamController;if(Controller){networkControllers.push(new Controller(_this,fragmentTracker));}Controller=config.timelineController;if(Controller){coreComponents.push(new Controller(_this));}/**
         * @member {ICoreComponent[]}
         */_this.coreComponents=coreComponents;return _this;}Object.defineProperty(Hls,"version",{/**
         * @type {string}
         */get:function get(){return"0.12.4";},enumerable:true,configurable:true});/**
     * @type {boolean}
     */Hls.isSupported=function(){return is_supported_1.isSupported();};Object.defineProperty(Hls,"Events",{/**
         * @type {HlsEvents}
         */get:function get(){return events_1.default;},enumerable:true,configurable:true});Object.defineProperty(Hls,"ErrorTypes",{/**
         * @type {HlsErrorTypes}
         */get:function get(){return errors_1.ErrorTypes;},enumerable:true,configurable:true});Object.defineProperty(Hls,"ErrorDetails",{/**
         * @type {HlsErrorDetails}
         */get:function get(){return errors_1.ErrorDetails;},enumerable:true,configurable:true});Object.defineProperty(Hls,"DefaultConfig",{/**
         * @type {HlsConfig}
         */get:function get(){if(!Hls.defaultConfig){return config_1.hlsDefaultConfig;}return Hls.defaultConfig;},/**
         * @type {HlsConfig}
         */set:function set(defaultConfig){Hls.defaultConfig=defaultConfig;},enumerable:true,configurable:true});/**
     * Dispose of the instance
     */Hls.prototype.destroy=function(){logger_1.logger.log('destroy');this.trigger(events_1.default.DESTROYING);this.detachMedia();this.coreComponents.concat(this.networkControllers).forEach(function(component){component.destroy();});this.url=null;this.removeAllListeners();this._autoLevelCapping=-1;};/**
     * Attach a media element
     * @param {HTMLMediaElement} media
     */Hls.prototype.attachMedia=function(media){logger_1.logger.log('attachMedia');this.media=media;this.trigger(events_1.default.MEDIA_ATTACHING,{media:media});};/**
     * Detach from the media
     */Hls.prototype.detachMedia=function(){logger_1.logger.log('detachMedia');this.trigger(events_1.default.MEDIA_DETACHING);this.media=null;};/**
     * Set the source URL. Can be relative or absolute.
     * @param {string} url
     */Hls.prototype.loadSource=function(url){url=URLToolkit.buildAbsoluteURL(window.location.href,url,{alwaysNormalize:true});logger_1.logger.log("loadSource:"+url);this.url=url;// when attaching to a source URL, trigger a playlist load
this.trigger(events_1.default.MANIFEST_LOADING,{url:url});};/**
     * Start loading data from the stream source.
     * Depending on default config, client starts loading automatically when a source is set.
     *
     * @param {number} startPosition Set the start position to stream from
     * @default -1 None (from earliest point)
     */Hls.prototype.startLoad=function(startPosition){if(startPosition===void 0){startPosition=-1;}logger_1.logger.log("startLoad("+startPosition+")");this.networkControllers.forEach(function(controller){controller.startLoad(startPosition);});};/**
     * Stop loading of any stream data.
     */Hls.prototype.stopLoad=function(){logger_1.logger.log('stopLoad');this.networkControllers.forEach(function(controller){controller.stopLoad();});};/**
     * Swap through possible audio codecs in the stream (for example to switch from stereo to 5.1)
     */Hls.prototype.swapAudioCodec=function(){logger_1.logger.log('swapAudioCodec');this.streamController.swapAudioCodec();};/**
     * When the media-element fails, this allows to detach and then re-attach it
     * as one call (convenience method).
     *
     * Automatic recovery of media-errors by this process is configurable.
     */Hls.prototype.recoverMediaError=function(){logger_1.logger.log('recoverMediaError');var media=this.media;this.detachMedia();this.attachMedia(media);};Object.defineProperty(Hls.prototype,"levels",{/**
         * @type {QualityLevel[]}
         */get:function get(){return this.levelController.levels;},enumerable:true,configurable:true});Object.defineProperty(Hls.prototype,"currentLevel",{/**
         * Index of quality level currently played
         * @type {number}
         */get:function get(){return this.streamController.currentLevel;},/**
         * Set quality level index immediately .
         * This will flush the current buffer to replace the quality asap.
         * That means playback will interrupt at least shortly to re-buffer and re-sync eventually.
         * @type {number} -1 for automatic level selection
         */set:function set(newLevel){logger_1.logger.log("set currentLevel:"+newLevel);this.loadLevel=newLevel;this.streamController.immediateLevelSwitch();},enumerable:true,configurable:true});Object.defineProperty(Hls.prototype,"nextLevel",{/**
         * Index of next quality level loaded as scheduled by stream controller.
         * @type {number}
         */get:function get(){return this.streamController.nextLevel;},/**
         * Set quality level index for next loaded data.
         * This will switch the video quality asap, without interrupting playback.
         * May abort current loading of data, and flush parts of buffer (outside currently played fragment region).
         * @type {number} -1 for automatic level selection
         */set:function set(newLevel){logger_1.logger.log("set nextLevel:"+newLevel);this.levelController.manualLevel=newLevel;this.streamController.nextLevelSwitch();},enumerable:true,configurable:true});Object.defineProperty(Hls.prototype,"loadLevel",{/**
         * Return the quality level of the currently or last (of none is loaded currently) segment
         * @type {number}
         */get:function get(){return this.levelController.level;},/**
         * Set quality level index for next loaded data in a conservative way.
         * This will switch the quality without flushing, but interrupt current loading.
         * Thus the moment when the quality switch will appear in effect will only be after the already existing buffer.
         * @type {number} newLevel -1 for automatic level selection
         */set:function set(newLevel){logger_1.logger.log("set loadLevel:"+newLevel);this.levelController.manualLevel=newLevel;},enumerable:true,configurable:true});Object.defineProperty(Hls.prototype,"nextLoadLevel",{/**
         * get next quality level loaded
         * @type {number}
         */get:function get(){return this.levelController.nextLoadLevel;},/**
         * Set quality level of next loaded segment in a fully "non-destructive" way.
         * Same as `loadLevel` but will wait for next switch (until current loading is done).
         * @type {number} level
         */set:function set(level){this.levelController.nextLoadLevel=level;},enumerable:true,configurable:true});Object.defineProperty(Hls.prototype,"firstLevel",{/**
         * Return "first level": like a default level, if not set,
         * falls back to index of first level referenced in manifest
         * @type {number}
         */get:function get(){return Math.max(this.levelController.firstLevel,this.minAutoLevel);},/**
         * Sets "first-level", see getter.
         * @type {number}
         */set:function set(newLevel){logger_1.logger.log("set firstLevel:"+newLevel);this.levelController.firstLevel=newLevel;},enumerable:true,configurable:true});Object.defineProperty(Hls.prototype,"startLevel",{/**
         * Return start level (level of first fragment that will be played back)
         * if not overrided by user, first level appearing in manifest will be used as start level
         * if -1 : automatic start level selection, playback will start from level matching download bandwidth
         * (determined from download of first segment)
         * @type {number}
         */get:function get(){return this.levelController.startLevel;},/**
         * set  start level (level of first fragment that will be played back)
         * if not overrided by user, first level appearing in manifest will be used as start level
         * if -1 : automatic start level selection, playback will start from level matching download bandwidth
         * (determined from download of first segment)
         * @type {number} newLevel
         */set:function set(newLevel){logger_1.logger.log("set startLevel:"+newLevel);var hls=this;// if not in automatic start level detection, ensure startLevel is greater than minAutoLevel
if(newLevel!==-1){newLevel=Math.max(newLevel,hls.minAutoLevel);}hls.levelController.startLevel=newLevel;},enumerable:true,configurable:true});Object.defineProperty(Hls.prototype,"autoLevelCapping",{/**
         * Capping/max level value that should be used by automatic level selection algorithm (`ABRController`)
         * @type {number}
         */get:function get(){return this._autoLevelCapping;},/**
         * Capping/max level value that should be used by automatic level selection algorithm (`ABRController`)
         * @type {number}
         */set:function set(newLevel){logger_1.logger.log("set autoLevelCapping:"+newLevel);this._autoLevelCapping=newLevel;},enumerable:true,configurable:true});Object.defineProperty(Hls.prototype,"autoLevelEnabled",{/**
         * True when automatic level selection enabled
         * @type {boolean}
         */get:function get(){return this.levelController.manualLevel===-1;},enumerable:true,configurable:true});Object.defineProperty(Hls.prototype,"manualLevel",{/**
         * Level set manually (if any)
         * @type {number}
         */get:function get(){return this.levelController.manualLevel;},enumerable:true,configurable:true});Object.defineProperty(Hls.prototype,"minAutoLevel",{/**
         * min level selectable in auto mode according to config.minAutoBitrate
         * @type {number}
         */get:function get(){var hls=this,levels=hls.levels,minAutoBitrate=hls.config.minAutoBitrate,len=levels?levels.length:0;for(var i=0;i<len;i++){var levelNextBitrate=levels[i].realBitrate?Math.max(levels[i].realBitrate,levels[i].bitrate):levels[i].bitrate;if(levelNextBitrate>minAutoBitrate){return i;}}return 0;},enumerable:true,configurable:true});Object.defineProperty(Hls.prototype,"maxAutoLevel",{/**
         * max level selectable in auto mode according to autoLevelCapping
         * @type {number}
         */get:function get(){var hls=this;var levels=hls.levels;var autoLevelCapping=hls.autoLevelCapping;var maxAutoLevel;if(autoLevelCapping===-1&&levels&&levels.length){maxAutoLevel=levels.length-1;}else{maxAutoLevel=autoLevelCapping;}return maxAutoLevel;},enumerable:true,configurable:true});Object.defineProperty(Hls.prototype,"nextAutoLevel",{/**
         * next automatically selected quality level
         * @type {number}
         */get:function get(){var hls=this;// ensure next auto level is between  min and max auto level
return Math.min(Math.max(hls.abrController.nextAutoLevel,hls.minAutoLevel),hls.maxAutoLevel);},/**
         * this setter is used to force next auto level.
         * this is useful to force a switch down in auto mode:
         * in case of load error on level N, hls.js can set nextAutoLevel to N-1 for example)
         * forced value is valid for one fragment. upon succesful frag loading at forced level,
         * this value will be resetted to -1 by ABR controller.
         * @type {number}
         */set:function set(nextLevel){var hls=this;hls.abrController.nextAutoLevel=Math.max(hls.minAutoLevel,nextLevel);},enumerable:true,configurable:true});Object.defineProperty(Hls.prototype,"audioTracks",{/**
         * @type {AudioTrack[]}
         */get:function get(){var audioTrackController=this.audioTrackController;return audioTrackController?audioTrackController.audioTracks:[];},enumerable:true,configurable:true});Object.defineProperty(Hls.prototype,"audioTrack",{/**
         * index of the selected audio track (index in audio track lists)
         * @type {number}
         */get:function get(){var audioTrackController=this.audioTrackController;return audioTrackController?audioTrackController.audioTrack:-1;},/**
         * selects an audio track, based on its index in audio track lists
         * @type {number}
         */set:function set(audioTrackId){var audioTrackController=this.audioTrackController;if(audioTrackController){audioTrackController.audioTrack=audioTrackId;}},enumerable:true,configurable:true});Object.defineProperty(Hls.prototype,"liveSyncPosition",{/**
         * @type {Seconds}
         */get:function get(){return this.streamController.liveSyncPosition;},enumerable:true,configurable:true});Object.defineProperty(Hls.prototype,"subtitleTracks",{/**
         * get alternate subtitle tracks list from playlist
         * @type {SubtitleTrack[]}
         */get:function get(){var subtitleTrackController=this.subtitleTrackController;return subtitleTrackController?subtitleTrackController.subtitleTracks:[];},enumerable:true,configurable:true});Object.defineProperty(Hls.prototype,"subtitleTrack",{/**
         * index of the selected subtitle track (index in subtitle track lists)
         * @type {number}
         */get:function get(){var subtitleTrackController=this.subtitleTrackController;return subtitleTrackController?subtitleTrackController.subtitleTrack:-1;},/**
         * select an subtitle track, based on its index in subtitle track lists
         * @type{number}
         */set:function set(subtitleTrackId){var subtitleTrackController=this.subtitleTrackController;if(subtitleTrackController){subtitleTrackController.subtitleTrack=subtitleTrackId;}},enumerable:true,configurable:true});Object.defineProperty(Hls.prototype,"subtitleDisplay",{/**
         * @type {boolean}
         */get:function get(){var subtitleTrackController=this.subtitleTrackController;return subtitleTrackController?subtitleTrackController.subtitleDisplay:false;},/**
         * Enable/disable subtitle display rendering
         * @type {boolean}
         */set:function set(value){var subtitleTrackController=this.subtitleTrackController;if(subtitleTrackController){subtitleTrackController.subtitleDisplay=value;}},enumerable:true,configurable:true});return Hls;}(observer_1.Observer);exports.default=Hls;/***/},/***/"./src/is-supported.js":/*!*****************************!*\
  !*** ./src/is-supported.js ***!
  \*****************************//*! no static exports found *//*! ModuleConcatenation bailout: Module is not an ECMAScript module *//***/function srcIsSupportedJs(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var mediasource_helper_1=__webpack_require__(/*! ./utils/mediasource-helper */"./src/utils/mediasource-helper.js");function isSupported(){var mediaSource=mediasource_helper_1.getMediaSource();var sourceBuffer=window.SourceBuffer||window.WebKitSourceBuffer;var isTypeSupported=mediaSource&&typeof mediaSource.isTypeSupported==='function'&&mediaSource.isTypeSupported('video/mp4; codecs="avc1.42E01E,mp4a.40.2"');// if SourceBuffer is exposed ensure its API is valid
// safari and old version of Chrome doe not expose SourceBuffer globally so checking SourceBuffer.prototype is impossible
var sourceBufferValidAPI=!sourceBuffer||sourceBuffer.prototype&&typeof sourceBuffer.prototype.appendBuffer==='function'&&typeof sourceBuffer.prototype.remove==='function';return!!isTypeSupported&&!!sourceBufferValidAPI;}exports.isSupported=isSupported;/***/},/***/"./src/loader/fragment-loader.js":/*!***************************************!*\
  !*** ./src/loader/fragment-loader.js ***!
  \***************************************//*! no static exports found *//*! ModuleConcatenation bailout: Module is not an ECMAScript module *//***/function srcLoaderFragmentLoaderJs(module,exports,__webpack_require__){"use strict";/* WEBPACK VAR INJECTION */(function(Number){/*
 * Fragment Loader
*/var __extends=this&&this.__extends||function(){var extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;}||function(d,b){for(var p in b){if(b.hasOwnProperty(p))d[p]=b[p];}};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};}();Object.defineProperty(exports,"__esModule",{value:true});var events_1=__webpack_require__(/*! ../events */"./src/events.js");var event_handler_1=__webpack_require__(/*! ../event-handler */"./src/event-handler.js");var errors_1=__webpack_require__(/*! ../errors */"./src/errors.js");var logger_1=__webpack_require__(/*! ../utils/logger */"./src/utils/logger.js");var FragmentLoader=/** @class */function(_super){__extends(FragmentLoader,_super);function FragmentLoader(hls){var _this=_super.call(this,hls,events_1.default.FRAG_LOADING)||this;_this.loaders={};return _this;}FragmentLoader.prototype.destroy=function(){var loaders=this.loaders;for(var loaderName in loaders){var loader=loaders[loaderName];if(loader){loader.destroy();}}this.loaders={};_super.prototype.destroy.call(this);};FragmentLoader.prototype.onFragLoading=function(data){var frag=data.frag,type=frag.type,loaders=this.loaders,config=this.hls.config,FragmentILoader=config.fLoader,DefaultILoader=config.loader;// reset fragment state
frag.loaded=0;var loader=loaders[type];if(loader){logger_1.logger.warn("abort previous fragment loader for type: "+type);loader.abort();}loader=loaders[type]=frag.loader=config.fLoader?new FragmentILoader(config):new DefaultILoader(config);var loaderContext,loaderConfig,loaderCallbacks;loaderContext={url:frag.url,frag:frag,responseType:'arraybuffer',progressData:false};var start=frag.byteRangeStartOffset,end=frag.byteRangeEndOffset;if(Number.isFinite(start)&&Number.isFinite(end)){loaderContext.rangeStart=start;loaderContext.rangeEnd=end;}loaderConfig={timeout:config.fragLoadingTimeOut,maxRetry:0,retryDelay:0,maxRetryDelay:config.fragLoadingMaxRetryTimeout};loaderCallbacks={onSuccess:this.loadsuccess.bind(this),onError:this.loaderror.bind(this),onTimeout:this.loadtimeout.bind(this),onProgress:this.loadprogress.bind(this)};loader.load(loaderContext,loaderConfig,loaderCallbacks);};FragmentLoader.prototype.loadsuccess=function(response,stats,context,networkDetails){if(networkDetails===void 0){networkDetails=null;}var payload=response.data,frag=context.frag;// detach fragment loader on load success
frag.loader=undefined;this.loaders[frag.type]=undefined;this.hls.trigger(events_1.default.FRAG_LOADED,{payload:payload,frag:frag,stats:stats,networkDetails:networkDetails});};FragmentLoader.prototype.loaderror=function(response,context,networkDetails){if(networkDetails===void 0){networkDetails=null;}var frag=context.frag;var loader=frag.loader;if(loader){loader.abort();}this.loaders[frag.type]=undefined;this.hls.trigger(events_1.default.ERROR,{type:errors_1.ErrorTypes.NETWORK_ERROR,details:errors_1.ErrorDetails.FRAG_LOAD_ERROR,fatal:false,frag:context.frag,response:response,networkDetails:networkDetails});};FragmentLoader.prototype.loadtimeout=function(stats,context,networkDetails){if(networkDetails===void 0){networkDetails=null;}var frag=context.frag;var loader=frag.loader;if(loader){loader.abort();}this.loaders[frag.type]=undefined;this.hls.trigger(events_1.default.ERROR,{type:errors_1.ErrorTypes.NETWORK_ERROR,details:errors_1.ErrorDetails.FRAG_LOAD_TIMEOUT,fatal:false,frag:context.frag,networkDetails:networkDetails});};// data will be used for progressive parsing
FragmentLoader.prototype.loadprogress=function(stats,context,data,networkDetails){if(networkDetails===void 0){networkDetails=null;}var frag=context.frag;frag.loaded=stats.loaded;this.hls.trigger(events_1.default.FRAG_LOAD_PROGRESS,{frag:frag,stats:stats,networkDetails:networkDetails});};return FragmentLoader;}(event_handler_1.default);exports.default=FragmentLoader;/* WEBPACK VAR INJECTION */}).call(this,__webpack_require__(/*! ./src/polyfills/number */"./src/polyfills/number.js")["Number"]);/***/},/***/"./src/loader/fragment.js":/*!********************************!*\
  !*** ./src/loader/fragment.js ***!
  \********************************//*! no static exports found *//*! ModuleConcatenation bailout: Module is not an ECMAScript module *//***/function srcLoaderFragmentJs(module,exports,__webpack_require__){"use strict";/* WEBPACK VAR INJECTION */(function(Number){Object.defineProperty(exports,"__esModule",{value:true});var URLToolkit=__webpack_require__(/*! url-toolkit */"./node_modules/url-toolkit/src/url-toolkit.js");var level_key_1=__webpack_require__(/*! ./level-key */"./src/loader/level-key.js");var Fragment=/** @class */function(){function Fragment(){var _a;this._url=null;this._byteRange=null;this._decryptdata=null;this.tagList=[];this.programDateTime=null;this.rawProgramDateTime=null;// Holds the types of data this fragment supports
this._elementaryStreams=(_a={},_a[Fragment.ElementaryStreamTypes.AUDIO]=false,_a[Fragment.ElementaryStreamTypes.VIDEO]=false,_a);}Object.defineProperty(Fragment,"ElementaryStreamTypes",{/**
         * `type` property for this._elementaryStreams
         *
         * @enum
         */get:function get(){return{AUDIO:'audio',VIDEO:'video'};},enumerable:true,configurable:true});Object.defineProperty(Fragment.prototype,"url",{get:function get(){if(!this._url&&this.relurl){this._url=URLToolkit.buildAbsoluteURL(this.baseurl,this.relurl,{alwaysNormalize:true});}return this._url;},set:function set(value){this._url=value;},enumerable:true,configurable:true});Object.defineProperty(Fragment.prototype,"byteRange",{get:function get(){if(!this._byteRange&&!this.rawByteRange){return[];}if(this._byteRange){return this._byteRange;}var byteRange=[];if(this.rawByteRange){var params=this.rawByteRange.split('@',2);if(params.length===1){var lastByteRangeEndOffset=this.lastByteRangeEndOffset;byteRange[0]=lastByteRangeEndOffset||0;}else{byteRange[0]=parseInt(params[1]);}byteRange[1]=parseInt(params[0])+byteRange[0];this._byteRange=byteRange;}return byteRange;},enumerable:true,configurable:true});Object.defineProperty(Fragment.prototype,"byteRangeStartOffset",{/**
         * @type {number}
         */get:function get(){return this.byteRange[0];},enumerable:true,configurable:true});Object.defineProperty(Fragment.prototype,"byteRangeEndOffset",{get:function get(){return this.byteRange[1];},enumerable:true,configurable:true});Object.defineProperty(Fragment.prototype,"decryptdata",{get:function get(){if(!this._decryptdata){this._decryptdata=this.fragmentDecryptdataFromLevelkey(this.levelkey,this.sn);}return this._decryptdata;},enumerable:true,configurable:true});Object.defineProperty(Fragment.prototype,"endProgramDateTime",{get:function get(){if(!Number.isFinite(this.programDateTime)){return null;}var duration=!Number.isFinite(this.duration)?0:this.duration;return this.programDateTime+duration*1000;},enumerable:true,configurable:true});Object.defineProperty(Fragment.prototype,"encrypted",{get:function get(){return!!(this.decryptdata&&this.decryptdata.uri!==null&&this.decryptdata.key===null);},enumerable:true,configurable:true});/**
     * @param {ElementaryStreamType} type
     */Fragment.prototype.addElementaryStream=function(type){this._elementaryStreams[type]=true;};/**
     * @param {ElementaryStreamType} type
     */Fragment.prototype.hasElementaryStream=function(type){return this._elementaryStreams[type]===true;};/**
     * Utility method for parseLevelPlaylist to create an initialization vector for a given segment
     * @returns {Uint8Array}
     */Fragment.prototype.createInitializationVector=function(segmentNumber){var uint8View=new Uint8Array(16);for(var i=12;i<16;i++){uint8View[i]=segmentNumber>>8*(15-i)&0xff;}return uint8View;};/**
     * Utility method for parseLevelPlaylist to get a fragment's decryption data from the currently parsed encryption key data
     * @param levelkey - a playlist's encryption info
     * @param segmentNumber - the fragment's segment number
     * @returns {*} - an object to be applied as a fragment's decryptdata
     */Fragment.prototype.fragmentDecryptdataFromLevelkey=function(levelkey,segmentNumber){var decryptdata=levelkey;if(levelkey&&levelkey.method&&levelkey.uri&&!levelkey.iv){decryptdata=new level_key_1.default();decryptdata.method=levelkey.method;decryptdata.baseuri=levelkey.baseuri;decryptdata.reluri=levelkey.reluri;decryptdata.iv=this.createInitializationVector(segmentNumber);}return decryptdata;};return Fragment;}();exports.default=Fragment;/* WEBPACK VAR INJECTION */}).call(this,__webpack_require__(/*! ./src/polyfills/number */"./src/polyfills/number.js")["Number"]);/***/},/***/"./src/loader/key-loader.js":/*!**********************************!*\
  !*** ./src/loader/key-loader.js ***!
  \**********************************//*! no static exports found *//*! ModuleConcatenation bailout: Module is not an ECMAScript module *//***/function srcLoaderKeyLoaderJs(module,exports,__webpack_require__){"use strict";/*
 * Decrypt key Loader
*/var __extends=this&&this.__extends||function(){var extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;}||function(d,b){for(var p in b){if(b.hasOwnProperty(p))d[p]=b[p];}};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};}();Object.defineProperty(exports,"__esModule",{value:true});var events_1=__webpack_require__(/*! ../events */"./src/events.js");var event_handler_1=__webpack_require__(/*! ../event-handler */"./src/event-handler.js");var errors_1=__webpack_require__(/*! ../errors */"./src/errors.js");var logger_1=__webpack_require__(/*! ../utils/logger */"./src/utils/logger.js");var KeyLoader=/** @class */function(_super){__extends(KeyLoader,_super);function KeyLoader(hls){var _this=_super.call(this,hls,events_1.default.KEY_LOADING)||this;_this.loaders={};_this.decryptkey=null;_this.decrypturl=null;return _this;}KeyLoader.prototype.destroy=function(){for(var loaderName in this.loaders){var loader=this.loaders[loaderName];if(loader){loader.destroy();}}this.loaders={};event_handler_1.default.prototype.destroy.call(this);};KeyLoader.prototype.onKeyLoading=function(data){var frag=data.frag,type=frag.type,loader=this.loaders[type],decryptdata=frag.decryptdata,uri=decryptdata.uri;// if uri is different from previous one or if decrypt key not retrieved yet
if(uri!==this.decrypturl||this.decryptkey===null){var config=this.hls.config;if(loader){logger_1.logger.warn("abort previous key loader for type:"+type);loader.abort();}frag.loader=this.loaders[type]=new config.loader(config);this.decrypturl=uri;this.decryptkey=null;var loaderContext=void 0,loaderConfig=void 0,loaderCallbacks=void 0;loaderContext={url:uri,frag:frag,responseType:'arraybuffer'};// maxRetry is 0 so that instead of retrying the same key on the same variant multiple times,
// key-loader will trigger an error and rely on stream-controller to handle retry logic.
// this will also align retry logic with fragment-loader
loaderConfig={timeout:config.fragLoadingTimeOut,maxRetry:0,retryDelay:config.fragLoadingRetryDelay,maxRetryDelay:config.fragLoadingMaxRetryTimeout};loaderCallbacks={onSuccess:this.loadsuccess.bind(this),onError:this.loaderror.bind(this),onTimeout:this.loadtimeout.bind(this)};frag.loader.load(loaderContext,loaderConfig,loaderCallbacks);}else if(this.decryptkey){// we already loaded this key, return it
decryptdata.key=this.decryptkey;this.hls.trigger(events_1.default.KEY_LOADED,{frag:frag});}};KeyLoader.prototype.loadsuccess=function(response,stats,context){var frag=context.frag;this.decryptkey=frag.decryptdata.key=new Uint8Array(response.data);// detach fragment loader on load success
frag.loader=undefined;this.loaders[frag.type]=undefined;this.hls.trigger(events_1.default.KEY_LOADED,{frag:frag});};KeyLoader.prototype.loaderror=function(response,context){var frag=context.frag,loader=frag.loader;if(loader){loader.abort();}this.loaders[context.type]=undefined;this.hls.trigger(events_1.default.ERROR,{type:errors_1.ErrorTypes.NETWORK_ERROR,details:errors_1.ErrorDetails.KEY_LOAD_ERROR,fatal:false,frag:frag,response:response});};KeyLoader.prototype.loadtimeout=function(stats,context){var frag=context.frag,loader=frag.loader;if(loader){loader.abort();}this.loaders[context.type]=undefined;this.hls.trigger(events_1.default.ERROR,{type:errors_1.ErrorTypes.NETWORK_ERROR,details:errors_1.ErrorDetails.KEY_LOAD_TIMEOUT,fatal:false,frag:frag});};return KeyLoader;}(event_handler_1.default);exports.default=KeyLoader;/***/},/***/"./src/loader/level-key.js":/*!*********************************!*\
  !*** ./src/loader/level-key.js ***!
  \*********************************//*! no static exports found *//*! ModuleConcatenation bailout: Module is not an ECMAScript module *//***/function srcLoaderLevelKeyJs(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var URLToolkit=__webpack_require__(/*! url-toolkit */"./node_modules/url-toolkit/src/url-toolkit.js");var LevelKey=/** @class */function(){function LevelKey(){this.method=null;this.key=null;this.iv=null;this._uri=null;}Object.defineProperty(LevelKey.prototype,"uri",{get:function get(){if(!this._uri&&this.reluri){this._uri=URLToolkit.buildAbsoluteURL(this.baseuri,this.reluri,{alwaysNormalize:true});}return this._uri;},enumerable:true,configurable:true});return LevelKey;}();exports.default=LevelKey;/***/},/***/"./src/loader/level.js":/*!*****************************!*\
  !*** ./src/loader/level.js ***!
  \*****************************//*! no static exports found *//*! ModuleConcatenation bailout: Module is not an ECMAScript module *//***/function srcLoaderLevelJs(module,exports,__webpack_require__){"use strict";/* WEBPACK VAR INJECTION */(function(Number){Object.defineProperty(exports,"__esModule",{value:true});var Level=/** @class */function(){function Level(baseUrl){// Please keep properties in alphabetical order
this.endCC=0;this.endSN=0;this.fragments=[];this.initSegment=null;this.live=true;this.needSidxRanges=false;this.startCC=0;this.startSN=0;this.startTimeOffset=null;this.targetduration=0;this.totalduration=0;this.type=null;this.url=baseUrl;this.version=null;}Object.defineProperty(Level.prototype,"hasProgramDateTime",{get:function get(){return!!(this.fragments[0]&&Number.isFinite(this.fragments[0].programDateTime));},enumerable:true,configurable:true});return Level;}();exports.default=Level;/* WEBPACK VAR INJECTION */}).call(this,__webpack_require__(/*! ./src/polyfills/number */"./src/polyfills/number.js")["Number"]);/***/},/***/"./src/loader/m3u8-parser.js":/*!***********************************!*\
  !*** ./src/loader/m3u8-parser.js ***!
  \***********************************//*! no static exports found *//*! ModuleConcatenation bailout: Module is not an ECMAScript module *//***/function srcLoaderM3u8ParserJs(module,exports,__webpack_require__){"use strict";/* WEBPACK VAR INJECTION */(function(Number){Object.defineProperty(exports,"__esModule",{value:true});var URLToolkit=__webpack_require__(/*! url-toolkit */"./node_modules/url-toolkit/src/url-toolkit.js");var fragment_1=__webpack_require__(/*! ./fragment */"./src/loader/fragment.js");var level_1=__webpack_require__(/*! ./level */"./src/loader/level.js");var level_key_1=__webpack_require__(/*! ./level-key */"./src/loader/level-key.js");var attr_list_1=__webpack_require__(/*! ../utils/attr-list */"./src/utils/attr-list.js");var logger_1=__webpack_require__(/*! ../utils/logger */"./src/utils/logger.js");var codecs_1=__webpack_require__(/*! ../utils/codecs */"./src/utils/codecs.js");/**
 * M3U8 parser
 * @module
 */// https://regex101.com is your friend
var MASTER_PLAYLIST_REGEX=/#EXT-X-STREAM-INF:([^\n\r]*)[\r\n]+([^\r\n]+)/g;var MASTER_PLAYLIST_MEDIA_REGEX=/#EXT-X-MEDIA:(.*)/g;var LEVEL_PLAYLIST_REGEX_FAST=new RegExp([/#EXTINF:\s*(\d*(?:\.\d+)?)(?:,(.*)\s+)?/.source,/|(?!#)([\S+ ?]+)/.source,/|#EXT-X-BYTERANGE:*(.+)/.source,/|#EXT-X-PROGRAM-DATE-TIME:(.+)/.source,/|#.*/.source// All other non-segment oriented tags will match with all groups empty
].join(''),'g');var LEVEL_PLAYLIST_REGEX_SLOW=/(?:(?:#(EXTM3U))|(?:#EXT-X-(PLAYLIST-TYPE):(.+))|(?:#EXT-X-(MEDIA-SEQUENCE): *(\d+))|(?:#EXT-X-(TARGETDURATION): *(\d+))|(?:#EXT-X-(KEY):(.+))|(?:#EXT-X-(START):(.+))|(?:#EXT-X-(ENDLIST))|(?:#EXT-X-(DISCONTINUITY-SEQ)UENCE:(\d+))|(?:#EXT-X-(DIS)CONTINUITY))|(?:#EXT-X-(VERSION):(\d+))|(?:#EXT-X-(MAP):(.+))|(?:(#)([^:]*):(.*))|(?:(#)(.*))(?:.*)\r?\n?/;var MP4_REGEX_SUFFIX=/\.(mp4|m4s|m4v|m4a)$/i;var M3U8Parser=/** @class */function(){function M3U8Parser(){}M3U8Parser.findGroup=function(groups,mediaGroupId){if(!groups){return null;}var matchingGroup=null;for(var i=0;i<groups.length;i++){var group=groups[i];if(group.id===mediaGroupId){matchingGroup=group;}}return matchingGroup;};M3U8Parser.convertAVC1ToAVCOTI=function(codec){var result,avcdata=codec.split('.');if(avcdata.length>2){result=avcdata.shift()+'.';result+=parseInt(avcdata.shift()).toString(16);result+=('000'+parseInt(avcdata.shift()).toString(16)).substr(-4);}else{result=codec;}return result;};M3U8Parser.resolve=function(url,baseUrl){return URLToolkit.buildAbsoluteURL(baseUrl,url,{alwaysNormalize:true});};M3U8Parser.parseMasterPlaylist=function(string,baseurl){var levels=[],result;MASTER_PLAYLIST_REGEX.lastIndex=0;function setCodecs(codecs,level){['video','audio'].forEach(function(type){var filtered=codecs.filter(function(codec){return codecs_1.isCodecType(codec,type);});if(filtered.length){var preferred=filtered.filter(function(codec){return codec.lastIndexOf('avc1',0)===0||codec.lastIndexOf('mp4a',0)===0;});level[type+"Codec"]=preferred.length>0?preferred[0]:filtered[0];// remove from list
codecs=codecs.filter(function(codec){return filtered.indexOf(codec)===-1;});}});level.unknownCodecs=codecs;}while((result=MASTER_PLAYLIST_REGEX.exec(string))!=null){var level={};var attrs=level.attrs=new attr_list_1.default(result[1]);level.url=M3U8Parser.resolve(result[2],baseurl);var resolution=attrs.decimalResolution('RESOLUTION');if(resolution){level.width=resolution.width;level.height=resolution.height;}level.bitrate=attrs.decimalInteger('AVERAGE-BANDWIDTH')||attrs.decimalInteger('BANDWIDTH');level.name=attrs.NAME;setCodecs([].concat((attrs.CODECS||'').split(/[ ,]+/)),level);if(level.videoCodec&&level.videoCodec.indexOf('avc1')!==-1){level.videoCodec=M3U8Parser.convertAVC1ToAVCOTI(level.videoCodec);}levels.push(level);}return levels;};M3U8Parser.parseMasterPlaylistMedia=function(string,baseurl,type,audioGroups){if(audioGroups===void 0){audioGroups=[];}var result;var medias=[];var id=0;MASTER_PLAYLIST_MEDIA_REGEX.lastIndex=0;while((result=MASTER_PLAYLIST_MEDIA_REGEX.exec(string))!==null){var media={};var attrs=new attr_list_1.default(result[1]);if(attrs.TYPE===type){media.groupId=attrs['GROUP-ID'];media.name=attrs.NAME;media.type=type;media.default=attrs.DEFAULT==='YES';media.autoselect=attrs.AUTOSELECT==='YES';media.forced=attrs.FORCED==='YES';if(attrs.URI){media.url=M3U8Parser.resolve(attrs.URI,baseurl);}media.lang=attrs.LANGUAGE;if(!media.name){media.name=media.lang;}if(audioGroups.length){var groupCodec=M3U8Parser.findGroup(audioGroups,media.groupId);media.audioCodec=groupCodec?groupCodec.codec:audioGroups[0].codec;}media.id=id++;medias.push(media);}}return medias;};M3U8Parser.parseLevelPlaylist=function(string,baseurl,id,type,levelUrlId){var currentSN=0;var totalduration=0;var level=new level_1.default(baseurl);var levelkey=new level_key_1.default();var cc=0;var prevFrag=null;var frag=new fragment_1.default();var result;var i;var firstPdtIndex=null;LEVEL_PLAYLIST_REGEX_FAST.lastIndex=0;while((result=LEVEL_PLAYLIST_REGEX_FAST.exec(string))!==null){var duration=result[1];if(duration){// INF
frag.duration=parseFloat(duration);// avoid sliced strings    https://github.com/video-dev/hls.js/issues/939
var title=(' '+result[2]).slice(1);frag.title=title||null;frag.tagList.push(title?['INF',duration,title]:['INF',duration]);}else if(result[3]){// url
if(Number.isFinite(frag.duration)){var sn=currentSN++;frag.type=type;frag.start=totalduration;frag.levelkey=levelkey;frag.sn=sn;frag.level=id;frag.cc=cc;frag.urlId=levelUrlId;frag.baseurl=baseurl;// avoid sliced strings    https://github.com/video-dev/hls.js/issues/939
frag.relurl=(' '+result[3]).slice(1);assignProgramDateTime(frag,prevFrag);level.fragments.push(frag);prevFrag=frag;totalduration+=frag.duration;frag=new fragment_1.default();}}else if(result[4]){// X-BYTERANGE
frag.rawByteRange=(' '+result[4]).slice(1);if(prevFrag){var lastByteRangeEndOffset=prevFrag.byteRangeEndOffset;if(lastByteRangeEndOffset){frag.lastByteRangeEndOffset=lastByteRangeEndOffset;}}}else if(result[5]){// PROGRAM-DATE-TIME
// avoid sliced strings    https://github.com/video-dev/hls.js/issues/939
frag.rawProgramDateTime=(' '+result[5]).slice(1);frag.tagList.push(['PROGRAM-DATE-TIME',frag.rawProgramDateTime]);if(firstPdtIndex===null){firstPdtIndex=level.fragments.length;}}else{result=result[0].match(LEVEL_PLAYLIST_REGEX_SLOW);for(i=1;i<result.length;i++){if(result[i]!==undefined){break;}}// avoid sliced strings    https://github.com/video-dev/hls.js/issues/939
var value1=(' '+result[i+1]).slice(1);var value2=(' '+result[i+2]).slice(1);switch(result[i]){case'#':frag.tagList.push(value2?[value1,value2]:[value1]);break;case'PLAYLIST-TYPE':level.type=value1.toUpperCase();break;case'MEDIA-SEQUENCE':currentSN=level.startSN=parseInt(value1);break;case'TARGETDURATION':level.targetduration=parseFloat(value1);break;case'VERSION':level.version=parseInt(value1);break;case'EXTM3U':break;case'ENDLIST':level.live=false;break;case'DIS':cc++;frag.tagList.push(['DIS']);break;case'DISCONTINUITY-SEQ':cc=parseInt(value1);break;case'KEY':// https://tools.ietf.org/html/draft-pantos-http-live-streaming-08#section-3.4.4
var decryptparams=value1;var keyAttrs=new attr_list_1.default(decryptparams);var decryptmethod=keyAttrs.enumeratedString('METHOD'),decrypturi=keyAttrs.URI,decryptiv=keyAttrs.hexadecimalInteger('IV');if(decryptmethod){levelkey=new level_key_1.default();if(decrypturi&&['AES-128','SAMPLE-AES','SAMPLE-AES-CENC'].indexOf(decryptmethod)>=0){levelkey.method=decryptmethod;// URI to get the key
levelkey.baseuri=baseurl;levelkey.reluri=decrypturi;levelkey.key=null;// Initialization Vector (IV)
levelkey.iv=decryptiv;}}break;case'START':var startParams=value1;var startAttrs=new attr_list_1.default(startParams);var startTimeOffset=startAttrs.decimalFloatingPoint('TIME-OFFSET');// TIME-OFFSET can be 0
if(Number.isFinite(startTimeOffset)){level.startTimeOffset=startTimeOffset;}break;case'MAP':var mapAttrs=new attr_list_1.default(value1);frag.relurl=mapAttrs.URI;frag.rawByteRange=mapAttrs.BYTERANGE;frag.baseurl=baseurl;frag.level=id;frag.type=type;frag.sn='initSegment';level.initSegment=frag;frag=new fragment_1.default();frag.rawProgramDateTime=level.initSegment.rawProgramDateTime;break;default:logger_1.logger.warn("line parsed but not handled: "+result);break;}}}frag=prevFrag;// logger.log('found ' + level.fragments.length + ' fragments');
if(frag&&!frag.relurl){level.fragments.pop();totalduration-=frag.duration;}level.totalduration=totalduration;level.averagetargetduration=totalduration/level.fragments.length;level.endSN=currentSN-1;level.startCC=level.fragments[0]?level.fragments[0].cc:0;level.endCC=cc;if(!level.initSegment&&level.fragments.length){// this is a bit lurky but HLS really has no other way to tell us
// if the fragments are TS or MP4, except if we download them :/
// but this is to be able to handle SIDX.
if(level.fragments.every(function(frag){return MP4_REGEX_SUFFIX.test(frag.relurl);})){logger_1.logger.warn('MP4 fragments found but no init segment (probably no MAP, incomplete M3U8), trying to fetch SIDX');frag=new fragment_1.default();frag.relurl=level.fragments[0].relurl;frag.baseurl=baseurl;frag.level=id;frag.type=type;frag.sn='initSegment';level.initSegment=frag;level.needSidxRanges=true;}}/**
         * Backfill any missing PDT values
           "If the first EXT-X-PROGRAM-DATE-TIME tag in a Playlist appears after
           one or more Media Segment URIs, the client SHOULD extrapolate
           backward from that tag (using EXTINF durations and/or media
           timestamps) to associate dates with those segments."
         * We have already extrapolated forward, but all fragments up to the first instance of PDT do not have their PDTs
         * computed.
         */if(firstPdtIndex){backfillProgramDateTimes(level.fragments,firstPdtIndex);}return level;};return M3U8Parser;}();exports.default=M3U8Parser;function backfillProgramDateTimes(fragments,startIndex){var fragPrev=fragments[startIndex];for(var i=startIndex-1;i>=0;i--){var frag=fragments[i];frag.programDateTime=fragPrev.programDateTime-frag.duration*1000;fragPrev=frag;}}function assignProgramDateTime(frag,prevFrag){if(frag.rawProgramDateTime){frag.programDateTime=Date.parse(frag.rawProgramDateTime);}else if(prevFrag&&prevFrag.programDateTime){frag.programDateTime=prevFrag.endProgramDateTime;}if(!Number.isFinite(frag.programDateTime)){frag.programDateTime=null;frag.rawProgramDateTime=null;}}/* WEBPACK VAR INJECTION */}).call(this,__webpack_require__(/*! ./src/polyfills/number */"./src/polyfills/number.js")["Number"]);/***/},/***/"./src/loader/playlist-loader.js":/*!***************************************!*\
  !*** ./src/loader/playlist-loader.js ***!
  \***************************************//*! no static exports found *//*! ModuleConcatenation bailout: Module is not an ECMAScript module *//***/function srcLoaderPlaylistLoaderJs(module,exports,__webpack_require__){"use strict";/* WEBPACK VAR INJECTION */(function(Number){/**
 * PlaylistLoader - delegate for media manifest/playlist loading tasks. Takes care of parsing media to internal data-models.
 *
 * Once loaded, dispatches events with parsed data-models of manifest/levels/audio/subtitle tracks.
 *
 * Uses loader(s) set in config to do actual internal loading of resource tasks.
 *
 * @module
 *
 */var __extends=this&&this.__extends||function(){var extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;}||function(d,b){for(var p in b){if(b.hasOwnProperty(p))d[p]=b[p];}};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};}();Object.defineProperty(exports,"__esModule",{value:true});var events_1=__webpack_require__(/*! ../events */"./src/events.js");var event_handler_1=__webpack_require__(/*! ../event-handler */"./src/event-handler.js");var errors_1=__webpack_require__(/*! ../errors */"./src/errors.js");var logger_1=__webpack_require__(/*! ../utils/logger */"./src/utils/logger.js");var mp4demuxer_1=__webpack_require__(/*! ../demux/mp4demuxer */"./src/demux/mp4demuxer.js");var m3u8_parser_1=__webpack_require__(/*! ./m3u8-parser */"./src/loader/m3u8-parser.js");var performance=window.performance;/**
 * `type` property values for this loaders' context object
 * @enum
 *
 */var ContextType={MANIFEST:'manifest',LEVEL:'level',AUDIO_TRACK:'audioTrack',SUBTITLE_TRACK:'subtitleTrack'};/**
 * @enum {string}
 */var LevelType={MAIN:'main',AUDIO:'audio',SUBTITLE:'subtitle'};/**
 * @constructor
 */var PlaylistLoader=/** @class */function(_super){__extends(PlaylistLoader,_super);/**
     * @constructs
     * @param {Hls} hls
     */function PlaylistLoader(hls){var _this=_super.call(this,hls,events_1.default.MANIFEST_LOADING,events_1.default.LEVEL_LOADING,events_1.default.AUDIO_TRACK_LOADING,events_1.default.SUBTITLE_TRACK_LOADING)||this;_this.loaders={};return _this;}Object.defineProperty(PlaylistLoader,"ContextType",{get:function get(){return ContextType;},enumerable:true,configurable:true});Object.defineProperty(PlaylistLoader,"LevelType",{get:function get(){return LevelType;},enumerable:true,configurable:true});/**
     * @param {ContextType} type
     * @returns {boolean}
     */PlaylistLoader.canHaveQualityLevels=function(type){return type!==ContextType.AUDIO_TRACK&&type!==ContextType.SUBTITLE_TRACK;};/**
     * Map context.type to LevelType
     * @param {{type: ContextType}} context
     * @returns {LevelType}
     */PlaylistLoader.mapContextToLevelType=function(context){var type=context.type;switch(type){case ContextType.AUDIO_TRACK:return LevelType.AUDIO;case ContextType.SUBTITLE_TRACK:return LevelType.SUBTITLE;default:return LevelType.MAIN;}};PlaylistLoader.getResponseUrl=function(response,context){var url=response.url;// responseURL not supported on some browsers (it is used to detect URL redirection)
// data-uri mode also not supported (but no need to detect redirection)
if(url===undefined||url.indexOf('data:')===0){// fallback to initial URL
url=context.url;}return url;};/**
     * Returns defaults or configured loader-type overloads (pLoader and loader config params)
     * Default loader is XHRLoader (see utils)
     * @param {object} context
     * @returns {XHRLoader} or other compatible configured overload
     */PlaylistLoader.prototype.createInternalLoader=function(context){var config=this.hls.config;var PLoader=config.pLoader;var Loader=config.loader;var InternalLoader=PLoader||Loader;var loader=new InternalLoader(config);context.loader=loader;this.loaders[context.type]=loader;return loader;};PlaylistLoader.prototype.getInternalLoader=function(context){return this.loaders[context.type];};PlaylistLoader.prototype.resetInternalLoader=function(contextType){if(this.loaders[contextType]){delete this.loaders[contextType];}};/**
     * Call `destroy` on all internal loader instances mapped (one per context type)
     */PlaylistLoader.prototype.destroyInternalLoaders=function(){for(var contextType in this.loaders){var loader=this.loaders[contextType];if(loader){loader.destroy();}this.resetInternalLoader(contextType);}};PlaylistLoader.prototype.destroy=function(){this.destroyInternalLoaders();_super.prototype.destroy.call(this);};PlaylistLoader.prototype.onManifestLoading=function(data){this.load(data.url,{type:ContextType.MANIFEST,level:0,id:null});};PlaylistLoader.prototype.onLevelLoading=function(data){this.load(data.url,{type:ContextType.LEVEL,level:data.level,id:data.id});};PlaylistLoader.prototype.onAudioTrackLoading=function(data){this.load(data.url,{type:ContextType.AUDIO_TRACK,level:null,id:data.id});};PlaylistLoader.prototype.onSubtitleTrackLoading=function(data){this.load(data.url,{type:ContextType.SUBTITLE_TRACK,level:null,id:data.id});};PlaylistLoader.prototype.load=function(url,context){var config=this.hls.config;logger_1.logger.debug("Loading playlist of type "+context.type+", level: "+context.level+", id: "+context.id);// Check if a loader for this context already exists
var loader=this.getInternalLoader(context);if(loader){var loaderContext=loader.context;if(loaderContext&&loaderContext.url===url){// same URL can't overlap
logger_1.logger.trace('playlist request ongoing');return false;}else{logger_1.logger.warn("aborting previous loader for type: "+context.type);loader.abort();}}var maxRetry,timeout,retryDelay,maxRetryDelay;// apply different configs for retries depending on
// context (manifest, level, audio/subs playlist)
switch(context.type){case ContextType.MANIFEST:maxRetry=config.manifestLoadingMaxRetry;timeout=config.manifestLoadingTimeOut;retryDelay=config.manifestLoadingRetryDelay;maxRetryDelay=config.manifestLoadingMaxRetryTimeout;break;case ContextType.LEVEL:// Disable internal loader retry logic, since we are managing retries in Level Controller
maxRetry=0;timeout=config.levelLoadingTimeOut;// TODO Introduce retry settings for audio-track and subtitle-track, it should not use level retry config
break;default:maxRetry=config.levelLoadingMaxRetry;timeout=config.levelLoadingTimeOut;retryDelay=config.levelLoadingRetryDelay;maxRetryDelay=config.levelLoadingMaxRetryTimeout;break;}loader=this.createInternalLoader(context);context.url=url;context.responseType=context.responseType||'';// FIXME: (should not be necessary to do this)
var loaderConfig={timeout:timeout,maxRetry:maxRetry,retryDelay:retryDelay,maxRetryDelay:maxRetryDelay};var loaderCallbacks={onSuccess:this.loadsuccess.bind(this),onError:this.loaderror.bind(this),onTimeout:this.loadtimeout.bind(this)};logger_1.logger.debug("Calling internal loader delegate for URL: "+url);loader.load(context,loaderConfig,loaderCallbacks);return true;};PlaylistLoader.prototype.loadsuccess=function(response,stats,context,networkDetails){if(networkDetails===void 0){networkDetails=null;}if(context.isSidxRequest){this._handleSidxRequest(response,context);this._handlePlaylistLoaded(response,stats,context,networkDetails);return;}this.resetInternalLoader(context.type);var string=response.data;stats.tload=performance.now();// stats.mtime = new Date(target.getResponseHeader('Last-Modified'));
// Validate if it is an M3U8 at all
if(string.indexOf('#EXTM3U')!==0){this._handleManifestParsingError(response,context,'no EXTM3U delimiter',networkDetails);return;}// Check if chunk-list or master. handle empty chunk list case (first EXTINF not signaled, but TARGETDURATION present)
if(string.indexOf('#EXTINF:')>0||string.indexOf('#EXT-X-TARGETDURATION:')>0){this._handleTrackOrLevelPlaylist(response,stats,context,networkDetails);}else{this._handleMasterPlaylist(response,stats,context,networkDetails);}};PlaylistLoader.prototype.loaderror=function(response,context,networkDetails){if(networkDetails===void 0){networkDetails=null;}this._handleNetworkError(context,networkDetails,false,response);};PlaylistLoader.prototype.loadtimeout=function(stats,context,networkDetails){if(networkDetails===void 0){networkDetails=null;}this._handleNetworkError(context,networkDetails,true);};PlaylistLoader.prototype._handleMasterPlaylist=function(response,stats,context,networkDetails){var hls=this.hls;var string=response.data;var url=PlaylistLoader.getResponseUrl(response,context);var levels=m3u8_parser_1.default.parseMasterPlaylist(string,url);if(!levels.length){this._handleManifestParsingError(response,context,'no level found in manifest',networkDetails);return;}// multi level playlist, parse level info
var audioGroups=levels.map(function(level){return{id:level.attrs.AUDIO,codec:level.audioCodec};});var audioTracks=m3u8_parser_1.default.parseMasterPlaylistMedia(string,url,'AUDIO',audioGroups);var subtitles=m3u8_parser_1.default.parseMasterPlaylistMedia(string,url,'SUBTITLES');if(audioTracks.length){// check if we have found an audio track embedded in main playlist (audio track without URI attribute)
var embeddedAudioFound_1=false;audioTracks.forEach(function(audioTrack){if(!audioTrack.url){embeddedAudioFound_1=true;}});// if no embedded audio track defined, but audio codec signaled in quality level,
// we need to signal this main audio track this could happen with playlists with
// alt audio rendition in which quality levels (main)
// contains both audio+video. but with mixed audio track not signaled
if(embeddedAudioFound_1===false&&levels[0].audioCodec&&!levels[0].attrs.AUDIO){logger_1.logger.log('audio codec signaled in quality level, but no embedded audio track signaled, create one');audioTracks.unshift({type:'main',name:'main'});}}hls.trigger(events_1.default.MANIFEST_LOADED,{levels:levels,audioTracks:audioTracks,subtitles:subtitles,url:url,stats:stats,networkDetails:networkDetails});};PlaylistLoader.prototype._handleTrackOrLevelPlaylist=function(response,stats,context,networkDetails){var hls=this.hls;var id=context.id,level=context.level,type=context.type;var url=PlaylistLoader.getResponseUrl(response,context);var levelUrlId=Number.isFinite(id)?id:0;var levelId=Number.isFinite(level)?level:levelUrlId;var levelType=PlaylistLoader.mapContextToLevelType(context);var levelDetails=m3u8_parser_1.default.parseLevelPlaylist(response.data,url,levelId,levelType,levelUrlId);// set stats on level structure
levelDetails.tload=stats.tload;// We have done our first request (Manifest-type) and receive
// not a master playlist but a chunk-list (track/level)
// We fire the manifest-loaded event anyway with the parsed level-details
// by creating a single-level structure for it.
if(type===ContextType.MANIFEST){var singleLevel={url:url,details:levelDetails};hls.trigger(events_1.default.MANIFEST_LOADED,{levels:[singleLevel],audioTracks:[],url:url,stats:stats,networkDetails:networkDetails});}// save parsing time
stats.tparsed=performance.now();// in case we need SIDX ranges
// return early after calling load for
// the SIDX box.
if(levelDetails.needSidxRanges){var sidxUrl=levelDetails.initSegment.url;this.load(sidxUrl,{isSidxRequest:true,type:type,level:level,levelDetails:levelDetails,id:id,rangeStart:0,rangeEnd:2048,responseType:'arraybuffer'});return;}// extend the context with the new levelDetails property
context.levelDetails=levelDetails;this._handlePlaylistLoaded(response,stats,context,networkDetails);};PlaylistLoader.prototype._handleSidxRequest=function(response,context){var sidxInfo=mp4demuxer_1.default.parseSegmentIndex(new Uint8Array(response.data));// if provided fragment does not contain sidx, early return
if(!sidxInfo){return;}var sidxReferences=sidxInfo.references;var levelDetails=context.levelDetails;sidxReferences.forEach(function(segmentRef,index){var segRefInfo=segmentRef.info;var frag=levelDetails.fragments[index];if(frag.byteRange.length===0){frag.rawByteRange=String(1+segRefInfo.end-segRefInfo.start)+'@'+String(segRefInfo.start);}});levelDetails.initSegment.rawByteRange=String(sidxInfo.moovEndOffset)+'@0';};PlaylistLoader.prototype._handleManifestParsingError=function(response,context,reason,networkDetails){this.hls.trigger(events_1.default.ERROR,{type:errors_1.ErrorTypes.NETWORK_ERROR,details:errors_1.ErrorDetails.MANIFEST_PARSING_ERROR,fatal:true,url:response.url,reason:reason,networkDetails:networkDetails});};PlaylistLoader.prototype._handleNetworkError=function(context,networkDetails,timeout,response){if(timeout===void 0){timeout=false;}if(response===void 0){response=null;}logger_1.logger.info("A network error occured while loading a "+context.type+"-type playlist");var details;var fatal;var loader=this.getInternalLoader(context);switch(context.type){case ContextType.MANIFEST:details=timeout?errors_1.ErrorDetails.MANIFEST_LOAD_TIMEOUT:errors_1.ErrorDetails.MANIFEST_LOAD_ERROR;fatal=true;break;case ContextType.LEVEL:details=timeout?errors_1.ErrorDetails.LEVEL_LOAD_TIMEOUT:errors_1.ErrorDetails.LEVEL_LOAD_ERROR;fatal=false;break;case ContextType.AUDIO_TRACK:details=timeout?errors_1.ErrorDetails.AUDIO_TRACK_LOAD_TIMEOUT:errors_1.ErrorDetails.AUDIO_TRACK_LOAD_ERROR;fatal=false;break;default:// details = ...?
fatal=false;}if(loader){loader.abort();this.resetInternalLoader(context.type);}var errorData={type:errors_1.ErrorTypes.NETWORK_ERROR,details:details,fatal:fatal,url:loader.url,loader:loader,context:context,networkDetails:networkDetails};if(response){errorData.response=response;}this.hls.trigger(events_1.default.ERROR,errorData);};PlaylistLoader.prototype._handlePlaylistLoaded=function(response,stats,context,networkDetails){var type=context.type,level=context.level,id=context.id,levelDetails=context.levelDetails;if(!levelDetails.targetduration){this._handleManifestParsingError(response,context,'invalid target duration',networkDetails);return;}var canHaveLevels=PlaylistLoader.canHaveQualityLevels(context.type);if(canHaveLevels){this.hls.trigger(events_1.default.LEVEL_LOADED,{details:levelDetails,level:level||0,id:id||0,stats:stats,networkDetails:networkDetails});}else{switch(type){case ContextType.AUDIO_TRACK:this.hls.trigger(events_1.default.AUDIO_TRACK_LOADED,{details:levelDetails,id:id,stats:stats,networkDetails:networkDetails});break;case ContextType.SUBTITLE_TRACK:this.hls.trigger(events_1.default.SUBTITLE_TRACK_LOADED,{details:levelDetails,id:id,stats:stats,networkDetails:networkDetails});break;}}};return PlaylistLoader;}(event_handler_1.default);exports.default=PlaylistLoader;/* WEBPACK VAR INJECTION */}).call(this,__webpack_require__(/*! ./src/polyfills/number */"./src/polyfills/number.js")["Number"]);/***/},/***/"./src/observer.js":/*!*************************!*\
  !*** ./src/observer.js ***!
  \*************************//*! no static exports found *//*! ModuleConcatenation bailout: Module is not an ECMAScript module *//***/function srcObserverJs(module,exports,__webpack_require__){"use strict";var __extends=this&&this.__extends||function(){var extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;}||function(d,b){for(var p in b){if(b.hasOwnProperty(p))d[p]=b[p];}};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};}();Object.defineProperty(exports,"__esModule",{value:true});var eventemitter3_1=__webpack_require__(/*! eventemitter3 */"./node_modules/eventemitter3/index.js");/**
 * @class
 *
 * Simple adapter sub-class of Nodejs-like EventEmitter.
 *
 * We simply want to pass along the event-name itself
 * in every call to a handler, which is the purpose of our `trigger` method
 * extending the standard API.
 *
 */var Observer=/** @class */function(_super){__extends(Observer,_super);function Observer(){return _super!==null&&_super.apply(this,arguments)||this;}/**
     *
     * @param {string} event
     * @param {any} data
     */Observer.prototype.trigger=function(event){var data=[];for(var _i=1;_i<arguments.length;_i++){data[_i-1]=arguments[_i];}this.emit.apply(this,[event,event].concat(data));};return Observer;}(eventemitter3_1.EventEmitter);exports.Observer=Observer;/***/},/***/"./src/polyfills/number.js":/*!*********************************!*\
  !*** ./src/polyfills/number.js ***!
  \*********************************//*! no static exports found *//*! ModuleConcatenation bailout: Module is not an ECMAScript module *//***/function srcPolyfillsNumberJs(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var get_self_scope_1=__webpack_require__(/*! ../utils/get-self-scope */"./src/utils/get-self-scope.js");var self=get_self_scope_1.getSelfScope();var Number=self.Number;exports.Number=Number;// TODO: get rid of global polyfills and replace them with wrappers ("ponyfills")
Number.isFinite=Number.isFinite||function(value){return typeof value==='number'&&isFinite(value);};/***/},/***/"./src/remux/aac-helper.js":/*!*********************************!*\
  !*** ./src/remux/aac-helper.js ***!
  \*********************************//*! no static exports found *//*! ModuleConcatenation bailout: Module is not an ECMAScript module *//***/function srcRemuxAacHelperJs(module,exports,__webpack_require__){"use strict";/**
 *  AAC helper
 */Object.defineProperty(exports,"__esModule",{value:true});var AAC=/** @class */function(){function AAC(){}AAC.getSilentFrame=function(codec,channelCount){switch(codec){case'mp4a.40.2':if(channelCount===1){return new Uint8Array([0x00,0xc8,0x00,0x80,0x23,0x80]);}else if(channelCount===2){return new Uint8Array([0x21,0x00,0x49,0x90,0x02,0x19,0x00,0x23,0x80]);}else if(channelCount===3){return new Uint8Array([0x00,0xc8,0x00,0x80,0x20,0x84,0x01,0x26,0x40,0x08,0x64,0x00,0x8e]);}else if(channelCount===4){return new Uint8Array([0x00,0xc8,0x00,0x80,0x20,0x84,0x01,0x26,0x40,0x08,0x64,0x00,0x80,0x2c,0x80,0x08,0x02,0x38]);}else if(channelCount===5){return new Uint8Array([0x00,0xc8,0x00,0x80,0x20,0x84,0x01,0x26,0x40,0x08,0x64,0x00,0x82,0x30,0x04,0x99,0x00,0x21,0x90,0x02,0x38]);}else if(channelCount===6){return new Uint8Array([0x00,0xc8,0x00,0x80,0x20,0x84,0x01,0x26,0x40,0x08,0x64,0x00,0x82,0x30,0x04,0x99,0x00,0x21,0x90,0x02,0x00,0xb2,0x00,0x20,0x08,0xe0]);}break;// handle HE-AAC below (mp4a.40.5 / mp4a.40.29)
default:if(channelCount===1){// ffmpeg -y -f lavfi -i "aevalsrc=0:d=0.05" -c:a libfdk_aac -profile:a aac_he -b:a 4k output.aac && hexdump -v -e '16/1 "0x%x," "\n"' -v output.aac
return new Uint8Array([0x1,0x40,0x22,0x80,0xa3,0x4e,0xe6,0x80,0xba,0x8,0x0,0x0,0x0,0x1c,0x6,0xf1,0xc1,0xa,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5e]);}else if(channelCount===2){// ffmpeg -y -f lavfi -i "aevalsrc=0|0:d=0.05" -c:a libfdk_aac -profile:a aac_he_v2 -b:a 4k output.aac && hexdump -v -e '16/1 "0x%x," "\n"' -v output.aac
return new Uint8Array([0x1,0x40,0x22,0x80,0xa3,0x5e,0xe6,0x80,0xba,0x8,0x0,0x0,0x0,0x0,0x95,0x0,0x6,0xf1,0xa1,0xa,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5e]);}else if(channelCount===3){// ffmpeg -y -f lavfi -i "aevalsrc=0|0|0:d=0.05" -c:a libfdk_aac -profile:a aac_he_v2 -b:a 4k output.aac && hexdump -v -e '16/1 "0x%x," "\n"' -v output.aac
return new Uint8Array([0x1,0x40,0x22,0x80,0xa3,0x5e,0xe6,0x80,0xba,0x8,0x0,0x0,0x0,0x0,0x95,0x0,0x6,0xf1,0xa1,0xa,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5e]);}break;}return null;};return AAC;}();exports.default=AAC;/***/},/***/"./src/remux/mp4-generator.js":/*!************************************!*\
  !*** ./src/remux/mp4-generator.js ***!
  \************************************//*! no static exports found *//*! ModuleConcatenation bailout: Module is not an ECMAScript module *//***/function srcRemuxMp4GeneratorJs(module,exports,__webpack_require__){"use strict";/**
 * Generate MP4 Box
*/Object.defineProperty(exports,"__esModule",{value:true});var UINT32_MAX=Math.pow(2,32)-1;var MP4=/** @class */function(){function MP4(){}MP4.init=function(){MP4.types={avc1:[],avcC:[],btrt:[],dinf:[],dref:[],esds:[],ftyp:[],hdlr:[],mdat:[],mdhd:[],mdia:[],mfhd:[],minf:[],moof:[],moov:[],mp4a:[],'.mp3':[],mvex:[],mvhd:[],pasp:[],sdtp:[],stbl:[],stco:[],stsc:[],stsd:[],stsz:[],stts:[],tfdt:[],tfhd:[],traf:[],trak:[],trun:[],trex:[],tkhd:[],vmhd:[],smhd:[]};var i;for(i in MP4.types){if(MP4.types.hasOwnProperty(i)){MP4.types[i]=[i.charCodeAt(0),i.charCodeAt(1),i.charCodeAt(2),i.charCodeAt(3)];}}var videoHdlr=new Uint8Array([0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x76,0x69,0x64,0x65,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x56,0x69,0x64,0x65,0x6f,0x48,0x61,0x6e,0x64,0x6c,0x65,0x72,0x00// name: 'VideoHandler'
]);var audioHdlr=new Uint8Array([0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x73,0x6f,0x75,0x6e,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x53,0x6f,0x75,0x6e,0x64,0x48,0x61,0x6e,0x64,0x6c,0x65,0x72,0x00// name: 'SoundHandler'
]);MP4.HDLR_TYPES={'video':videoHdlr,'audio':audioHdlr};var dref=new Uint8Array([0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x0c,0x75,0x72,0x6c,0x20,0x00,0x00,0x00,0x01// entry_flags
]);var stco=new Uint8Array([0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00// entry_count
]);MP4.STTS=MP4.STSC=MP4.STCO=stco;MP4.STSZ=new Uint8Array([0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00// sample_count
]);MP4.VMHD=new Uint8Array([0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00// opcolor
]);MP4.SMHD=new Uint8Array([0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00// reserved
]);MP4.STSD=new Uint8Array([0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01]);// entry_count
var majorBrand=new Uint8Array([105,115,111,109]);// isom
var avc1Brand=new Uint8Array([97,118,99,49]);// avc1
var minorVersion=new Uint8Array([0,0,0,1]);MP4.FTYP=MP4.box(MP4.types.ftyp,majorBrand,minorVersion,majorBrand,avc1Brand);MP4.DINF=MP4.box(MP4.types.dinf,MP4.box(MP4.types.dref,dref));};MP4.box=function(type){var payload=Array.prototype.slice.call(arguments,1),size=8,i=payload.length,len=i,result;// calculate the total size we need to allocate
while(i--){size+=payload[i].byteLength;}result=new Uint8Array(size);result[0]=size>>24&0xff;result[1]=size>>16&0xff;result[2]=size>>8&0xff;result[3]=size&0xff;result.set(type,4);// copy the payload into the result
for(i=0,size=8;i<len;i++){// copy payload[i] array @ offset size
result.set(payload[i],size);size+=payload[i].byteLength;}return result;};MP4.hdlr=function(type){return MP4.box(MP4.types.hdlr,MP4.HDLR_TYPES[type]);};MP4.mdat=function(data){return MP4.box(MP4.types.mdat,data);};MP4.mdhd=function(timescale,duration){duration*=timescale;var upperWordDuration=Math.floor(duration/(UINT32_MAX+1));var lowerWordDuration=Math.floor(duration%(UINT32_MAX+1));return MP4.box(MP4.types.mdhd,new Uint8Array([0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,timescale>>24&0xFF,timescale>>16&0xFF,timescale>>8&0xFF,timescale&0xFF,upperWordDuration>>24,upperWordDuration>>16&0xFF,upperWordDuration>>8&0xFF,upperWordDuration&0xFF,lowerWordDuration>>24,lowerWordDuration>>16&0xFF,lowerWordDuration>>8&0xFF,lowerWordDuration&0xFF,0x55,0xc4,0x00,0x00]));};MP4.mdia=function(track){return MP4.box(MP4.types.mdia,MP4.mdhd(track.timescale,track.duration),MP4.hdlr(track.type),MP4.minf(track));};MP4.mfhd=function(sequenceNumber){return MP4.box(MP4.types.mfhd,new Uint8Array([0x00,0x00,0x00,0x00,sequenceNumber>>24,sequenceNumber>>16&0xFF,sequenceNumber>>8&0xFF,sequenceNumber&0xFF// sequence_number
]));};MP4.minf=function(track){if(track.type==='audio'){return MP4.box(MP4.types.minf,MP4.box(MP4.types.smhd,MP4.SMHD),MP4.DINF,MP4.stbl(track));}else{return MP4.box(MP4.types.minf,MP4.box(MP4.types.vmhd,MP4.VMHD),MP4.DINF,MP4.stbl(track));}};MP4.moof=function(sn,baseMediaDecodeTime,track){return MP4.box(MP4.types.moof,MP4.mfhd(sn),MP4.traf(track,baseMediaDecodeTime));};/**
   * @param tracks... (optional) {array} the tracks associated with this movie
   */MP4.moov=function(tracks){var i=tracks.length,boxes=[];while(i--){boxes[i]=MP4.trak(tracks[i]);}return MP4.box.apply(null,[MP4.types.moov,MP4.mvhd(tracks[0].timescale,tracks[0].duration)].concat(boxes).concat(MP4.mvex(tracks)));};MP4.mvex=function(tracks){var i=tracks.length,boxes=[];while(i--){boxes[i]=MP4.trex(tracks[i]);}return MP4.box.apply(null,[MP4.types.mvex].concat(boxes));};MP4.mvhd=function(timescale,duration){duration*=timescale;var upperWordDuration=Math.floor(duration/(UINT32_MAX+1));var lowerWordDuration=Math.floor(duration%(UINT32_MAX+1));var bytes=new Uint8Array([0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,timescale>>24&0xFF,timescale>>16&0xFF,timescale>>8&0xFF,timescale&0xFF,upperWordDuration>>24,upperWordDuration>>16&0xFF,upperWordDuration>>8&0xFF,upperWordDuration&0xFF,lowerWordDuration>>24,lowerWordDuration>>16&0xFF,lowerWordDuration>>8&0xFF,lowerWordDuration&0xFF,0x00,0x01,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff// next_track_ID
]);return MP4.box(MP4.types.mvhd,bytes);};MP4.sdtp=function(track){var samples=track.samples||[],bytes=new Uint8Array(4+samples.length),flags,i;// leave the full box header (4 bytes) all zero
// write the sample table
for(i=0;i<samples.length;i++){flags=samples[i].flags;bytes[i+4]=flags.dependsOn<<4|flags.isDependedOn<<2|flags.hasRedundancy;}return MP4.box(MP4.types.sdtp,bytes);};MP4.stbl=function(track){return MP4.box(MP4.types.stbl,MP4.stsd(track),MP4.box(MP4.types.stts,MP4.STTS),MP4.box(MP4.types.stsc,MP4.STSC),MP4.box(MP4.types.stsz,MP4.STSZ),MP4.box(MP4.types.stco,MP4.STCO));};MP4.avc1=function(track){var sps=[],pps=[],i,data,len;// assemble the SPSs
for(i=0;i<track.sps.length;i++){data=track.sps[i];len=data.byteLength;sps.push(len>>>8&0xFF);sps.push(len&0xFF);// SPS
sps=sps.concat(Array.prototype.slice.call(data));}// assemble the PPSs
for(i=0;i<track.pps.length;i++){data=track.pps[i];len=data.byteLength;pps.push(len>>>8&0xFF);pps.push(len&0xFF);pps=pps.concat(Array.prototype.slice.call(data));}var avcc=MP4.box(MP4.types.avcC,new Uint8Array([0x01,sps[3],sps[4],sps[5],0xfc|3,0xE0|track.sps.length// 3bit reserved (111) + numOfSequenceParameterSets
].concat(sps).concat([track.pps.length// numOfPictureParameterSets
]).concat(pps))),// "PPS"
width=track.width,height=track.height,hSpacing=track.pixelRatio[0],vSpacing=track.pixelRatio[1];return MP4.box(MP4.types.avc1,new Uint8Array([0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,width>>8&0xFF,width&0xff,height>>8&0xFF,height&0xff,0x00,0x48,0x00,0x00,0x00,0x48,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x12,0x64,0x61,0x69,0x6C,0x79,0x6D,0x6F,0x74,0x69,0x6F,0x6E,0x2F,0x68,0x6C,0x73,0x2E,0x6A,0x73,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x11,0x11]),// pre_defined = -1
avcc,MP4.box(MP4.types.btrt,new Uint8Array([0x00,0x1c,0x9c,0x80,0x00,0x2d,0xc6,0xc0,0x00,0x2d,0xc6,0xc0])),// avgBitrate
MP4.box(MP4.types.pasp,new Uint8Array([hSpacing>>24,hSpacing>>16&0xFF,hSpacing>>8&0xFF,hSpacing&0xFF,vSpacing>>24,vSpacing>>16&0xFF,vSpacing>>8&0xFF,vSpacing&0xFF])));};MP4.esds=function(track){var configlen=track.config.length;return new Uint8Array([0x00,0x00,0x00,0x00,0x03,0x17+configlen,0x00,0x01,0x00,0x04,0x0f+configlen,0x40,0x15,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05// descriptor_type
].concat([configlen]).concat(track.config).concat([0x06,0x01,0x02]));// GASpecificConfig)); // length + audio config descriptor
};MP4.mp4a=function(track){var samplerate=track.samplerate;return MP4.box(MP4.types.mp4a,new Uint8Array([0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,track.channelCount,0x00,0x10,0x00,0x00,0x00,0x00,samplerate>>8&0xFF,samplerate&0xff,0x00,0x00]),MP4.box(MP4.types.esds,MP4.esds(track)));};MP4.mp3=function(track){var samplerate=track.samplerate;return MP4.box(MP4.types['.mp3'],new Uint8Array([0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,track.channelCount,0x00,0x10,0x00,0x00,0x00,0x00,samplerate>>8&0xFF,samplerate&0xff,0x00,0x00]));};MP4.stsd=function(track){if(track.type==='audio'){if(!track.isAAC&&track.codec==='mp3'){return MP4.box(MP4.types.stsd,MP4.STSD,MP4.mp3(track));}return MP4.box(MP4.types.stsd,MP4.STSD,MP4.mp4a(track));}else{return MP4.box(MP4.types.stsd,MP4.STSD,MP4.avc1(track));}};MP4.tkhd=function(track){var id=track.id,duration=track.duration*track.timescale,width=track.width,height=track.height,upperWordDuration=Math.floor(duration/(UINT32_MAX+1)),lowerWordDuration=Math.floor(duration%(UINT32_MAX+1));return MP4.box(MP4.types.tkhd,new Uint8Array([0x01,0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,id>>24&0xFF,id>>16&0xFF,id>>8&0xFF,id&0xFF,0x00,0x00,0x00,0x00,upperWordDuration>>24,upperWordDuration>>16&0xFF,upperWordDuration>>8&0xFF,upperWordDuration&0xFF,lowerWordDuration>>24,lowerWordDuration>>16&0xFF,lowerWordDuration>>8&0xFF,lowerWordDuration&0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,width>>8&0xFF,width&0xFF,0x00,0x00,height>>8&0xFF,height&0xFF,0x00,0x00// height
]));};MP4.traf=function(track,baseMediaDecodeTime){var sampleDependencyTable=MP4.sdtp(track),id=track.id,upperWordBaseMediaDecodeTime=Math.floor(baseMediaDecodeTime/(UINT32_MAX+1)),lowerWordBaseMediaDecodeTime=Math.floor(baseMediaDecodeTime%(UINT32_MAX+1));return MP4.box(MP4.types.traf,MP4.box(MP4.types.tfhd,new Uint8Array([0x00,0x00,0x00,0x00,id>>24,id>>16&0XFF,id>>8&0XFF,id&0xFF])// track_ID
),MP4.box(MP4.types.tfdt,new Uint8Array([0x01,0x00,0x00,0x00,upperWordBaseMediaDecodeTime>>24,upperWordBaseMediaDecodeTime>>16&0XFF,upperWordBaseMediaDecodeTime>>8&0XFF,upperWordBaseMediaDecodeTime&0xFF,lowerWordBaseMediaDecodeTime>>24,lowerWordBaseMediaDecodeTime>>16&0XFF,lowerWordBaseMediaDecodeTime>>8&0XFF,lowerWordBaseMediaDecodeTime&0xFF])),MP4.trun(track,sampleDependencyTable.length+16+// tfhd
20+// tfdt
8+// traf header
16+// mfhd
8+// moof header
8),// mdat header
sampleDependencyTable);};/**
     * Generate a track box.
     * @param track {object} a track definition
     * @return {Uint8Array} the track box
     */MP4.trak=function(track){track.duration=track.duration||0xffffffff;return MP4.box(MP4.types.trak,MP4.tkhd(track),MP4.mdia(track));};MP4.trex=function(track){var id=track.id;return MP4.box(MP4.types.trex,new Uint8Array([0x00,0x00,0x00,0x00,id>>24,id>>16&0XFF,id>>8&0XFF,id&0xFF,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x01// default_sample_flags
]));};MP4.trun=function(track,offset){var samples=track.samples||[],len=samples.length,arraylen=12+16*len,array=new Uint8Array(arraylen),i,sample,duration,size,flags,cts;offset+=8+arraylen;array.set([0x00,0x00,0x0f,0x01,len>>>24&0xFF,len>>>16&0xFF,len>>>8&0xFF,len&0xFF,offset>>>24&0xFF,offset>>>16&0xFF,offset>>>8&0xFF,offset&0xFF// data_offset
],0);for(i=0;i<len;i++){sample=samples[i];duration=sample.duration;size=sample.size;flags=sample.flags;cts=sample.cts;array.set([duration>>>24&0xFF,duration>>>16&0xFF,duration>>>8&0xFF,duration&0xFF,size>>>24&0xFF,size>>>16&0xFF,size>>>8&0xFF,size&0xFF,flags.isLeading<<2|flags.dependsOn,flags.isDependedOn<<6|flags.hasRedundancy<<4|flags.paddingValue<<1|flags.isNonSync,flags.degradPrio&0xF0<<8,flags.degradPrio&0x0F,cts>>>24&0xFF,cts>>>16&0xFF,cts>>>8&0xFF,cts&0xFF// sample_composition_time_offset
],12+16*i);}return MP4.box(MP4.types.trun,array);};MP4.initSegment=function(tracks){if(!MP4.types){MP4.init();}var movie=MP4.moov(tracks),result;result=new Uint8Array(MP4.FTYP.byteLength+movie.byteLength);result.set(MP4.FTYP);result.set(movie,MP4.FTYP.byteLength);return result;};return MP4;}();exports.default=MP4;/***/},/***/"./src/remux/mp4-remuxer.js":/*!**********************************!*\
  !*** ./src/remux/mp4-remuxer.js ***!
  \**********************************//*! no static exports found *//*! ModuleConcatenation bailout: Module is not an ECMAScript module *//***/function srcRemuxMp4RemuxerJs(module,exports,__webpack_require__){"use strict";/**
 * fMP4 remuxer
*/Object.defineProperty(exports,"__esModule",{value:true});var aac_helper_1=__webpack_require__(/*! ./aac-helper */"./src/remux/aac-helper.js");var mp4_generator_1=__webpack_require__(/*! ./mp4-generator */"./src/remux/mp4-generator.js");var events_1=__webpack_require__(/*! ../events */"./src/events.js");var errors_1=__webpack_require__(/*! ../errors */"./src/errors.js");var logger_1=__webpack_require__(/*! ../utils/logger */"./src/utils/logger.js");// 10 seconds
var MAX_SILENT_FRAME_DURATION=10*1000;var MP4Remuxer=/** @class */function(){function MP4Remuxer(observer,config,typeSupported,vendor){this.observer=observer;this.config=config;this.typeSupported=typeSupported;var userAgent=navigator.userAgent;this.isSafari=vendor&&vendor.indexOf('Apple')>-1&&userAgent&&!userAgent.match('CriOS');this.ISGenerated=false;}MP4Remuxer.prototype.destroy=function(){};MP4Remuxer.prototype.resetTimeStamp=function(defaultTimeStamp){this._initPTS=this._initDTS=defaultTimeStamp;};MP4Remuxer.prototype.resetInitSegment=function(){this.ISGenerated=false;};MP4Remuxer.prototype.remux=function(audioTrack,videoTrack,id3Track,textTrack,timeOffset,contiguous,accurateTimeOffset){// generate Init Segment if needed
if(!this.ISGenerated){this.generateIS(audioTrack,videoTrack,timeOffset);}if(this.ISGenerated){var nbAudioSamples=audioTrack.samples.length;var nbVideoSamples=videoTrack.samples.length;var audioTimeOffset=timeOffset;var videoTimeOffset=timeOffset;if(nbAudioSamples&&nbVideoSamples){// timeOffset is expected to be the offset of the first timestamp of this fragment (first DTS)
// if first audio DTS is not aligned with first video DTS then we need to take that into account
// when providing timeOffset to remuxAudio / remuxVideo. if we don't do that, there might be a permanent / small
// drift between audio and video streams
var audiovideoDeltaDts=(audioTrack.samples[0].pts-videoTrack.samples[0].pts)/videoTrack.inputTimeScale;audioTimeOffset+=Math.max(0,audiovideoDeltaDts);videoTimeOffset+=Math.max(0,-audiovideoDeltaDts);}// Purposefully remuxing audio before video, so that remuxVideo can use nextAudioPts, which is
// calculated in remuxAudio.
// logger.log('nb AAC samples:' + audioTrack.samples.length);
if(nbAudioSamples){// if initSegment was generated without video samples, regenerate it again
if(!audioTrack.timescale){logger_1.logger.warn('regenerate InitSegment as audio detected');this.generateIS(audioTrack,videoTrack,timeOffset);}var audioData=this.remuxAudio(audioTrack,audioTimeOffset,contiguous,accurateTimeOffset);// logger.log('nb AVC samples:' + videoTrack.samples.length);
if(nbVideoSamples){var audioTrackLength=void 0;if(audioData){audioTrackLength=audioData.endPTS-audioData.startPTS;}// if initSegment was generated without video samples, regenerate it again
if(!videoTrack.timescale){logger_1.logger.warn('regenerate InitSegment as video detected');this.generateIS(audioTrack,videoTrack,timeOffset);}this.remuxVideo(videoTrack,videoTimeOffset,contiguous,audioTrackLength,accurateTimeOffset);}}else{// logger.log('nb AVC samples:' + videoTrack.samples.length);
if(nbVideoSamples){var videoData=this.remuxVideo(videoTrack,videoTimeOffset,contiguous,0,accurateTimeOffset);if(videoData&&audioTrack.codec){this.remuxEmptyAudio(audioTrack,audioTimeOffset,contiguous,videoData);}}}}// logger.log('nb ID3 samples:' + audioTrack.samples.length);
if(id3Track.samples.length){this.remuxID3(id3Track,timeOffset);}// logger.log('nb ID3 samples:' + audioTrack.samples.length);
if(textTrack.samples.length){this.remuxText(textTrack,timeOffset);}// notify end of parsing
this.observer.trigger(events_1.default.FRAG_PARSED);};MP4Remuxer.prototype.generateIS=function(audioTrack,videoTrack,timeOffset){var observer=this.observer,audioSamples=audioTrack.samples,videoSamples=videoTrack.samples,typeSupported=this.typeSupported,container='audio/mp4',tracks={},data={tracks:tracks},computePTSDTS=this._initPTS===undefined,initPTS,initDTS;if(computePTSDTS){initPTS=initDTS=Infinity;}if(audioTrack.config&&audioSamples.length){// let's use audio sampling rate as MP4 time scale.
// rationale is that there is a integer nb of audio frames per audio sample (1024 for AAC)
// using audio sampling rate here helps having an integer MP4 frame duration
// this avoids potential rounding issue and AV sync issue
audioTrack.timescale=audioTrack.samplerate;logger_1.logger.log("audio sampling rate : "+audioTrack.samplerate);if(!audioTrack.isAAC){if(typeSupported.mpeg){// Chrome and Safari
container='audio/mpeg';audioTrack.codec='';}else if(typeSupported.mp3){// Firefox
audioTrack.codec='mp3';}}tracks.audio={container:container,codec:audioTrack.codec,initSegment:!audioTrack.isAAC&&typeSupported.mpeg?new Uint8Array():mp4_generator_1.default.initSegment([audioTrack]),metadata:{channelCount:audioTrack.channelCount}};if(computePTSDTS){// remember first PTS of this demuxing context. for audio, PTS = DTS
initPTS=initDTS=audioSamples[0].pts-audioTrack.inputTimeScale*timeOffset;}}if(videoTrack.sps&&videoTrack.pps&&videoSamples.length){// let's use input time scale as MP4 video timescale
// we use input time scale straight away to avoid rounding issues on frame duration / cts computation
var inputTimeScale=videoTrack.inputTimeScale;videoTrack.timescale=inputTimeScale;tracks.video={container:'video/mp4',codec:videoTrack.codec,initSegment:mp4_generator_1.default.initSegment([videoTrack]),metadata:{width:videoTrack.width,height:videoTrack.height}};if(computePTSDTS){initPTS=Math.min(initPTS,videoSamples[0].pts-inputTimeScale*timeOffset);initDTS=Math.min(initDTS,videoSamples[0].dts-inputTimeScale*timeOffset);this.observer.trigger(events_1.default.INIT_PTS_FOUND,{initPTS:initPTS});}}if(Object.keys(tracks).length){observer.trigger(events_1.default.FRAG_PARSING_INIT_SEGMENT,data);this.ISGenerated=true;if(computePTSDTS){this._initPTS=initPTS;this._initDTS=initDTS;}}else{observer.trigger(events_1.default.ERROR,{type:errors_1.ErrorTypes.MEDIA_ERROR,details:errors_1.ErrorDetails.FRAG_PARSING_ERROR,fatal:false,reason:'no audio/video samples found'});}};MP4Remuxer.prototype.remuxVideo=function(track,timeOffset,contiguous,audioTrackLength,accurateTimeOffset){var offset=8;var mp4SampleDuration;var mdat;var moof;var firstPTS;var firstDTS;var lastPTS;var lastDTS;var timeScale=track.timescale;var inputSamples=track.samples;var outputSamples=[];var nbSamples=inputSamples.length;var ptsNormalize=this._PTSNormalize;var initPTS=this._initPTS;// if parsed fragment is contiguous with last one, let's use last DTS value as reference
var nextAvcDts=this.nextAvcDts;var isSafari=this.isSafari;if(nbSamples===0){return;}// Safari does not like overlapping DTS on consecutive fragments. let's use nextAvcDts to overcome this if fragments are consecutive
if(isSafari){// also consider consecutive fragments as being contiguous (even if a level switch occurs),
// for sake of clarity:
// consecutive fragments are frags with
//  - less than 100ms gaps between new time offset (if accurate) and next expected PTS OR
//  - less than 200 ms PTS gaps (timeScale/5)
contiguous|=inputSamples.length&&nextAvcDts&&(accurateTimeOffset&&Math.abs(timeOffset-nextAvcDts/timeScale)<0.1||Math.abs(inputSamples[0].pts-nextAvcDts-initPTS)<timeScale/5);}if(!contiguous){// if not contiguous, let's use target timeOffset
nextAvcDts=timeOffset*timeScale;}// PTS is coded on 33bits, and can loop from -2^32 to 2^32
// ptsNormalize will make PTS/DTS value monotonic, we use last known DTS value as reference value
inputSamples.forEach(function(sample){sample.pts=ptsNormalize(sample.pts-initPTS,nextAvcDts);sample.dts=ptsNormalize(sample.dts-initPTS,nextAvcDts);});// sort video samples by DTS then PTS then demux id order
inputSamples.sort(function(a,b){var deltadts=a.dts-b.dts;var deltapts=a.pts-b.pts;return deltadts||deltapts||a.id-b.id;});// handle broken streams with PTS < DTS, tolerance up 200ms (18000 in 90kHz timescale)
var PTSDTSshift=inputSamples.reduce(function(prev,curr){return Math.max(Math.min(prev,curr.pts-curr.dts),-18000);},0);if(PTSDTSshift<0){logger_1.logger.warn("PTS < DTS detected in video samples, shifting DTS by "+Math.round(PTSDTSshift/90)+" ms to overcome this issue");for(var i=0;i<inputSamples.length;i++){inputSamples[i].dts+=PTSDTSshift;}}// compute first DTS and last DTS, normalize them against reference value
var sample=inputSamples[0];firstDTS=Math.max(sample.dts,0);firstPTS=Math.max(sample.pts,0);// check timestamp continuity accross consecutive fragments (this is to remove inter-fragment gap/hole)
var delta=Math.round((firstDTS-nextAvcDts)/90);// if fragment are contiguous, detect hole/overlapping between fragments
if(contiguous){if(delta){if(delta>1){logger_1.logger.log("AVC:"+delta+" ms hole between fragments detected,filling it");}else if(delta<-1){logger_1.logger.log("AVC:"+-delta+" ms overlapping between fragments detected");}// remove hole/gap : set DTS to next expected DTS
firstDTS=nextAvcDts;inputSamples[0].dts=firstDTS;// offset PTS as well, ensure that PTS is smaller or equal than new DTS
firstPTS=Math.max(firstPTS-delta,nextAvcDts);inputSamples[0].pts=firstPTS;logger_1.logger.log("Video/PTS/DTS adjusted: "+Math.round(firstPTS/90)+"/"+Math.round(firstDTS/90)+",delta:"+delta+" ms");}}// compute lastPTS/lastDTS
sample=inputSamples[inputSamples.length-1];lastDTS=Math.max(sample.dts,0);lastPTS=Math.max(sample.pts,0,lastDTS);// on Safari let's signal the same sample duration for all samples
// sample duration (as expected by trun MP4 boxes), should be the delta between sample DTS
// set this constant duration as being the avg delta between consecutive DTS.
if(isSafari){mp4SampleDuration=Math.round((lastDTS-firstDTS)/(inputSamples.length-1));}var nbNalu=0,naluLen=0;for(var i=0;i<nbSamples;i++){// compute total/avc sample length and nb of NAL units
var sample_1=inputSamples[i],units=sample_1.units,nbUnits=units.length,sampleLen=0;for(var j=0;j<nbUnits;j++){sampleLen+=units[j].data.length;}naluLen+=sampleLen;nbNalu+=nbUnits;sample_1.length=sampleLen;// normalize PTS/DTS
if(isSafari){// sample DTS is computed using a constant decoding offset (mp4SampleDuration) between samples
sample_1.dts=firstDTS+i*mp4SampleDuration;}else{// ensure sample monotonic DTS
sample_1.dts=Math.max(sample_1.dts,firstDTS);}// ensure that computed value is greater or equal than sample DTS
sample_1.pts=Math.max(sample_1.pts,sample_1.dts);}/* concatenate the video data and construct the mdat in place
          (need 8 more bytes to fill length and mpdat type) */var mdatSize=naluLen+4*nbNalu+8;try{mdat=new Uint8Array(mdatSize);}catch(err){this.observer.trigger(events_1.default.ERROR,{type:errors_1.ErrorTypes.MUX_ERROR,details:errors_1.ErrorDetails.REMUX_ALLOC_ERROR,fatal:false,bytes:mdatSize,reason:"fail allocating video mdat "+mdatSize});return;}var view=new DataView(mdat.buffer);view.setUint32(0,mdatSize);mdat.set(mp4_generator_1.default.types.mdat,4);for(var i=0;i<nbSamples;i++){var avcSample=inputSamples[i],avcSampleUnits=avcSample.units,mp4SampleLength=0,compositionTimeOffset=void 0;// convert NALU bitstream to MP4 format (prepend NALU with size field)
for(var j=0,nbUnits=avcSampleUnits.length;j<nbUnits;j++){var unit=avcSampleUnits[j],unitData=unit.data,unitDataLen=unit.data.byteLength;view.setUint32(offset,unitDataLen);offset+=4;mdat.set(unitData,offset);offset+=unitDataLen;mp4SampleLength+=4+unitDataLen;}if(!isSafari){// expected sample duration is the Decoding Timestamp diff of consecutive samples
if(i<nbSamples-1){mp4SampleDuration=inputSamples[i+1].dts-avcSample.dts;}else{var config=this.config,lastFrameDuration=avcSample.dts-inputSamples[i>0?i-1:i].dts;if(config.stretchShortVideoTrack){// In some cases, a segment's audio track duration may exceed the video track duration.
// Since we've already remuxed audio, and we know how long the audio track is, we look to
// see if the delta to the next segment is longer than maxBufferHole.
// If so, playback would potentially get stuck, so we artificially inflate
// the duration of the last frame to minimize any potential gap between segments.
var maxBufferHole=config.maxBufferHole,gapTolerance=Math.floor(maxBufferHole*timeScale),deltaToFrameEnd=(audioTrackLength?firstPTS+audioTrackLength*timeScale:this.nextAudioPts)-avcSample.pts;if(deltaToFrameEnd>gapTolerance){// We subtract lastFrameDuration from deltaToFrameEnd to try to prevent any video
// frame overlap. maxBufferHole should be >> lastFrameDuration anyway.
mp4SampleDuration=deltaToFrameEnd-lastFrameDuration;if(mp4SampleDuration<0){mp4SampleDuration=lastFrameDuration;}logger_1.logger.log("It is approximately "+deltaToFrameEnd/90+" ms to the next segment; using duration "+mp4SampleDuration/90+" ms for the last video frame.");}else{mp4SampleDuration=lastFrameDuration;}}else{mp4SampleDuration=lastFrameDuration;}}compositionTimeOffset=Math.round(avcSample.pts-avcSample.dts);}else{compositionTimeOffset=Math.max(0,mp4SampleDuration*Math.round((avcSample.pts-avcSample.dts)/mp4SampleDuration));}// console.log('PTS/DTS/initDTS/normPTS/normDTS/relative PTS : ${avcSample.pts}/${avcSample.dts}/${initDTS}/${ptsnorm}/${dtsnorm}/${(avcSample.pts/4294967296).toFixed(3)}');
outputSamples.push({size:mp4SampleLength,// constant duration
duration:mp4SampleDuration,cts:compositionTimeOffset,flags:{isLeading:0,isDependedOn:0,hasRedundancy:0,degradPrio:0,dependsOn:avcSample.key?2:1,isNonSync:avcSample.key?0:1}});}// next AVC sample DTS should be equal to last sample DTS + last sample duration (in PES timescale)
this.nextAvcDts=lastDTS+mp4SampleDuration;var dropped=track.dropped;track.len=0;track.nbNalu=0;track.dropped=0;if(outputSamples.length&&navigator.userAgent.toLowerCase().indexOf('chrome')>-1){var flags=outputSamples[0].flags;// chrome workaround, mark first sample as being a Random Access Point to avoid sourcebuffer append issue
// https://code.google.com/p/chromium/issues/detail?id=229412
flags.dependsOn=2;flags.isNonSync=0;}track.samples=outputSamples;moof=mp4_generator_1.default.moof(track.sequenceNumber++,firstDTS,track);track.samples=[];var data={data1:moof,data2:mdat,startPTS:firstPTS/timeScale,endPTS:(lastPTS+mp4SampleDuration)/timeScale,startDTS:firstDTS/timeScale,endDTS:this.nextAvcDts/timeScale,type:'video',hasAudio:false,hasVideo:true,nb:outputSamples.length,dropped:dropped};this.observer.trigger(events_1.default.FRAG_PARSING_DATA,data);return data;};MP4Remuxer.prototype.remuxAudio=function(track,timeOffset,contiguous,accurateTimeOffset){var inputTimeScale=track.inputTimeScale;var mp4timeScale=track.timescale;var scaleFactor=inputTimeScale/mp4timeScale;var mp4SampleDuration=track.isAAC?1024:1152;var inputSampleDuration=mp4SampleDuration*scaleFactor;var ptsNormalize=this._PTSNormalize;var initPTS=this._initPTS;var rawMPEG=!track.isAAC&&this.typeSupported.mpeg;var offset,mp4Sample,fillFrame,mdat,moof,firstPTS,lastPTS,inputSamples=track.samples,outputSamples=[],nextAudioPts=this.nextAudioPts;// for audio samples, also consider consecutive fragments as being contiguous (even if a level switch occurs),
// for sake of clarity:
// consecutive fragments are frags with
//  - less than 100ms gaps between new time offset (if accurate) and next expected PTS OR
//  - less than 20 audio frames distance
// contiguous fragments are consecutive fragments from same quality level (same level, new SN = old SN + 1)
// this helps ensuring audio continuity
// and this also avoids audio glitches/cut when switching quality, or reporting wrong duration on first audio frame
contiguous|=inputSamples.length&&nextAudioPts&&(accurateTimeOffset&&Math.abs(timeOffset-nextAudioPts/inputTimeScale)<0.1||Math.abs(inputSamples[0].pts-nextAudioPts-initPTS)<20*inputSampleDuration);// compute normalized PTS
inputSamples.forEach(function(sample){sample.pts=sample.dts=ptsNormalize(sample.pts-initPTS,timeOffset*inputTimeScale);});// filter out sample with negative PTS that are not playable anyway
// if we don't remove these negative samples, they will shift all audio samples forward.
// leading to audio overlap between current / next fragment
inputSamples=inputSamples.filter(function(sample){return sample.pts>=0;});// in case all samples have negative PTS, and have been filtered out, return now
if(inputSamples.length===0){return;}if(!contiguous){if(!accurateTimeOffset){// if frag are mot contiguous and if we cant trust time offset, let's use first sample PTS as next audio PTS
nextAudioPts=inputSamples[0].pts;}else{// if timeOffset is accurate, let's use it as predicted next audio PTS
nextAudioPts=timeOffset*inputTimeScale;}}// If the audio track is missing samples, the frames seem to get "left-shifted" within the
// resulting mp4 segment, causing sync issues and leaving gaps at the end of the audio segment.
// In an effort to prevent this from happening, we inject frames here where there are gaps.
// When possible, we inject a silent frame; when that's not possible, we duplicate the last
// frame.
if(track.isAAC){var maxAudioFramesDrift=this.config.maxAudioFramesDrift;for(var i=0,nextPts=nextAudioPts;i<inputSamples.length;){// First, let's see how far off this frame is from where we expect it to be
var sample=inputSamples[i],delta;var pts=sample.pts;delta=pts-nextPts;var duration=Math.abs(1000*delta/inputTimeScale);// If we're overlapping by more than a duration, drop this sample
if(delta<=-maxAudioFramesDrift*inputSampleDuration){logger_1.logger.warn("Dropping 1 audio frame @ "+(nextPts/inputTimeScale).toFixed(3)+"s due to "+Math.round(duration)+" ms overlap.");inputSamples.splice(i,1);track.len-=sample.unit.length;// Don't touch nextPtsNorm or i
}// eslint-disable-line brace-style
// Insert missing frames if:
// 1: We're more than maxAudioFramesDrift frame away
// 2: Not more than MAX_SILENT_FRAME_DURATION away
// 3: currentTime (aka nextPtsNorm) is not 0
else if(delta>=maxAudioFramesDrift*inputSampleDuration&&duration<MAX_SILENT_FRAME_DURATION&&nextPts){var missing=Math.round(delta/inputSampleDuration);logger_1.logger.warn("Injecting "+missing+" audio frame @ "+(nextPts/inputTimeScale).toFixed(3)+"s due to "+Math.round(1000*delta/inputTimeScale)+" ms gap.");for(var j=0;j<missing;j++){var newStamp=Math.max(nextPts,0);fillFrame=aac_helper_1.default.getSilentFrame(track.manifestCodec||track.codec,track.channelCount);if(!fillFrame){logger_1.logger.log('Unable to get silent frame for given audio codec; duplicating last frame instead.');fillFrame=sample.unit.subarray();}inputSamples.splice(i,0,{unit:fillFrame,pts:newStamp,dts:newStamp});track.len+=fillFrame.length;nextPts+=inputSampleDuration;i++;}// Adjust sample to next expected pts
sample.pts=sample.dts=nextPts;nextPts+=inputSampleDuration;i++;}else{// Otherwise, just adjust pts
if(Math.abs(delta)>0.1*inputSampleDuration){// logger.log(`Invalid frame delta ${Math.round(delta + inputSampleDuration)} at PTS ${Math.round(pts / 90)} (should be ${Math.round(inputSampleDuration)}).`);
}sample.pts=sample.dts=nextPts;nextPts+=inputSampleDuration;i++;}}}for(var j=0,nbSamples_1=inputSamples.length;j<nbSamples_1;j++){var audioSample=inputSamples[j];var unit=audioSample.unit;var pts=audioSample.pts;// logger.log(`Audio/PTS:${Math.round(pts/90)}`);
// if not first sample
if(lastPTS!==undefined){mp4Sample.duration=Math.round((pts-lastPTS)/scaleFactor);}else{var delta_1=Math.round(1000*(pts-nextAudioPts)/inputTimeScale),numMissingFrames=0;// if fragment are contiguous, detect hole/overlapping between fragments
// contiguous fragments are consecutive fragments from same quality level (same level, new SN = old SN + 1)
if(contiguous&&track.isAAC){// log delta
if(delta_1){if(delta_1>0&&delta_1<MAX_SILENT_FRAME_DURATION){numMissingFrames=Math.round((pts-nextAudioPts)/inputSampleDuration);logger_1.logger.log(delta_1+" ms hole between AAC samples detected,filling it");if(numMissingFrames>0){fillFrame=aac_helper_1.default.getSilentFrame(track.manifestCodec||track.codec,track.channelCount);if(!fillFrame){fillFrame=unit.subarray();}track.len+=numMissingFrames*fillFrame.length;}// if we have frame overlap, overlapping for more than half a frame duraion
}else if(delta_1<-12){// drop overlapping audio frames... browser will deal with it
logger_1.logger.log("drop overlapping AAC sample, expected/parsed/delta:"+(nextAudioPts/inputTimeScale).toFixed(3)+"s/"+(pts/inputTimeScale).toFixed(3)+"s/"+-delta_1+"ms");track.len-=unit.byteLength;continue;}// set PTS/DTS to expected PTS/DTS
pts=nextAudioPts;}}// remember first PTS of our audioSamples
firstPTS=pts;if(track.len>0){/* concatenate the audio data and construct the mdat in place
                      (need 8 more bytes to fill length and mdat type) */var mdatSize=rawMPEG?track.len:track.len+8;offset=rawMPEG?0:8;try{mdat=new Uint8Array(mdatSize);}catch(err){this.observer.trigger(events_1.default.ERROR,{type:errors_1.ErrorTypes.MUX_ERROR,details:errors_1.ErrorDetails.REMUX_ALLOC_ERROR,fatal:false,bytes:mdatSize,reason:"fail allocating audio mdat "+mdatSize});return;}if(!rawMPEG){var view=new DataView(mdat.buffer);view.setUint32(0,mdatSize);mdat.set(mp4_generator_1.default.types.mdat,4);}}else{// no audio samples
return;}for(var i=0;i<numMissingFrames;i++){fillFrame=aac_helper_1.default.getSilentFrame(track.manifestCodec||track.codec,track.channelCount);if(!fillFrame){logger_1.logger.log('Unable to get silent frame for given audio codec; duplicating this frame instead.');fillFrame=unit.subarray();}mdat.set(fillFrame,offset);offset+=fillFrame.byteLength;mp4Sample={size:fillFrame.byteLength,cts:0,duration:1024,flags:{isLeading:0,isDependedOn:0,hasRedundancy:0,degradPrio:0,dependsOn:1}};outputSamples.push(mp4Sample);}}mdat.set(unit,offset);var unitLen=unit.byteLength;offset+=unitLen;// console.log('PTS/DTS/initDTS/normPTS/normDTS/relative PTS : ${audioSample.pts}/${audioSample.dts}/${initDTS}/${ptsnorm}/${dtsnorm}/${(audioSample.pts/4294967296).toFixed(3)}');
mp4Sample={size:unitLen,cts:0,duration:0,flags:{isLeading:0,isDependedOn:0,hasRedundancy:0,degradPrio:0,dependsOn:1}};outputSamples.push(mp4Sample);lastPTS=pts;}var lastSampleDuration=0;var nbSamples=outputSamples.length;// set last sample duration as being identical to previous sample
if(nbSamples>=2){lastSampleDuration=outputSamples[nbSamples-2].duration;mp4Sample.duration=lastSampleDuration;}if(nbSamples){// next audio sample PTS should be equal to last sample PTS + duration
this.nextAudioPts=nextAudioPts=lastPTS+scaleFactor*lastSampleDuration;// logger.log('Audio/PTS/PTSend:' + audioSample.pts.toFixed(0) + '/' + this.nextAacDts.toFixed(0));
track.len=0;track.samples=outputSamples;if(rawMPEG){moof=new Uint8Array();}else{moof=mp4_generator_1.default.moof(track.sequenceNumber++,firstPTS/scaleFactor,track);}track.samples=[];var start=firstPTS/inputTimeScale;var end=nextAudioPts/inputTimeScale;var audioData={data1:moof,data2:mdat,startPTS:start,endPTS:end,startDTS:start,endDTS:end,type:'audio',hasAudio:true,hasVideo:false,nb:nbSamples};this.observer.trigger(events_1.default.FRAG_PARSING_DATA,audioData);return audioData;}return null;};MP4Remuxer.prototype.remuxEmptyAudio=function(track,timeOffset,contiguous,videoData){var inputTimeScale=track.inputTimeScale,mp4timeScale=track.samplerate?track.samplerate:inputTimeScale,scaleFactor=inputTimeScale/mp4timeScale,nextAudioPts=this.nextAudioPts,// sync with video's timestamp
startDTS=(nextAudioPts!==undefined?nextAudioPts:videoData.startDTS*inputTimeScale)+this._initDTS,endDTS=videoData.endDTS*inputTimeScale+this._initDTS,// one sample's duration value
sampleDuration=1024,frameDuration=scaleFactor*sampleDuration,// samples count of this segment's duration
nbSamples=Math.ceil((endDTS-startDTS)/frameDuration),// silent frame
silentFrame=aac_helper_1.default.getSilentFrame(track.manifestCodec||track.codec,track.channelCount);logger_1.logger.warn('remux empty Audio');// Can't remux if we can't generate a silent frame...
if(!silentFrame){logger_1.logger.trace('Unable to remuxEmptyAudio since we were unable to get a silent frame for given audio codec!');return;}var samples=[];for(var i=0;i<nbSamples;i++){var stamp=startDTS+i*frameDuration;samples.push({unit:silentFrame,pts:stamp,dts:stamp});track.len+=silentFrame.length;}track.samples=samples;this.remuxAudio(track,timeOffset,contiguous);};MP4Remuxer.prototype.remuxID3=function(track){var length=track.samples.length,sample;var inputTimeScale=track.inputTimeScale;var initPTS=this._initPTS;var initDTS=this._initDTS;// consume samples
if(length){for(var index=0;index<length;index++){sample=track.samples[index];// setting id3 pts, dts to relative time
// using this._initPTS and this._initDTS to calculate relative time
sample.pts=(sample.pts-initPTS)/inputTimeScale;sample.dts=(sample.dts-initDTS)/inputTimeScale;}this.observer.trigger(events_1.default.FRAG_PARSING_METADATA,{samples:track.samples});}track.samples=[];};MP4Remuxer.prototype.remuxText=function(track){track.samples.sort(function(a,b){return a.pts-b.pts;});var length=track.samples.length,sample;var inputTimeScale=track.inputTimeScale;var initPTS=this._initPTS;// consume samples
if(length){for(var index=0;index<length;index++){sample=track.samples[index];// setting text pts, dts to relative time
// using this._initPTS and this._initDTS to calculate relative time
sample.pts=(sample.pts-initPTS)/inputTimeScale;}this.observer.trigger(events_1.default.FRAG_PARSING_USERDATA,{samples:track.samples});}track.samples=[];};MP4Remuxer.prototype._PTSNormalize=function(value,reference){var offset;if(reference===undefined){return value;}if(reference<value){// - 2^33
offset=-8589934592;}else{// + 2^33
offset=8589934592;}/* PTS is 33bit (from 0 to 2^33 -1)
          if diff between value and reference is bigger than half of the amplitude (2^32) then it means that
          PTS looping occured. fill the gap */while(Math.abs(value-reference)>4294967296){value+=offset;}return value;};return MP4Remuxer;}();exports.default=MP4Remuxer;/***/},/***/"./src/remux/passthrough-remuxer.js":/*!******************************************!*\
  !*** ./src/remux/passthrough-remuxer.js ***!
  \******************************************//*! no static exports found *//*! ModuleConcatenation bailout: Module is not an ECMAScript module *//***/function srcRemuxPassthroughRemuxerJs(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});/**
 * passthrough remuxer
*/var events_1=__webpack_require__(/*! ../events */"./src/events.js");var PassThroughRemuxer=/** @class */function(){function PassThroughRemuxer(observer){this.observer=observer;}PassThroughRemuxer.prototype.destroy=function(){};PassThroughRemuxer.prototype.resetTimeStamp=function(){};PassThroughRemuxer.prototype.resetInitSegment=function(){};PassThroughRemuxer.prototype.remux=function(audioTrack,videoTrack,id3Track,textTrack,timeOffset,contiguous,accurateTimeOffset,rawData){var observer=this.observer;var streamType='';if(audioTrack){streamType+='audio';}if(videoTrack){streamType+='video';}observer.trigger(events_1.default.FRAG_PARSING_DATA,{data1:rawData,startPTS:timeOffset,startDTS:timeOffset,type:streamType,hasAudio:!!audioTrack,hasVideo:!!videoTrack,nb:1,dropped:0});// notify end of parsing
observer.trigger(events_1.default.FRAG_PARSED);};return PassThroughRemuxer;}();exports.default=PassThroughRemuxer;/***/},/***/"./src/task-loop.js":/*!**************************!*\
  !*** ./src/task-loop.js ***!
  \**************************//*! no static exports found *//*! ModuleConcatenation bailout: Module is not an ECMAScript module *//***/function srcTaskLoopJs(module,exports,__webpack_require__){"use strict";var __extends=this&&this.__extends||function(){var extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;}||function(d,b){for(var p in b){if(b.hasOwnProperty(p))d[p]=b[p];}};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};}();Object.defineProperty(exports,"__esModule",{value:true});var event_handler_1=__webpack_require__(/*! ./event-handler */"./src/event-handler.js");/**
 * Sub-class specialization of EventHandler base class.
 *
 * TaskLoop allows to schedule a task function being called (optionnaly repeatedly) on the main loop,
 * scheduled asynchroneously, avoiding recursive calls in the same tick.
 *
 * The task itself is implemented in `doTick`. It can be requested and called for single execution
 * using the `tick` method.
 *
 * It will be assured that the task execution method (`tick`) only gets called once per main loop "tick",
 * no matter how often it gets requested for execution. Execution in further ticks will be scheduled accordingly.
 *
 * If further execution requests have already been scheduled on the next tick, it can be checked with `hasNextTick`,
 * and cancelled with `clearNextTick`.
 *
 * The task can be scheduled as an interval repeatedly with a period as parameter (see `setInterval`, `clearInterval`).
 *
 * Sub-classes need to implement the `doTick` method which will effectively have the task execution routine.
 *
 * Further explanations:
 *
 * The baseclass has a `tick` method that will schedule the doTick call. It may be called synchroneously
 * only for a stack-depth of one. On re-entrant calls, sub-sequent calls are scheduled for next main loop ticks.
 *
 * When the task execution (`tick` method) is called in re-entrant way this is detected and
 * we are limiting the task execution per call stack to exactly one, but scheduling/post-poning further
 * task processing on the next main loop iteration (also known as "next tick" in the Node/JS runtime lingo).
 */var TaskLoop=/** @class */function(_super){__extends(TaskLoop,_super);function TaskLoop(hls){var events=[];for(var _i=1;_i<arguments.length;_i++){events[_i-1]=arguments[_i];}var _this=_super.apply(this,[hls].concat(events))||this;_this._tickInterval=null;_this._tickTimer=null;_this._tickCallCount=0;_this._boundTick=_this.tick.bind(_this);return _this;}/**
     * @override
     */TaskLoop.prototype.onHandlerDestroying=function(){// clear all timers before unregistering from event bus
this.clearNextTick();this.clearInterval();};/**
     * @returns {boolean}
     */TaskLoop.prototype.hasInterval=function(){return!!this._tickInterval;};/**
     * @returns {boolean}
     */TaskLoop.prototype.hasNextTick=function(){return!!this._tickTimer;};/**
     * @param {number} millis Interval time (ms)
     * @returns {boolean} True when interval has been scheduled, false when already scheduled (no effect)
     */TaskLoop.prototype.setInterval=function(millis){if(!this._tickInterval){this._tickInterval=setInterval(this._boundTick,millis);return true;}return false;};/**
     * @returns {boolean} True when interval was cleared, false when none was set (no effect)
     */TaskLoop.prototype.clearInterval=function(){if(this._tickInterval){clearInterval(this._tickInterval);this._tickInterval=null;return true;}return false;};/**
     * @returns {boolean} True when timeout was cleared, false when none was set (no effect)
     */TaskLoop.prototype.clearNextTick=function(){if(this._tickTimer){clearTimeout(this._tickTimer);this._tickTimer=null;return true;}return false;};/**
     * Will call the subclass doTick implementation in this main loop tick
     * or in the next one (via setTimeout(,0)) in case it has already been called
     * in this tick (in case this is a re-entrant call).
     */TaskLoop.prototype.tick=function(){this._tickCallCount++;if(this._tickCallCount===1){this.doTick();// re-entrant call to tick from previous doTick call stack
// -> schedule a call on the next main loop iteration to process this task processing request
if(this._tickCallCount>1){// make sure only one timer exists at any time at max
this.clearNextTick();this._tickTimer=setTimeout(this._boundTick,0);}this._tickCallCount=0;}};/**
     * For subclass to implement task logic
     * @abstract
     */TaskLoop.prototype.doTick=function(){};return TaskLoop;}(event_handler_1.default);exports.default=TaskLoop;/***/},/***/"./src/utils/attr-list.js":/*!********************************!*\
  !*** ./src/utils/attr-list.js ***!
  \********************************//*! no static exports found *//*! ModuleConcatenation bailout: Module is not an ECMAScript module *//***/function srcUtilsAttrListJs(module,exports,__webpack_require__){"use strict";/* WEBPACK VAR INJECTION */(function(Number){Object.defineProperty(exports,"__esModule",{value:true});var DECIMAL_RESOLUTION_REGEX=/^(\d+)x(\d+)$/;// eslint-disable-line no-useless-escape
var ATTR_LIST_REGEX=/\s*(.+?)\s*=((?:\".*?\")|.*?)(?:,|$)/g;// eslint-disable-line no-useless-escape
// adapted from https://github.com/kanongil/node-m3u8parse/blob/master/attrlist.js
var AttrList=/** @class */function(){function AttrList(attrs){if(typeof attrs==='string'){attrs=AttrList.parseAttrList(attrs);}for(var attr in attrs){if(attrs.hasOwnProperty(attr)){this[attr]=attrs[attr];}}}AttrList.prototype.decimalInteger=function(attrName){var intValue=parseInt(this[attrName],10);if(intValue>Number.MAX_SAFE_INTEGER){return Infinity;}return intValue;};AttrList.prototype.hexadecimalInteger=function(attrName){if(this[attrName]){var stringValue=(this[attrName]||'0x').slice(2);stringValue=(stringValue.length&1?'0':'')+stringValue;var value=new Uint8Array(stringValue.length/2);for(var i=0;i<stringValue.length/2;i++){value[i]=parseInt(stringValue.slice(i*2,i*2+2),16);}return value;}else{return null;}};AttrList.prototype.hexadecimalIntegerAsNumber=function(attrName){var intValue=parseInt(this[attrName],16);if(intValue>Number.MAX_SAFE_INTEGER){return Infinity;}return intValue;};AttrList.prototype.decimalFloatingPoint=function(attrName){return parseFloat(this[attrName]);};AttrList.prototype.enumeratedString=function(attrName){return this[attrName];};AttrList.prototype.decimalResolution=function(attrName){var res=DECIMAL_RESOLUTION_REGEX.exec(this[attrName]);if(res===null){return undefined;}return{width:parseInt(res[1],10),height:parseInt(res[2],10)};};AttrList.parseAttrList=function(input){var match,attrs={};ATTR_LIST_REGEX.lastIndex=0;while((match=ATTR_LIST_REGEX.exec(input))!==null){var value=match[2],quote='"';if(value.indexOf(quote)===0&&value.lastIndexOf(quote)===value.length-1){value=value.slice(1,-1);}attrs[match[1]]=value;}return attrs;};return AttrList;}();exports.default=AttrList;/* WEBPACK VAR INJECTION */}).call(this,__webpack_require__(/*! ./src/polyfills/number */"./src/polyfills/number.js")["Number"]);/***/},/***/"./src/utils/binary-search.js":/*!************************************!*\
  !*** ./src/utils/binary-search.js ***!
  \************************************//*! no static exports found *//*! ModuleConcatenation bailout: Module is not an ECMAScript module *//***/function srcUtilsBinarySearchJs(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var BinarySearch={/**
       * Searches for an item in an array which matches a certain condition.
       * This requires the condition to only match one item in the array,
       * and for the array to be ordered.
       *
       * @param {Array} list The array to search.
       * @param {Function} comparisonFunction
       *      Called and provided a candidate item as the first argument.
       *      Should return:
       *          > -1 if the item should be located at a lower index than the provided item.
       *          > 1 if the item should be located at a higher index than the provided item.
       *          > 0 if the item is the item you're looking for.
       *
       * @return {*} The object if it is found or null otherwise.
       */search:function search(list,comparisonFunction){var minIndex=0;var maxIndex=list.length-1;var currentIndex=null;var currentElement=null;while(minIndex<=maxIndex){currentIndex=(minIndex+maxIndex)/2|0;currentElement=list[currentIndex];var comparisonResult=comparisonFunction(currentElement);if(comparisonResult>0){minIndex=currentIndex+1;}else if(comparisonResult<0){maxIndex=currentIndex-1;}else{return currentElement;}}return null;}};exports.default=BinarySearch;/***/},/***/"./src/utils/buffer-helper.js":/*!************************************!*\
  !*** ./src/utils/buffer-helper.js ***!
  \************************************//*! no static exports found *//*! ModuleConcatenation bailout: Module is not an ECMAScript module *//***/function srcUtilsBufferHelperJs(module,exports,__webpack_require__){"use strict";/**
 * @module BufferHelper
 *
 * Providing methods dealing with buffer length retrieval for example.
 *
 * In general, a helper around HTML5 MediaElement TimeRanges gathered from `buffered` property.
 *
 * Also @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/buffered
*/Object.defineProperty(exports,"__esModule",{value:true});var BufferHelper=/** @class */function(){function BufferHelper(){}/**
     * Return true if `media`'s buffered include `position`
     * @param {HTMLMediaElement|SourceBuffer} media
     * @param {number} position
     * @returns {boolean}
     */BufferHelper.isBuffered=function(media,position){try{if(media){var buffered=media.buffered;for(var i=0;i<buffered.length;i++){if(position>=buffered.start(i)&&position<=buffered.end(i)){return true;}}}}catch(error){// this is to catch
// InvalidStateError: Failed to read the 'buffered' property from 'SourceBuffer':
// This SourceBuffer has been removed from the parent media source
}return false;};BufferHelper.bufferInfo=function(media,pos,maxHoleDuration){try{if(media){var vbuffered=media.buffered,buffered=[],i=void 0;for(i=0;i<vbuffered.length;i++){buffered.push({start:vbuffered.start(i),end:vbuffered.end(i)});}return this.bufferedInfo(buffered,pos,maxHoleDuration);}}catch(error){// this is to catch
// InvalidStateError: Failed to read the 'buffered' property from 'SourceBuffer':
// This SourceBuffer has been removed from the parent media source
}return{len:0,start:pos,end:pos,nextStart:undefined};};BufferHelper.bufferedInfo=function(buffered,pos,maxHoleDuration){var buffered2=[],// bufferStart and bufferEnd are buffer boundaries around current video position
bufferLen,bufferStart,bufferEnd,bufferStartNext,i;// sort on buffer.start/smaller end (IE does not always return sorted buffered range)
buffered.sort(function(a,b){var diff=a.start-b.start;if(diff){return diff;}else{return b.end-a.end;}});// there might be some small holes between buffer time range
// consider that holes smaller than maxHoleDuration are irrelevant and build another
// buffer time range representations that discards those holes
for(i=0;i<buffered.length;i++){var buf2len=buffered2.length;if(buf2len){var buf2end=buffered2[buf2len-1].end;// if small hole (value between 0 or maxHoleDuration ) or overlapping (negative)
if(buffered[i].start-buf2end<maxHoleDuration){// merge overlapping time ranges
// update lastRange.end only if smaller than item.end
// e.g.  [ 1, 15] with  [ 2,8] => [ 1,15] (no need to modify lastRange.end)
// whereas [ 1, 8] with  [ 2,15] => [ 1,15] ( lastRange should switch from [1,8] to [1,15])
if(buffered[i].end>buf2end){buffered2[buf2len-1].end=buffered[i].end;}}else{// big hole
buffered2.push(buffered[i]);}}else{// first value
buffered2.push(buffered[i]);}}for(i=0,bufferLen=0,bufferStart=bufferEnd=pos;i<buffered2.length;i++){var start=buffered2[i].start,end=buffered2[i].end;// logger.log('buf start/end:' + buffered.start(i) + '/' + buffered.end(i));
if(pos+maxHoleDuration>=start&&pos<end){// play position is inside this buffer TimeRange, retrieve end of buffer position and buffer length
bufferStart=start;bufferEnd=end;bufferLen=bufferEnd-pos;}else if(pos+maxHoleDuration<start){bufferStartNext=start;break;}}return{len:bufferLen,start:bufferStart,end:bufferEnd,nextStart:bufferStartNext};};return BufferHelper;}();exports.BufferHelper=BufferHelper;/***/},/***/"./src/utils/cea-608-parser.js":/*!*************************************!*\
  !*** ./src/utils/cea-608-parser.js ***!
  \*************************************//*! no static exports found *//*! ModuleConcatenation bailout: Module is not an ECMAScript module *//***/function srcUtilsCea608ParserJs(module,exports,__webpack_require__){"use strict";/**
 *
 * This code was ported from the dash.js project at:
 *   https://github.com/Dash-Industry-Forum/dash.js/blob/development/externals/cea608-parser.js
 *   https://github.com/Dash-Industry-Forum/dash.js/commit/8269b26a761e0853bb21d78780ed945144ecdd4d#diff-71bc295a2d6b6b7093a1d3290d53a4b2
 *
 * The original copyright appears below:
 *
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2015-2016, DASH Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  1. Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  2. Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 *//**
     *  Exceptions from regular ASCII. CodePoints are mapped to UTF-16 codes
     */Object.defineProperty(exports,"__esModule",{value:true});var specialCea608CharsCodes={0x2a:0xe1,0x5c:0xe9,0x5e:0xed,0x5f:0xf3,0x60:0xfa,0x7b:0xe7,0x7c:0xf7,0x7d:0xd1,0x7e:0xf1,0x7f:0x2588,// THIS BLOCK INCLUDES THE 16 EXTENDED (TWO-BYTE) LINE 21 CHARACTERS
// THAT COME FROM HI BYTE=0x11 AND LOW BETWEEN 0x30 AND 0x3F
// THIS MEANS THAT \x50 MUST BE ADDED TO THE VALUES
0x80:0xae,0x81:0xb0,0x82:0xbd,0x83:0xbf,0x84:0x2122,0x85:0xa2,0x86:0xa3,0x87:0x266a,0x88:0xe0,0x89:0x20,0x8a:0xe8,0x8b:0xe2,0x8c:0xea,0x8d:0xee,0x8e:0xf4,0x8f:0xfb,// THIS BLOCK INCLUDES THE 32 EXTENDED (TWO-BYTE) LINE 21 CHARACTERS
// THAT COME FROM HI BYTE=0x12 AND LOW BETWEEN 0x20 AND 0x3F
0x90:0xc1,0x91:0xc9,0x92:0xd3,0x93:0xda,0x94:0xdc,0x95:0xfc,0x96:0x2018,0x97:0xa1,0x98:0x2a,0x99:0x2019,0x9a:0x2501,0x9b:0xa9,0x9c:0x2120,0x9d:0x2022,0x9e:0x201c,0x9f:0x201d,0xa0:0xc0,0xa1:0xc2,0xa2:0xc7,0xa3:0xc8,0xa4:0xca,0xa5:0xcb,0xa6:0xeb,0xa7:0xce,0xa8:0xcf,0xa9:0xef,0xaa:0xd4,0xab:0xd9,0xac:0xf9,0xad:0xdb,0xae:0xab,0xaf:0xbb,// THIS BLOCK INCLUDES THE 32 EXTENDED (TWO-BYTE) LINE 21 CHARACTERS
// THAT COME FROM HI BYTE=0x13 AND LOW BETWEEN 0x20 AND 0x3F
0xb0:0xc3,0xb1:0xe3,0xb2:0xcd,0xb3:0xcc,0xb4:0xec,0xb5:0xd2,0xb6:0xf2,0xb7:0xd5,0xb8:0xf5,0xb9:0x7b,0xba:0x7d,0xbb:0x5c,0xbc:0x5e,0xbd:0x5f,0xbe:0x7c,0xbf:0x223c,0xc0:0xc4,0xc1:0xe4,0xc2:0xd6,0xc3:0xf6,0xc4:0xdf,0xc5:0xa5,0xc6:0xa4,0xc7:0x2503,0xc8:0xc5,0xc9:0xe5,0xca:0xd8,0xcb:0xf8,0xcc:0x250f,0xcd:0x2513,0xce:0x2517,0xcf:0x251b// Box drawings heavy up and left
};/**
 * Utils
 */var getCharForByte=function getCharForByte(byte){var charCode=byte;if(specialCea608CharsCodes.hasOwnProperty(byte)){charCode=specialCea608CharsCodes[byte];}return String.fromCharCode(charCode);};var NR_ROWS=15,NR_COLS=100;// Tables to look up row from PAC data
var rowsLowCh1={0x11:1,0x12:3,0x15:5,0x16:7,0x17:9,0x10:11,0x13:12,0x14:14};var rowsHighCh1={0x11:2,0x12:4,0x15:6,0x16:8,0x17:10,0x13:13,0x14:15};var rowsLowCh2={0x19:1,0x1A:3,0x1D:5,0x1E:7,0x1F:9,0x18:11,0x1B:12,0x1C:14};var rowsHighCh2={0x19:2,0x1A:4,0x1D:6,0x1E:8,0x1F:10,0x1B:13,0x1C:15};var backgroundColors=['white','green','blue','cyan','red','yellow','magenta','black','transparent'];/**
 * Simple logger class to be able to write with time-stamps and filter on level.
 */var logger={verboseFilter:{'DATA':3,'DEBUG':3,'INFO':2,'WARNING':2,'TEXT':1,'ERROR':0},time:null,verboseLevel:0,setTime:function setTime(newTime){this.time=newTime;},log:function log(severity,msg){var minLevel=this.verboseFilter[severity];if(this.verboseLevel>=minLevel){// console.log(this.time + ' [' + severity + '] ' + msg);
}}};var numArrayToHexArray=function numArrayToHexArray(numArray){var hexArray=[];for(var j=0;j<numArray.length;j++){hexArray.push(numArray[j].toString(16));}return hexArray;};var PenState=/** @class */function(){function PenState(foreground,underline,italics,background,flash){this.foreground=foreground||'white';this.underline=underline||false;this.italics=italics||false;this.background=background||'black';this.flash=flash||false;}PenState.prototype.reset=function(){this.foreground='white';this.underline=false;this.italics=false;this.background='black';this.flash=false;};PenState.prototype.setStyles=function(styles){var attribs=['foreground','underline','italics','background','flash'];for(var i=0;i<attribs.length;i++){var style=attribs[i];if(styles.hasOwnProperty(style)){this[style]=styles[style];}}};PenState.prototype.isDefault=function(){return this.foreground==='white'&&!this.underline&&!this.italics&&this.background==='black'&&!this.flash;};PenState.prototype.equals=function(other){return this.foreground===other.foreground&&this.underline===other.underline&&this.italics===other.italics&&this.background===other.background&&this.flash===other.flash;};PenState.prototype.copy=function(newPenState){this.foreground=newPenState.foreground;this.underline=newPenState.underline;this.italics=newPenState.italics;this.background=newPenState.background;this.flash=newPenState.flash;};PenState.prototype.toString=function(){return'color='+this.foreground+', underline='+this.underline+', italics='+this.italics+', background='+this.background+', flash='+this.flash;};return PenState;}();/**
 * Unicode character with styling and background.
 * @constructor
 */var StyledUnicodeChar=/** @class */function(){function StyledUnicodeChar(uchar,foreground,underline,italics,background,flash){this.uchar=uchar||' ';// unicode character
this.penState=new PenState(foreground,underline,italics,background,flash);}StyledUnicodeChar.prototype.reset=function(){this.uchar=' ';this.penState.reset();};StyledUnicodeChar.prototype.setChar=function(uchar,newPenState){this.uchar=uchar;this.penState.copy(newPenState);};StyledUnicodeChar.prototype.setPenState=function(newPenState){this.penState.copy(newPenState);};StyledUnicodeChar.prototype.equals=function(other){return this.uchar===other.uchar&&this.penState.equals(other.penState);};StyledUnicodeChar.prototype.copy=function(newChar){this.uchar=newChar.uchar;this.penState.copy(newChar.penState);};StyledUnicodeChar.prototype.isEmpty=function(){return this.uchar===' '&&this.penState.isDefault();};return StyledUnicodeChar;}();/**
 * CEA-608 row consisting of NR_COLS instances of StyledUnicodeChar.
 * @constructor
 */var Row=/** @class */function(){function Row(){this.chars=[];for(var i=0;i<NR_COLS;i++){this.chars.push(new StyledUnicodeChar());}this.pos=0;this.currPenState=new PenState();}Row.prototype.equals=function(other){var equal=true;for(var i=0;i<NR_COLS;i++){if(!this.chars[i].equals(other.chars[i])){equal=false;break;}}return equal;};Row.prototype.copy=function(other){for(var i=0;i<NR_COLS;i++){this.chars[i].copy(other.chars[i]);}};Row.prototype.isEmpty=function(){var empty=true;for(var i=0;i<NR_COLS;i++){if(!this.chars[i].isEmpty()){empty=false;break;}}return empty;};/**
       *  Set the cursor to a valid column.
       */Row.prototype.setCursor=function(absPos){if(this.pos!==absPos){this.pos=absPos;}if(this.pos<0){logger.log('ERROR','Negative cursor position '+this.pos);this.pos=0;}else if(this.pos>NR_COLS){logger.log('ERROR','Too large cursor position '+this.pos);this.pos=NR_COLS;}};/**
       * Move the cursor relative to current position.
       */Row.prototype.moveCursor=function(relPos){var newPos=this.pos+relPos;if(relPos>1){for(var i=this.pos+1;i<newPos+1;i++){this.chars[i].setPenState(this.currPenState);}}this.setCursor(newPos);};/**
       * Backspace, move one step back and clear character.
       */Row.prototype.backSpace=function(){this.moveCursor(-1);this.chars[this.pos].setChar(' ',this.currPenState);};Row.prototype.insertChar=function(byte){if(byte>=0x90){// Extended char
this.backSpace();}var char=getCharForByte(byte);if(this.pos>=NR_COLS){logger.log('ERROR','Cannot insert '+byte.toString(16)+' ('+char+') at position '+this.pos+'. Skipping it!');return;}this.chars[this.pos].setChar(char,this.currPenState);this.moveCursor(1);};Row.prototype.clearFromPos=function(startPos){var i;for(i=startPos;i<NR_COLS;i++){this.chars[i].reset();}};Row.prototype.clear=function(){this.clearFromPos(0);this.pos=0;this.currPenState.reset();};Row.prototype.clearToEndOfRow=function(){this.clearFromPos(this.pos);};Row.prototype.getTextString=function(){var chars=[];var empty=true;for(var i=0;i<NR_COLS;i++){var char=this.chars[i].uchar;if(char!==' '){empty=false;}chars.push(char);}if(empty){return'';}else{return chars.join('');}};Row.prototype.setPenStyles=function(styles){this.currPenState.setStyles(styles);var currChar=this.chars[this.pos];currChar.setPenState(this.currPenState);};return Row;}();/**
 * Keep a CEA-608 screen of 32x15 styled characters
 * @constructor
*/var CaptionScreen=/** @class */function(){function CaptionScreen(){this.rows=[];for(var i=0;i<NR_ROWS;i++){this.rows.push(new Row());}// Note that we use zero-based numbering (0-14)
this.currRow=NR_ROWS-1;this.nrRollUpRows=null;this.reset();}CaptionScreen.prototype.reset=function(){for(var i=0;i<NR_ROWS;i++){this.rows[i].clear();}this.currRow=NR_ROWS-1;};CaptionScreen.prototype.equals=function(other){var equal=true;for(var i=0;i<NR_ROWS;i++){if(!this.rows[i].equals(other.rows[i])){equal=false;break;}}return equal;};CaptionScreen.prototype.copy=function(other){for(var i=0;i<NR_ROWS;i++){this.rows[i].copy(other.rows[i]);}};CaptionScreen.prototype.isEmpty=function(){var empty=true;for(var i=0;i<NR_ROWS;i++){if(!this.rows[i].isEmpty()){empty=false;break;}}return empty;};CaptionScreen.prototype.backSpace=function(){var row=this.rows[this.currRow];row.backSpace();};CaptionScreen.prototype.clearToEndOfRow=function(){var row=this.rows[this.currRow];row.clearToEndOfRow();};/**
       * Insert a character (without styling) in the current row.
       */CaptionScreen.prototype.insertChar=function(char){var row=this.rows[this.currRow];row.insertChar(char);};CaptionScreen.prototype.setPen=function(styles){var row=this.rows[this.currRow];row.setPenStyles(styles);};CaptionScreen.prototype.moveCursor=function(relPos){var row=this.rows[this.currRow];row.moveCursor(relPos);};CaptionScreen.prototype.setCursor=function(absPos){logger.log('INFO','setCursor: '+absPos);var row=this.rows[this.currRow];row.setCursor(absPos);};CaptionScreen.prototype.setPAC=function(pacData){logger.log('INFO','pacData = '+JSON.stringify(pacData));var newRow=pacData.row-1;if(this.nrRollUpRows&&newRow<this.nrRollUpRows-1){newRow=this.nrRollUpRows-1;}// Make sure this only affects Roll-up Captions by checking this.nrRollUpRows
if(this.nrRollUpRows&&this.currRow!==newRow){// clear all rows first
for(var i=0;i<NR_ROWS;i++){this.rows[i].clear();}// Copy this.nrRollUpRows rows from lastOutputScreen and place it in the newRow location
// topRowIndex - the start of rows to copy (inclusive index)
var topRowIndex=this.currRow+1-this.nrRollUpRows;// We only copy if the last position was already shown.
// We use the cueStartTime value to check this.
var lastOutputScreen=this.lastOutputScreen;if(lastOutputScreen){var prevLineTime=lastOutputScreen.rows[topRowIndex].cueStartTime;if(prevLineTime&&prevLineTime<logger.time){for(var i=0;i<this.nrRollUpRows;i++){this.rows[newRow-this.nrRollUpRows+i+1].copy(lastOutputScreen.rows[topRowIndex+i]);}}}}this.currRow=newRow;var row=this.rows[this.currRow];if(pacData.indent!==null){var indent=pacData.indent;var prevPos=Math.max(indent-1,0);row.setCursor(pacData.indent);pacData.color=row.chars[prevPos].penState.foreground;}var styles={foreground:pacData.color,underline:pacData.underline,italics:pacData.italics,background:'black',flash:false};this.setPen(styles);};/**
       * Set background/extra foreground, but first do back_space, and then insert space (backwards compatibility).
       */CaptionScreen.prototype.setBkgData=function(bkgData){logger.log('INFO','bkgData = '+JSON.stringify(bkgData));this.backSpace();this.setPen(bkgData);this.insertChar(0x20);// Space
};CaptionScreen.prototype.setRollUpRows=function(nrRows){this.nrRollUpRows=nrRows;};CaptionScreen.prototype.rollUp=function(){if(this.nrRollUpRows===null){logger.log('DEBUG','roll_up but nrRollUpRows not set yet');return;// Not properly setup
}logger.log('TEXT',this.getDisplayText());var topRowIndex=this.currRow+1-this.nrRollUpRows;var topRow=this.rows.splice(topRowIndex,1)[0];topRow.clear();this.rows.splice(this.currRow,0,topRow);logger.log('INFO','Rolling up');// logger.log('TEXT', this.get_display_text())
};/**
      * Get all non-empty rows with as unicode text.
      */CaptionScreen.prototype.getDisplayText=function(asOneRow){asOneRow=asOneRow||false;var displayText=[];var text='';var rowNr=-1;for(var i=0;i<NR_ROWS;i++){var rowText=this.rows[i].getTextString();if(rowText){rowNr=i+1;if(asOneRow){displayText.push('Row '+rowNr+': \''+rowText+'\'');}else{displayText.push(rowText.trim());}}}if(displayText.length>0){if(asOneRow){text='['+displayText.join(' | ')+']';}else{text=displayText.join('\n');}}return text;};CaptionScreen.prototype.getTextAndFormat=function(){return this.rows;};return CaptionScreen;}();// var modes = ['MODE_ROLL-UP', 'MODE_POP-ON', 'MODE_PAINT-ON', 'MODE_TEXT'];
var Cea608Channel=/** @class */function(){function Cea608Channel(channelNumber,outputFilter){this.chNr=channelNumber;this.outputFilter=outputFilter;this.mode=null;this.verbose=0;this.displayedMemory=new CaptionScreen();this.nonDisplayedMemory=new CaptionScreen();this.lastOutputScreen=new CaptionScreen();this.currRollUpRow=this.displayedMemory.rows[NR_ROWS-1];this.writeScreen=this.displayedMemory;this.mode=null;this.cueStartTime=null;// Keeps track of where a cue started.
}Cea608Channel.prototype.reset=function(){this.mode=null;this.displayedMemory.reset();this.nonDisplayedMemory.reset();this.lastOutputScreen.reset();this.currRollUpRow=this.displayedMemory.rows[NR_ROWS-1];this.writeScreen=this.displayedMemory;this.mode=null;this.cueStartTime=null;this.lastCueEndTime=null;};Cea608Channel.prototype.getHandler=function(){return this.outputFilter;};Cea608Channel.prototype.setHandler=function(newHandler){this.outputFilter=newHandler;};Cea608Channel.prototype.setPAC=function(pacData){this.writeScreen.setPAC(pacData);};Cea608Channel.prototype.setBkgData=function(bkgData){this.writeScreen.setBkgData(bkgData);};Cea608Channel.prototype.setMode=function(newMode){if(newMode===this.mode){return;}this.mode=newMode;logger.log('INFO','MODE='+newMode);if(this.mode==='MODE_POP-ON'){this.writeScreen=this.nonDisplayedMemory;}else{this.writeScreen=this.displayedMemory;this.writeScreen.reset();}if(this.mode!=='MODE_ROLL-UP'){this.displayedMemory.nrRollUpRows=null;this.nonDisplayedMemory.nrRollUpRows=null;}this.mode=newMode;};Cea608Channel.prototype.insertChars=function(chars){for(var i=0;i<chars.length;i++){this.writeScreen.insertChar(chars[i]);}var screen=this.writeScreen===this.displayedMemory?'DISP':'NON_DISP';logger.log('INFO',screen+': '+this.writeScreen.getDisplayText(true));if(this.mode==='MODE_PAINT-ON'||this.mode==='MODE_ROLL-UP'){logger.log('TEXT','DISPLAYED: '+this.displayedMemory.getDisplayText(true));this.outputDataUpdate();}};Cea608Channel.prototype.ccRCL=function(){logger.log('INFO','RCL - Resume Caption Loading');this.setMode('MODE_POP-ON');};Cea608Channel.prototype.ccBS=function(){logger.log('INFO','BS - BackSpace');if(this.mode==='MODE_TEXT'){return;}this.writeScreen.backSpace();if(this.writeScreen===this.displayedMemory){this.outputDataUpdate();}};Cea608Channel.prototype.ccAOF=function(){};Cea608Channel.prototype.ccAON=function(){};Cea608Channel.prototype.ccDER=function(){logger.log('INFO','DER- Delete to End of Row');this.writeScreen.clearToEndOfRow();this.outputDataUpdate();};Cea608Channel.prototype.ccRU=function(nrRows){logger.log('INFO','RU('+nrRows+') - Roll Up');this.writeScreen=this.displayedMemory;this.setMode('MODE_ROLL-UP');this.writeScreen.setRollUpRows(nrRows);};Cea608Channel.prototype.ccFON=function(){logger.log('INFO','FON - Flash On');this.writeScreen.setPen({flash:true});};Cea608Channel.prototype.ccRDC=function(){logger.log('INFO','RDC - Resume Direct Captioning');this.setMode('MODE_PAINT-ON');};Cea608Channel.prototype.ccTR=function(){logger.log('INFO','TR');this.setMode('MODE_TEXT');};Cea608Channel.prototype.ccRTD=function(){logger.log('INFO','RTD');this.setMode('MODE_TEXT');};Cea608Channel.prototype.ccEDM=function(){logger.log('INFO','EDM - Erase Displayed Memory');this.displayedMemory.reset();this.outputDataUpdate(true);};Cea608Channel.prototype.ccCR=function(){logger.log('CR - Carriage Return');this.writeScreen.rollUp();this.outputDataUpdate(true);};Cea608Channel.prototype.ccENM=function(){logger.log('INFO','ENM - Erase Non-displayed Memory');this.nonDisplayedMemory.reset();};Cea608Channel.prototype.ccEOC=function(){logger.log('INFO','EOC - End Of Caption');if(this.mode==='MODE_POP-ON'){var tmp=this.displayedMemory;this.displayedMemory=this.nonDisplayedMemory;this.nonDisplayedMemory=tmp;this.writeScreen=this.nonDisplayedMemory;logger.log('TEXT','DISP: '+this.displayedMemory.getDisplayText());}this.outputDataUpdate(true);};Cea608Channel.prototype.ccTO=function(nrCols){logger.log('INFO','TO('+nrCols+') - Tab Offset');this.writeScreen.moveCursor(nrCols);};Cea608Channel.prototype.ccMIDROW=function(secondByte){var styles={flash:false};styles.underline=secondByte%2===1;styles.italics=secondByte>=0x2e;if(!styles.italics){var colorIndex=Math.floor(secondByte/2)-0x10;var colors=['white','green','blue','cyan','red','yellow','magenta'];styles.foreground=colors[colorIndex];}else{styles.foreground='white';}logger.log('INFO','MIDROW: '+JSON.stringify(styles));this.writeScreen.setPen(styles);};Cea608Channel.prototype.outputDataUpdate=function(dispatch){if(dispatch===void 0){dispatch=false;}var t=logger.time;if(t===null){return;}if(this.outputFilter){if(this.cueStartTime===null&&!this.displayedMemory.isEmpty()){// Start of a new cue
this.cueStartTime=t;}else{if(!this.displayedMemory.equals(this.lastOutputScreen)){if(this.outputFilter.newCue){this.outputFilter.newCue(this.cueStartTime,t,this.lastOutputScreen);if(dispatch===true&&this.outputFilter.dispatchCue){this.outputFilter.dispatchCue();}}this.cueStartTime=this.displayedMemory.isEmpty()?null:t;}}this.lastOutputScreen.copy(this.displayedMemory);}};Cea608Channel.prototype.cueSplitAtTime=function(t){if(this.outputFilter){if(!this.displayedMemory.isEmpty()){if(this.outputFilter.newCue){this.outputFilter.newCue(this.cueStartTime,t,this.displayedMemory);}this.cueStartTime=t;}}};return Cea608Channel;}();var Cea608Parser=/** @class */function(){function Cea608Parser(field,out1,out2){this.field=field||1;this.outputs=[out1,out2];this.channels=[new Cea608Channel(1,out1),new Cea608Channel(2,out2)];this.currChNr=-1;// Will be 1 or 2
this.lastCmdA=null;// First byte of last command
this.lastCmdB=null;// Second byte of last command
this.bufferedData=[];this.startTime=null;this.lastTime=null;this.dataCounters={'padding':0,'char':0,'cmd':0,'other':0};}Cea608Parser.prototype.getHandler=function(index){return this.channels[index].getHandler();};Cea608Parser.prototype.setHandler=function(index,newHandler){this.channels[index].setHandler(newHandler);};/**
       * Add data for time t in forms of list of bytes (unsigned ints). The bytes are treated as pairs.
       */Cea608Parser.prototype.addData=function(t,byteList){var cmdFound,a,b,charsFound=false;this.lastTime=t;logger.setTime(t);for(var i=0;i<byteList.length;i+=2){a=byteList[i]&0x7f;b=byteList[i+1]&0x7f;if(a===0&&b===0){this.dataCounters.padding+=2;continue;}else{logger.log('DATA','['+numArrayToHexArray([byteList[i],byteList[i+1]])+'] -> ('+numArrayToHexArray([a,b])+')');}cmdFound=this.parseCmd(a,b);if(!cmdFound){cmdFound=this.parseMidrow(a,b);}if(!cmdFound){cmdFound=this.parsePAC(a,b);}if(!cmdFound){cmdFound=this.parseBackgroundAttributes(a,b);}if(!cmdFound){charsFound=this.parseChars(a,b);if(charsFound){if(this.currChNr&&this.currChNr>=0){var channel=this.channels[this.currChNr-1];channel.insertChars(charsFound);}else{logger.log('WARNING','No channel found yet. TEXT-MODE?');}}}if(cmdFound){this.dataCounters.cmd+=2;}else if(charsFound){this.dataCounters.char+=2;}else{this.dataCounters.other+=2;logger.log('WARNING','Couldn\'t parse cleaned data '+numArrayToHexArray([a,b])+' orig: '+numArrayToHexArray([byteList[i],byteList[i+1]]));}}};/**
       * Parse Command.
       * @returns {Boolean} Tells if a command was found
       */Cea608Parser.prototype.parseCmd=function(a,b){var chNr=null;var cond1=(a===0x14||a===0x1C)&&b>=0x20&&b<=0x2F;var cond2=(a===0x17||a===0x1F)&&b>=0x21&&b<=0x23;if(!(cond1||cond2)){return false;}if(a===this.lastCmdA&&b===this.lastCmdB){this.lastCmdA=null;this.lastCmdB=null;// Repeated commands are dropped (once)
logger.log('DEBUG','Repeated command ('+numArrayToHexArray([a,b])+') is dropped');return true;}if(a===0x14||a===0x17){chNr=1;}else{chNr=2;}// (a === 0x1C || a=== 0x1f)
var channel=this.channels[chNr-1];if(a===0x14||a===0x1C){if(b===0x20){channel.ccRCL();}else if(b===0x21){channel.ccBS();}else if(b===0x22){channel.ccAOF();}else if(b===0x23){channel.ccAON();}else if(b===0x24){channel.ccDER();}else if(b===0x25){channel.ccRU(2);}else if(b===0x26){channel.ccRU(3);}else if(b===0x27){channel.ccRU(4);}else if(b===0x28){channel.ccFON();}else if(b===0x29){channel.ccRDC();}else if(b===0x2A){channel.ccTR();}else if(b===0x2B){channel.ccRTD();}else if(b===0x2C){channel.ccEDM();}else if(b===0x2D){channel.ccCR();}else if(b===0x2E){channel.ccENM();}else if(b===0x2F){channel.ccEOC();}}else{// a == 0x17 || a == 0x1F
channel.ccTO(b-0x20);}this.lastCmdA=a;this.lastCmdB=b;this.currChNr=chNr;return true;};/**
       * Parse midrow styling command
       * @returns {Boolean}
       */Cea608Parser.prototype.parseMidrow=function(a,b){var chNr=null;if((a===0x11||a===0x19)&&b>=0x20&&b<=0x2f){if(a===0x11){chNr=1;}else{chNr=2;}if(chNr!==this.currChNr){logger.log('ERROR','Mismatch channel in midrow parsing');return false;}var channel=this.channels[chNr-1];channel.ccMIDROW(b);logger.log('DEBUG','MIDROW ('+numArrayToHexArray([a,b])+')');return true;}return false;};/**
       * Parse Preable Access Codes (Table 53).
       * @returns {Boolean} Tells if PAC found
       */Cea608Parser.prototype.parsePAC=function(a,b){var chNr=null;var row=null;var case1=(a>=0x11&&a<=0x17||a>=0x19&&a<=0x1F)&&b>=0x40&&b<=0x7F;var case2=(a===0x10||a===0x18)&&b>=0x40&&b<=0x5F;if(!(case1||case2)){return false;}if(a===this.lastCmdA&&b===this.lastCmdB){this.lastCmdA=null;this.lastCmdB=null;return true;// Repeated commands are dropped (once)
}chNr=a<=0x17?1:2;if(b>=0x40&&b<=0x5F){row=chNr===1?rowsLowCh1[a]:rowsLowCh2[a];}else{// 0x60 <= b <= 0x7F
row=chNr===1?rowsHighCh1[a]:rowsHighCh2[a];}var pacData=this.interpretPAC(row,b);var channel=this.channels[chNr-1];channel.setPAC(pacData);this.lastCmdA=a;this.lastCmdB=b;this.currChNr=chNr;return true;};/**
       * Interpret the second byte of the pac, and return the information.
       * @returns {Object} pacData with style parameters.
       */Cea608Parser.prototype.interpretPAC=function(row,byte){var pacIndex=byte;var pacData={color:null,italics:false,indent:null,underline:false,row:row};if(byte>0x5F){pacIndex=byte-0x60;}else{pacIndex=byte-0x40;}pacData.underline=(pacIndex&1)===1;if(pacIndex<=0xd){pacData.color=['white','green','blue','cyan','red','yellow','magenta','white'][Math.floor(pacIndex/2)];}else if(pacIndex<=0xf){pacData.italics=true;pacData.color='white';}else{pacData.indent=Math.floor((pacIndex-0x10)/2)*4;}return pacData;// Note that row has zero offset. The spec uses 1.
};/**
       * Parse characters.
       * @returns An array with 1 to 2 codes corresponding to chars, if found. null otherwise.
       */Cea608Parser.prototype.parseChars=function(a,b){var channelNr=null,charCodes=null,charCode1=null;if(a>=0x19){channelNr=2;charCode1=a-8;}else{channelNr=1;charCode1=a;}if(charCode1>=0x11&&charCode1<=0x13){// Special character
var oneCode=b;if(charCode1===0x11){oneCode=b+0x50;}else if(charCode1===0x12){oneCode=b+0x70;}else{oneCode=b+0x90;}logger.log('INFO','Special char \''+getCharForByte(oneCode)+'\' in channel '+channelNr);charCodes=[oneCode];}else if(a>=0x20&&a<=0x7f){charCodes=b===0?[a]:[a,b];}if(charCodes){var hexCodes=numArrayToHexArray(charCodes);logger.log('DEBUG','Char codes =  '+hexCodes.join(','));this.lastCmdA=null;this.lastCmdB=null;}return charCodes;};/**
      * Parse extended background attributes as well as new foreground color black.
      * @returns{Boolean} Tells if background attributes are found
      */Cea608Parser.prototype.parseBackgroundAttributes=function(a,b){var bkgData,index,chNr,channel;var case1=(a===0x10||a===0x18)&&b>=0x20&&b<=0x2f;var case2=(a===0x17||a===0x1f)&&b>=0x2d&&b<=0x2f;if(!(case1||case2)){return false;}bkgData={};if(a===0x10||a===0x18){index=Math.floor((b-0x20)/2);bkgData.background=backgroundColors[index];if(b%2===1){bkgData.background=bkgData.background+'_semi';}}else if(b===0x2d){bkgData.background='transparent';}else{bkgData.foreground='black';if(b===0x2f){bkgData.underline=true;}}chNr=a<0x18?1:2;channel=this.channels[chNr-1];channel.setBkgData(bkgData);this.lastCmdA=null;this.lastCmdB=null;return true;};/**
       * Reset state of parser and its channels.
       */Cea608Parser.prototype.reset=function(){for(var i=0;i<this.channels.length;i++){if(this.channels[i]){this.channels[i].reset();}}this.lastCmdA=null;this.lastCmdB=null;};/**
       * Trigger the generation of a cue, and the start of a new one if displayScreens are not empty.
       */Cea608Parser.prototype.cueSplitAtTime=function(t){for(var i=0;i<this.channels.length;i++){if(this.channels[i]){this.channels[i].cueSplitAtTime(t);}}};return Cea608Parser;}();exports.default=Cea608Parser;/***/},/***/"./src/utils/codecs.js":/*!*****************************!*\
  !*** ./src/utils/codecs.js ***!
  \*****************************//*! no static exports found *//*! ModuleConcatenation bailout: Module is not an ECMAScript module *//***/function srcUtilsCodecsJs(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});// from http://mp4ra.org/codecs.html
var sampleEntryCodesISO={audio:{'a3ds':true,'ac-3':true,'ac-4':true,'alac':true,'alaw':true,'dra1':true,'dts+':true,'dts-':true,'dtsc':true,'dtse':true,'dtsh':true,'ec-3':true,'enca':true,'g719':true,'g726':true,'m4ae':true,'mha1':true,'mha2':true,'mhm1':true,'mhm2':true,'mlpa':true,'mp4a':true,'raw ':true,'Opus':true,'samr':true,'sawb':true,'sawp':true,'sevc':true,'sqcp':true,'ssmv':true,'twos':true,'ulaw':true},video:{'avc1':true,'avc2':true,'avc3':true,'avc4':true,'avcp':true,'drac':true,'dvav':true,'dvhe':true,'encv':true,'hev1':true,'hvc1':true,'mjp2':true,'mp4v':true,'mvc1':true,'mvc2':true,'mvc3':true,'mvc4':true,'resv':true,'rv60':true,'s263':true,'svc1':true,'svc2':true,'vc-1':true,'vp08':true,'vp09':true}};function isCodecType(codec,type){var typeCodes=sampleEntryCodesISO[type];return!!typeCodes&&typeCodes[codec.slice(0,4)]===true;}exports.isCodecType=isCodecType;function isCodecSupportedInMp4(codec,type){return window.MediaSource.isTypeSupported((type||'video')+"/mp4;codecs=\""+codec+"\"");}exports.isCodecSupportedInMp4=isCodecSupportedInMp4;/***/},/***/"./src/utils/cues.js":/*!***************************!*\
  !*** ./src/utils/cues.js ***!
  \***************************//*! no static exports found *//*! ModuleConcatenation bailout: Module is not an ECMAScript module *//***/function srcUtilsCuesJs(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var vttparser_1=__webpack_require__(/*! ./vttparser */"./src/utils/vttparser.js");function newCue(track,startTime,endTime,captionScreen){var row;var cue;var indenting;var indent;var text;var VTTCue=window.VTTCue||window.TextTrackCue;for(var r=0;r<captionScreen.rows.length;r++){row=captionScreen.rows[r];indenting=true;indent=0;text='';if(!row.isEmpty()){for(var c=0;c<row.chars.length;c++){if(row.chars[c].uchar.match(/\s/)&&indenting){indent++;}else{text+=row.chars[c].uchar;indenting=false;}}// To be used for cleaning-up orphaned roll-up captions
row.cueStartTime=startTime;// Give a slight bump to the endTime if it's equal to startTime to avoid a SyntaxError in IE
if(startTime===endTime){endTime+=0.0001;}cue=new VTTCue(startTime,endTime,vttparser_1.fixLineBreaks(text.trim()));if(indent>=16){indent--;}else{indent++;}// VTTCue.line get's flakey when using controls, so let's now include line 13&14
// also, drop line 1 since it's to close to the top
if(navigator.userAgent.match(/Firefox\//)){cue.line=r+1;}else{cue.line=r>7?r-2:r+1;}cue.align='left';// Clamp the position between 0 and 100 - if out of these bounds, Firefox throws an exception and captions break
cue.position=Math.max(0,Math.min(100,100*(indent/32)+(navigator.userAgent.match(/Firefox\//)?50:0)));track.addCue(cue);}}}exports.newCue=newCue;/***/},/***/"./src/utils/discontinuities.js":/*!**************************************!*\
  !*** ./src/utils/discontinuities.js ***!
  \**************************************//*! no static exports found *//*! ModuleConcatenation bailout: Module is not an ECMAScript module *//***/function srcUtilsDiscontinuitiesJs(module,exports,__webpack_require__){"use strict";/* WEBPACK VAR INJECTION */(function(Number){Object.defineProperty(exports,"__esModule",{value:true});var binary_search_1=__webpack_require__(/*! ./binary-search */"./src/utils/binary-search.js");var logger_1=__webpack_require__(/*! ../utils/logger */"./src/utils/logger.js");function findFirstFragWithCC(fragments,cc){var firstFrag=null;for(var i=0;i<fragments.length;i+=1){var currentFrag=fragments[i];if(currentFrag&&currentFrag.cc===cc){firstFrag=currentFrag;break;}}return firstFrag;}exports.findFirstFragWithCC=findFirstFragWithCC;function findFragWithCC(fragments,CC){return binary_search_1.default.search(fragments,function(candidate){if(candidate.cc<CC){return 1;}else if(candidate.cc>CC){return-1;}else{return 0;}});}exports.findFragWithCC=findFragWithCC;function shouldAlignOnDiscontinuities(lastFrag,lastLevel,details){var shouldAlign=false;if(lastLevel&&lastLevel.details&&details){if(details.endCC>details.startCC||lastFrag&&lastFrag.cc<details.startCC){shouldAlign=true;}}return shouldAlign;}exports.shouldAlignOnDiscontinuities=shouldAlignOnDiscontinuities;// Find the first frag in the previous level which matches the CC of the first frag of the new level
function findDiscontinuousReferenceFrag(prevDetails,curDetails){var prevFrags=prevDetails.fragments;var curFrags=curDetails.fragments;if(!curFrags.length||!prevFrags.length){logger_1.logger.log('No fragments to align');return;}var prevStartFrag=findFirstFragWithCC(prevFrags,curFrags[0].cc);if(!prevStartFrag||prevStartFrag&&!prevStartFrag.startPTS){logger_1.logger.log('No frag in previous level to align on');return;}return prevStartFrag;}exports.findDiscontinuousReferenceFrag=findDiscontinuousReferenceFrag;function adjustPts(sliding,details){details.fragments.forEach(function(frag){if(frag){var start=frag.start+sliding;frag.start=frag.startPTS=start;frag.endPTS=start+frag.duration;}});details.PTSKnown=true;}exports.adjustPts=adjustPts;/**
 * Using the parameters of the last level, this function computes PTS' of the new fragments so that they form a
 * contiguous stream with the last fragments.
 * The PTS of a fragment lets Hls.js know where it fits into a stream - by knowing every PTS, we know which fragment to
 * download at any given time. PTS is normally computed when the fragment is demuxed, so taking this step saves us time
 * and an extra download.
 * @param lastFrag
 * @param lastLevel
 * @param details
 */function alignStream(lastFrag,lastLevel,details){alignDiscontinuities(lastFrag,details,lastLevel);if(!details.PTSKnown&&lastLevel){// If the PTS wasn't figured out via discontinuity sequence that means there was no CC increase within the level.
// Aligning via Program Date Time should therefore be reliable, since PDT should be the same within the same
// discontinuity sequence.
alignPDT(details,lastLevel.details);}}exports.alignStream=alignStream;/**
 * Computes the PTS if a new level's fragments using the PTS of a fragment in the last level which shares the same
 * discontinuity sequence.
 * @param lastLevel - The details of the last loaded level
 * @param details - The details of the new level
 */function alignDiscontinuities(lastFrag,details,lastLevel){if(shouldAlignOnDiscontinuities(lastFrag,lastLevel,details)){var referenceFrag=findDiscontinuousReferenceFrag(lastLevel.details,details);if(referenceFrag){logger_1.logger.log('Adjusting PTS using last level due to CC increase within current level');adjustPts(referenceFrag.start,details);}}}exports.alignDiscontinuities=alignDiscontinuities;/**
 * Computes the PTS of a new level's fragments using the difference in Program Date Time from the last level.
 * @param details - The details of the new level
 * @param lastDetails - The details of the last loaded level
 */function alignPDT(details,lastDetails){if(lastDetails&&lastDetails.fragments.length){if(!details.hasProgramDateTime||!lastDetails.hasProgramDateTime){return;}// if last level sliding is 1000 and its first frag PROGRAM-DATE-TIME is 2017-08-20 1:10:00 AM
// and if new details first frag PROGRAM DATE-TIME is 2017-08-20 1:10:08 AM
// then we can deduce that playlist B sliding is 1000+8 = 1008s
var lastPDT=lastDetails.fragments[0].programDateTime;var newPDT=details.fragments[0].programDateTime;// date diff is in ms. frag.start is in seconds
var sliding=(newPDT-lastPDT)/1000+lastDetails.fragments[0].start;if(Number.isFinite(sliding)){logger_1.logger.log("adjusting PTS using programDateTime delta, sliding:"+sliding.toFixed(3));adjustPts(sliding,details);}}}exports.alignPDT=alignPDT;/* WEBPACK VAR INJECTION */}).call(this,__webpack_require__(/*! ./src/polyfills/number */"./src/polyfills/number.js")["Number"]);/***/},/***/"./src/utils/ewma-bandwidth-estimator.js":/*!***********************************************!*\
  !*** ./src/utils/ewma-bandwidth-estimator.js ***!
  \***********************************************//*! no static exports found *//*! ModuleConcatenation bailout: Module is not an ECMAScript module *//***/function srcUtilsEwmaBandwidthEstimatorJs(module,exports,__webpack_require__){"use strict";/*
 * EWMA Bandwidth Estimator
 *  - heavily inspired from shaka-player
 * Tracks bandwidth samples and estimates available bandwidth.
 * Based on the minimum of two exponentially-weighted moving averages with
 * different half-lives.
 */Object.defineProperty(exports,"__esModule",{value:true});var ewma_1=__webpack_require__(/*! ../utils/ewma */"./src/utils/ewma.js");var EwmaBandWidthEstimator=/** @class */function(){function EwmaBandWidthEstimator(hls,slow,fast,defaultEstimate){this.hls=hls;this.defaultEstimate_=defaultEstimate;this.minWeight_=0.001;this.minDelayMs_=50;this.slow_=new ewma_1.default(slow);this.fast_=new ewma_1.default(fast);}EwmaBandWidthEstimator.prototype.sample=function(durationMs,numBytes){durationMs=Math.max(durationMs,this.minDelayMs_);var bandwidth=8000*numBytes/durationMs,// console.log('instant bw:'+ Math.round(bandwidth));
// we weight sample using loading duration....
weight=durationMs/1000;this.fast_.sample(weight,bandwidth);this.slow_.sample(weight,bandwidth);};EwmaBandWidthEstimator.prototype.canEstimate=function(){var fast=this.fast_;return fast&&fast.getTotalWeight()>=this.minWeight_;};EwmaBandWidthEstimator.prototype.getEstimate=function(){if(this.canEstimate()){// console.log('slow estimate:'+ Math.round(this.slow_.getEstimate()));
// console.log('fast estimate:'+ Math.round(this.fast_.getEstimate()));
// Take the minimum of these two estimates.  This should have the effect of
// adapting down quickly, but up more slowly.
return Math.min(this.fast_.getEstimate(),this.slow_.getEstimate());}else{return this.defaultEstimate_;}};EwmaBandWidthEstimator.prototype.destroy=function(){};return EwmaBandWidthEstimator;}();exports.default=EwmaBandWidthEstimator;/***/},/***/"./src/utils/ewma.js":/*!***************************!*\
  !*** ./src/utils/ewma.js ***!
  \***************************//*! no static exports found *//*! ModuleConcatenation bailout: Module is not an ECMAScript module *//***/function srcUtilsEwmaJs(module,exports,__webpack_require__){"use strict";/*
 * compute an Exponential Weighted moving average
 * - https://en.wikipedia.org/wiki/Moving_average#Exponential_moving_average
 *  - heavily inspired from shaka-player
 */Object.defineProperty(exports,"__esModule",{value:true});var EWMA=/** @class */function(){//  About half of the estimated value will be from the last |halfLife| samples by weight.
function EWMA(halfLife){// Larger values of alpha expire historical data more slowly.
this.alpha_=halfLife?Math.exp(Math.log(0.5)/halfLife):0;this.estimate_=0;this.totalWeight_=0;}EWMA.prototype.sample=function(weight,value){var adjAlpha=Math.pow(this.alpha_,weight);this.estimate_=value*(1-adjAlpha)+adjAlpha*this.estimate_;this.totalWeight_+=weight;};EWMA.prototype.getTotalWeight=function(){return this.totalWeight_;};EWMA.prototype.getEstimate=function(){if(this.alpha_){var zeroFactor=1-Math.pow(this.alpha_,this.totalWeight_);return this.estimate_/zeroFactor;}else{return this.estimate_;}};return EWMA;}();exports.default=EWMA;/***/},/***/"./src/utils/get-self-scope.js":/*!*************************************!*\
  !*** ./src/utils/get-self-scope.js ***!
  \*************************************//*! no static exports found *//*! ModuleConcatenation bailout: Module is not an ECMAScript module *//***/function srcUtilsGetSelfScopeJs(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});function getSelfScope(){// see https://stackoverflow.com/a/11237259/589493
if(typeof window==='undefined'){/* eslint-disable-next-line no-undef */return self;}else{return window;}}exports.getSelfScope=getSelfScope;/***/},/***/"./src/utils/logger.js":/*!*****************************!*\
  !*** ./src/utils/logger.js ***!
  \*****************************//*! no static exports found *//*! ModuleConcatenation bailout: Module is not an ECMAScript module *//***/function srcUtilsLoggerJs(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var get_self_scope_1=__webpack_require__(/*! ./get-self-scope */"./src/utils/get-self-scope.js");function noop(){}var fakeLogger={trace:noop,debug:noop,log:noop,warn:noop,info:noop,error:noop};var exportedLogger=fakeLogger;// let lastCallTime;
// function formatMsgWithTimeInfo(type, msg) {
//   const now = Date.now();
//   const diff = lastCallTime ? '+' + (now - lastCallTime) : '0';
//   lastCallTime = now;
//   msg = (new Date(now)).toISOString() + ' | [' +  type + '] > ' + msg + ' ( ' + diff + ' ms )';
//   return msg;
// }
function formatMsg(type,msg){msg='['+type+'] > '+msg;return msg;}var global=get_self_scope_1.getSelfScope();function consolePrintFn(type){var func=global.console[type];if(func){return function(){var args=[];for(var _i=0;_i<arguments.length;_i++){args[_i]=arguments[_i];}if(args[0]){args[0]=formatMsg(type,args[0]);}func.apply(global.console,args);};}return noop;}function exportLoggerFunctions(debugConfig){var functions=[];for(var _i=1;_i<arguments.length;_i++){functions[_i-1]=arguments[_i];}functions.forEach(function(type){exportedLogger[type]=debugConfig[type]?debugConfig[type].bind(debugConfig):consolePrintFn(type);});}exports.enableLogs=function(debugConfig){if(debugConfig===true||typeof debugConfig==='object'){exportLoggerFunctions(debugConfig,// Remove out from list here to hard-disable a log-level
// 'trace',
'debug','log','info','warn','error');// Some browsers don't allow to use bind on console object anyway
// fallback to default if needed
try{exportedLogger.log();}catch(e){exportedLogger=fakeLogger;}}else{exportedLogger=fakeLogger;}};exports.logger=exportedLogger;/***/},/***/"./src/utils/mediakeys-helper.js":/*!***************************************!*\
  !*** ./src/utils/mediakeys-helper.js ***!
  \***************************************//*! no static exports found *//*! ModuleConcatenation bailout: Module is not an ECMAScript module *//***/function srcUtilsMediakeysHelperJs(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var requestMediaKeySystemAccess=function(){if(typeof window!=='undefined'&&window.navigator&&window.navigator.requestMediaKeySystemAccess){return window.navigator.requestMediaKeySystemAccess.bind(window.navigator);}else{return null;}}();exports.requestMediaKeySystemAccess=requestMediaKeySystemAccess;/***/},/***/"./src/utils/mediasource-helper.js":/*!*****************************************!*\
  !*** ./src/utils/mediasource-helper.js ***!
  \*****************************************//*! no static exports found *//*! ModuleConcatenation bailout: Module is not an ECMAScript module *//***/function srcUtilsMediasourceHelperJs(module,exports,__webpack_require__){"use strict";/**
 * MediaSource helper
 */Object.defineProperty(exports,"__esModule",{value:true});function getMediaSource(){if(typeof window!=='undefined'){return window.MediaSource||window.WebKitMediaSource;}}exports.getMediaSource=getMediaSource;/***/},/***/"./src/utils/output-filter.js":/*!************************************!*\
  !*** ./src/utils/output-filter.js ***!
  \************************************//*! no static exports found *//*! ModuleConcatenation bailout: Module is not an ECMAScript module *//***/function srcUtilsOutputFilterJs(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var OutputFilter=/** @class */function(){function OutputFilter(timelineController,trackName){this.timelineController=timelineController;this.trackName=trackName;this.startTime=null;this.endTime=null;this.screen=null;}OutputFilter.prototype.dispatchCue=function(){if(this.startTime===null){return;}this.timelineController.addCues(this.trackName,this.startTime,this.endTime,this.screen);this.startTime=null;};OutputFilter.prototype.newCue=function(startTime,endTime,screen){if(this.startTime===null||this.startTime>startTime){this.startTime=startTime;}this.endTime=endTime;this.screen=screen;this.timelineController.createCaptionsTrack(this.trackName);};return OutputFilter;}();exports.default=OutputFilter;/***/},/***/"./src/utils/texttrack-utils.js":/*!**************************************!*\
  !*** ./src/utils/texttrack-utils.js ***!
  \**************************************//*! no static exports found *//*! ModuleConcatenation bailout: Module is not an ECMAScript module *//***/function srcUtilsTexttrackUtilsJs(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});function sendAddTrackEvent(track,videoEl){var event=null;try{event=new window.Event('addtrack');}catch(err){// for IE11
event=document.createEvent('Event');event.initEvent('addtrack',false,false);}event.track=track;videoEl.dispatchEvent(event);}exports.sendAddTrackEvent=sendAddTrackEvent;function clearCurrentCues(track){if(track&&track.cues){while(track.cues.length>0){track.removeCue(track.cues[0]);}}}exports.clearCurrentCues=clearCurrentCues;/***/},/***/"./src/utils/time-ranges.js":/*!**********************************!*\
  !*** ./src/utils/time-ranges.js ***!
  \**********************************//*! no static exports found *//*! ModuleConcatenation bailout: Module is not an ECMAScript module *//***/function srcUtilsTimeRangesJs(module,exports,__webpack_require__){"use strict";/**
 *  TimeRanges to string helper
 */Object.defineProperty(exports,"__esModule",{value:true});var TimeRanges={toString:function toString(r){var log='',len=r.length;for(var i=0;i<len;i++){log+='['+r.start(i).toFixed(3)+','+r.end(i).toFixed(3)+']';}return log;}};exports.default=TimeRanges;/***/},/***/"./src/utils/vttcue.js":/*!*****************************!*\
  !*** ./src/utils/vttcue.js ***!
  \*****************************//*! no static exports found *//*! ModuleConcatenation bailout: Module is not an ECMAScript module *//***/function srcUtilsVttcueJs(module,exports,__webpack_require__){"use strict";/**
 * Copyright 2013 vtt.js Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */Object.defineProperty(exports,"__esModule",{value:true});exports.default=function(){if(typeof window!=='undefined'&&window.VTTCue){return window.VTTCue;}var autoKeyword='auto';var directionSetting={'':true,lr:true,rl:true};var alignSetting={start:true,middle:true,end:true,left:true,right:true};function findDirectionSetting(value){if(typeof value!=='string'){return false;}var dir=directionSetting[value.toLowerCase()];return dir?value.toLowerCase():false;}function findAlignSetting(value){if(typeof value!=='string'){return false;}var align=alignSetting[value.toLowerCase()];return align?value.toLowerCase():false;}function extend(obj){var i=1;for(;i<arguments.length;i++){var cobj=arguments[i];for(var p in cobj){obj[p]=cobj[p];}}return obj;}function VTTCue(startTime,endTime,text){var cue=this;var isIE8=function(){if(typeof navigator==='undefined'){return;}return /MSIE\s8\.0/.test(navigator.userAgent);}();var baseObj={};if(isIE8){cue=document.createElement('custom');}else{baseObj.enumerable=true;}/**
         * Shim implementation specific properties. These properties are not in
         * the spec.
         */// Lets us know when the VTTCue's data has changed in such a way that we need
// to recompute its display state. This lets us compute its display state
// lazily.
cue.hasBeenReset=false;/**
         * VTTCue and TextTrackCue properties
         * http://dev.w3.org/html5/webvtt/#vttcue-interface
         */var _id='';var _pauseOnExit=false;var _startTime=startTime;var _endTime=endTime;var _text=text;var _region=null;var _vertical='';var _snapToLines=true;var _line='auto';var _lineAlign='start';var _position=50;var _positionAlign='middle';var _size=50;var _align='middle';Object.defineProperty(cue,'id',extend({},baseObj,{get:function get(){return _id;},set:function set(value){_id=''+value;}}));Object.defineProperty(cue,'pauseOnExit',extend({},baseObj,{get:function get(){return _pauseOnExit;},set:function set(value){_pauseOnExit=!!value;}}));Object.defineProperty(cue,'startTime',extend({},baseObj,{get:function get(){return _startTime;},set:function set(value){if(typeof value!=='number'){throw new TypeError('Start time must be set to a number.');}_startTime=value;this.hasBeenReset=true;}}));Object.defineProperty(cue,'endTime',extend({},baseObj,{get:function get(){return _endTime;},set:function set(value){if(typeof value!=='number'){throw new TypeError('End time must be set to a number.');}_endTime=value;this.hasBeenReset=true;}}));Object.defineProperty(cue,'text',extend({},baseObj,{get:function get(){return _text;},set:function set(value){_text=''+value;this.hasBeenReset=true;}}));Object.defineProperty(cue,'region',extend({},baseObj,{get:function get(){return _region;},set:function set(value){_region=value;this.hasBeenReset=true;}}));Object.defineProperty(cue,'vertical',extend({},baseObj,{get:function get(){return _vertical;},set:function set(value){var setting=findDirectionSetting(value);// Have to check for false because the setting an be an empty string.
if(setting===false){throw new SyntaxError('An invalid or illegal string was specified.');}_vertical=setting;this.hasBeenReset=true;}}));Object.defineProperty(cue,'snapToLines',extend({},baseObj,{get:function get(){return _snapToLines;},set:function set(value){_snapToLines=!!value;this.hasBeenReset=true;}}));Object.defineProperty(cue,'line',extend({},baseObj,{get:function get(){return _line;},set:function set(value){if(typeof value!=='number'&&value!==autoKeyword){throw new SyntaxError('An invalid number or illegal string was specified.');}_line=value;this.hasBeenReset=true;}}));Object.defineProperty(cue,'lineAlign',extend({},baseObj,{get:function get(){return _lineAlign;},set:function set(value){var setting=findAlignSetting(value);if(!setting){throw new SyntaxError('An invalid or illegal string was specified.');}_lineAlign=setting;this.hasBeenReset=true;}}));Object.defineProperty(cue,'position',extend({},baseObj,{get:function get(){return _position;},set:function set(value){if(value<0||value>100){throw new Error('Position must be between 0 and 100.');}_position=value;this.hasBeenReset=true;}}));Object.defineProperty(cue,'positionAlign',extend({},baseObj,{get:function get(){return _positionAlign;},set:function set(value){var setting=findAlignSetting(value);if(!setting){throw new SyntaxError('An invalid or illegal string was specified.');}_positionAlign=setting;this.hasBeenReset=true;}}));Object.defineProperty(cue,'size',extend({},baseObj,{get:function get(){return _size;},set:function set(value){if(value<0||value>100){throw new Error('Size must be between 0 and 100.');}_size=value;this.hasBeenReset=true;}}));Object.defineProperty(cue,'align',extend({},baseObj,{get:function get(){return _align;},set:function set(value){var setting=findAlignSetting(value);if(!setting){throw new SyntaxError('An invalid or illegal string was specified.');}_align=setting;this.hasBeenReset=true;}}));/**
         * Other <track> spec defined properties
         */// http://www.whatwg.org/specs/web-apps/current-work/multipage/the-video-element.html#text-track-cue-display-state
cue.displayState=undefined;if(isIE8){return cue;}}/**
     * VTTCue methods
     */VTTCue.prototype.getCueAsHTML=function(){// Assume WebVTT.convertCueToDOMTree is on the global.
var WebVTT=window.WebVTT;return WebVTT.convertCueToDOMTree(window,this.text);};return VTTCue;}();/***/},/***/"./src/utils/vttparser.js":/*!********************************!*\
  !*** ./src/utils/vttparser.js ***!
  \********************************//*! no static exports found *//*! ModuleConcatenation bailout: Module is not an ECMAScript module *//***/function srcUtilsVttparserJs(module,exports,__webpack_require__){"use strict";/*
 * Source: https://github.com/mozilla/vtt.js/blob/master/dist/vtt.js#L1716
 */Object.defineProperty(exports,"__esModule",{value:true});var vttcue_1=__webpack_require__(/*! ./vttcue */"./src/utils/vttcue.js");var StringDecoder=function StringDecoder(){return{decode:function decode(data){if(!data){return'';}if(typeof data!=='string'){throw new Error('Error - expected string data.');}return decodeURIComponent(encodeURIComponent(data));}};};function VTTParser(){this.window=window;this.state='INITIAL';this.buffer='';this.decoder=new StringDecoder();this.regionList=[];}// Try to parse input as a time stamp.
function parseTimeStamp(input){function computeSeconds(h,m,s,f){return(h|0)*3600+(m|0)*60+(s|0)+(f|0)/1000;}var m=input.match(/^(\d+):(\d{2})(:\d{2})?\.(\d{3})/);if(!m){return null;}if(m[3]){// Timestamp takes the form of [hours]:[minutes]:[seconds].[milliseconds]
return computeSeconds(m[1],m[2],m[3].replace(':',''),m[4]);}else if(m[1]>59){// Timestamp takes the form of [hours]:[minutes].[milliseconds]
// First position is hours as it's over 59.
return computeSeconds(m[1],m[2],0,m[4]);}else{// Timestamp takes the form of [minutes]:[seconds].[milliseconds]
return computeSeconds(0,m[1],m[2],m[4]);}}// A settings object holds key/value pairs and will ignore anything but the first
// assignment to a specific key.
function Settings(){this.values=Object.create(null);}Settings.prototype={// Only accept the first assignment to any key.
set:function set(k,v){if(!this.get(k)&&v!==''){this.values[k]=v;}},// Return the value for a key, or a default value.
// If 'defaultKey' is passed then 'dflt' is assumed to be an object with
// a number of possible default values as properties where 'defaultKey' is
// the key of the property that will be chosen; otherwise it's assumed to be
// a single value.
get:function get(k,dflt,defaultKey){if(defaultKey){return this.has(k)?this.values[k]:dflt[defaultKey];}return this.has(k)?this.values[k]:dflt;},// Check whether we have a value for a key.
has:function has(k){return k in this.values;},// Accept a setting if its one of the given alternatives.
alt:function alt(k,v,a){for(var n=0;n<a.length;++n){if(v===a[n]){this.set(k,v);break;}}},// Accept a setting if its a valid (signed) integer.
integer:function integer(k,v){if(/^-?\d+$/.test(v)){// integer
this.set(k,parseInt(v,10));}},// Accept a setting if its a valid percentage.
percent:function percent(k,v){var m;if(m=v.match(/^([\d]{1,3})(\.[\d]*)?%$/)){v=parseFloat(v);if(v>=0&&v<=100){this.set(k,v);return true;}}return false;}};// Helper function to parse input into groups separated by 'groupDelim', and
// interprete each group as a key/value pair separated by 'keyValueDelim'.
function parseOptions(input,callback,keyValueDelim,groupDelim){var groups=groupDelim?input.split(groupDelim):[input];for(var i in groups){if(typeof groups[i]!=='string'){continue;}var kv=groups[i].split(keyValueDelim);if(kv.length!==2){continue;}var k=kv[0];var v=kv[1];callback(k,v);}}var defaults=new vttcue_1.default(0,0,0);// 'middle' was changed to 'center' in the spec: https://github.com/w3c/webvtt/pull/244
//  Safari doesn't yet support this change, but FF and Chrome do.
var center=defaults.align==='middle'?'middle':'center';function parseCue(input,cue,regionList){// Remember the original input if we need to throw an error.
var oInput=input;// 4.1 WebVTT timestamp
function consumeTimeStamp(){var ts=parseTimeStamp(input);if(ts===null){throw new Error('Malformed timestamp: '+oInput);}// Remove time stamp from input.
input=input.replace(/^[^\sa-zA-Z-]+/,'');return ts;}// 4.4.2 WebVTT cue settings
function consumeCueSettings(input,cue){var settings=new Settings();parseOptions(input,function(k,v){switch(k){case'region':// Find the last region we parsed with the same region id.
for(var i=regionList.length-1;i>=0;i--){if(regionList[i].id===v){settings.set(k,regionList[i].region);break;}}break;case'vertical':settings.alt(k,v,['rl','lr']);break;case'line':var vals=v.split(','),vals0=vals[0];settings.integer(k,vals0);if(settings.percent(k,vals0)){settings.set('snapToLines',false);}settings.alt(k,vals0,['auto']);if(vals.length===2){settings.alt('lineAlign',vals[1],['start',center,'end']);}break;case'position':vals=v.split(',');settings.percent(k,vals[0]);if(vals.length===2){settings.alt('positionAlign',vals[1],['start',center,'end','line-left','line-right','auto']);}break;case'size':settings.percent(k,v);break;case'align':settings.alt(k,v,['start',center,'end','left','right']);break;}},/:/,/\s/);// Apply default values for any missing fields.
cue.region=settings.get('region',null);cue.vertical=settings.get('vertical','');var line=settings.get('line','auto');if(line==='auto'&&defaults.line===-1){// set numeric line number for Safari
line=-1;}cue.line=line;cue.lineAlign=settings.get('lineAlign','start');cue.snapToLines=settings.get('snapToLines',true);cue.size=settings.get('size',100);cue.align=settings.get('align',center);var position=settings.get('position','auto');if(position==='auto'&&defaults.position===50){// set numeric position for Safari
position=cue.align==='start'||cue.align==='left'?0:cue.align==='end'||cue.align==='right'?100:50;}cue.position=position;}function skipWhitespace(){input=input.replace(/^\s+/,'');}// 4.1 WebVTT cue timings.
skipWhitespace();cue.startTime=consumeTimeStamp();// (1) collect cue start time
skipWhitespace();if(input.substr(0,3)!=='-->'){// (3) next characters must match '-->'
throw new Error('Malformed time stamp (time stamps must be separated by \'-->\'): '+oInput);}input=input.substr(3);skipWhitespace();cue.endTime=consumeTimeStamp();// (5) collect cue end time
// 4.1 WebVTT cue settings list.
skipWhitespace();consumeCueSettings(input,cue);}function fixLineBreaks(input){return input.replace(/<br(?: \/)?>/gi,'\n');}exports.fixLineBreaks=fixLineBreaks;VTTParser.prototype={parse:function parse(data){var self=this;// If there is no data then we won't decode it, but will just try to parse
// whatever is in buffer already. This may occur in circumstances, for
// example when flush() is called.
if(data){// Try to decode the data that we received.
self.buffer+=self.decoder.decode(data,{stream:true});}function collectNextLine(){var buffer=self.buffer;var pos=0;buffer=fixLineBreaks(buffer);while(pos<buffer.length&&buffer[pos]!=='\r'&&buffer[pos]!=='\n'){++pos;}var line=buffer.substr(0,pos);// Advance the buffer early in case we fail below.
if(buffer[pos]==='\r'){++pos;}if(buffer[pos]==='\n'){++pos;}self.buffer=buffer.substr(pos);return line;}// 3.2 WebVTT metadata header syntax
function parseHeader(input){parseOptions(input,function(k,v){switch(k){case'Region':// 3.3 WebVTT region metadata header syntax
// console.log('parse region', v);
// parseRegion(v);
break;}},/:/);}// 5.1 WebVTT file parsing.
try{var line=void 0;if(self.state==='INITIAL'){// We can't start parsing until we have the first line.
if(!/\r\n|\n/.test(self.buffer)){return this;}line=collectNextLine();// strip of UTF-8 BOM if any
// https://en.wikipedia.org/wiki/Byte_order_mark#UTF-8
var m=line.match(/^(ï»¿)?WEBVTT([ \t].*)?$/);if(!m||!m[0]){throw new Error('Malformed WebVTT signature.');}self.state='HEADER';}var alreadyCollectedLine=false;while(self.buffer){// We can't parse a line until we have the full line.
if(!/\r\n|\n/.test(self.buffer)){return this;}if(!alreadyCollectedLine){line=collectNextLine();}else{alreadyCollectedLine=false;}switch(self.state){case'HEADER':// 13-18 - Allow a header (metadata) under the WEBVTT line.
if(/:/.test(line)){parseHeader(line);}else if(!line){// An empty line terminates the header and starts the body (cues).
self.state='ID';}continue;case'NOTE':// Ignore NOTE blocks.
if(!line){self.state='ID';}continue;case'ID':// Check for the start of NOTE blocks.
if(/^NOTE($|[ \t])/.test(line)){self.state='NOTE';break;}// 19-29 - Allow any number of line terminators, then initialize new cue values.
if(!line){continue;}self.cue=new vttcue_1.default(0,0,'');self.state='CUE';// 30-39 - Check if self line contains an optional identifier or timing data.
if(line.indexOf('-->')===-1){self.cue.id=line;continue;}// Process line as start of a cue.
/* falls through */case'CUE':// 40 - Collect cue timings and settings.
try{parseCue(line,self.cue,self.regionList);}catch(e){// In case of an error ignore rest of the cue.
self.cue=null;self.state='BADCUE';continue;}self.state='CUETEXT';continue;case'CUETEXT':var hasSubstring=line.indexOf('-->')!==-1;// 34 - If we have an empty line then report the cue.
// 35 - If we have the special substring '-->' then report the cue,
// but do not collect the line as we need to process the current
// one as a new cue.
if(!line||hasSubstring&&(alreadyCollectedLine=true)){// We are done parsing self cue.
if(self.oncue){self.oncue(self.cue);}self.cue=null;self.state='ID';continue;}if(self.cue.text){self.cue.text+='\n';}self.cue.text+=line;continue;case'BADCUE':// BADCUE
// 54-62 - Collect and discard the remaining cue.
if(!line){self.state='ID';}continue;}}}catch(e){// If we are currently parsing a cue, report what we have.
if(self.state==='CUETEXT'&&self.cue&&self.oncue){self.oncue(self.cue);}self.cue=null;// Enter BADWEBVTT state if header was not parsed correctly otherwise
// another exception occurred so enter BADCUE state.
self.state=self.state==='INITIAL'?'BADWEBVTT':'BADCUE';}return this;},flush:function flush(){var self=this;try{// Finish decoding the stream.
self.buffer+=self.decoder.decode();// Synthesize the end of the current cue or region.
if(self.cue||self.state==='HEADER'){self.buffer+='\n\n';self.parse();}// If we've flushed, parsed, and we're still on the INITIAL state then
// that means we don't have enough of the stream to parse the first
// line.
if(self.state==='INITIAL'){throw new Error('Malformed WebVTT signature.');}}catch(e){throw e;}if(self.onflush){self.onflush();}return this;}};exports.default=VTTParser;/***/},/***/"./src/utils/webvtt-parser.js":/*!************************************!*\
  !*** ./src/utils/webvtt-parser.js ***!
  \************************************//*! no static exports found *//*! ModuleConcatenation bailout: Module is not an ECMAScript module *//***/function srcUtilsWebvttParserJs(module,exports,__webpack_require__){"use strict";/* WEBPACK VAR INJECTION */(function(Number){Object.defineProperty(exports,"__esModule",{value:true});var vttparser_1=__webpack_require__(/*! ./vttparser */"./src/utils/vttparser.js");var id3_1=__webpack_require__(/*! ../demux/id3 */"./src/demux/id3.js");// String.prototype.startsWith is not supported in IE11
var startsWith=function startsWith(inputString,searchString,position){return inputString.substr(position||0,searchString.length)===searchString;};var cueString2millis=function cueString2millis(timeString){var ts=parseInt(timeString.substr(-3));var secs=parseInt(timeString.substr(-6,2));var mins=parseInt(timeString.substr(-9,2));var hours=timeString.length>9?parseInt(timeString.substr(0,timeString.indexOf(':'))):0;if(!Number.isFinite(ts)||!Number.isFinite(secs)||!Number.isFinite(mins)||!Number.isFinite(hours)){return-1;}ts+=1000*secs;ts+=60*1000*mins;ts+=60*60*1000*hours;return ts;};// From https://github.com/darkskyapp/string-hash
var hash=function hash(text){var hash=5381;var i=text.length;while(i){hash=hash*33^text.charCodeAt(--i);}return(hash>>>0).toString();};var calculateOffset=function calculateOffset(vttCCs,cc,presentationTime){var currCC=vttCCs[cc];var prevCC=vttCCs[currCC.prevCC];// This is the first discontinuity or cues have been processed since the last discontinuity
// Offset = current discontinuity time
if(!prevCC||!prevCC.new&&currCC.new){vttCCs.ccOffset=vttCCs.presentationOffset=currCC.start;currCC.new=false;return;}// There have been discontinuities since cues were last parsed.
// Offset = time elapsed
while(prevCC&&prevCC.new){vttCCs.ccOffset+=currCC.start-prevCC.start;currCC.new=false;currCC=prevCC;prevCC=vttCCs[currCC.prevCC];}vttCCs.presentationOffset=presentationTime;};var WebVTTParser={parse:function parse(vttByteArray,syncPTS,vttCCs,cc,callBack,errorCallBack){// Convert byteArray into string, replacing any somewhat exotic linefeeds with "\n", then split on that character.
var re=/\r\n|\n\r|\n|\r/g;// Uint8Array.prototype.reduce is not implemented in IE11
var vttLines=id3_1.utf8ArrayToStr(new Uint8Array(vttByteArray)).trim().replace(re,'\n').split('\n');var cueTime='00:00.000';var mpegTs=0;var localTime=0;var presentationTime=0;var cues=[];var parsingError;var inHeader=true;// let VTTCue = VTTCue || window.TextTrackCue;
// Create parser object using VTTCue with TextTrackCue fallback on certain browsers.
var parser=new vttparser_1.default();parser.oncue=function(cue){// Adjust cue timing; clamp cues to start no earlier than - and drop cues that don't end after - 0 on timeline.
var currCC=vttCCs[cc];var cueOffset=vttCCs.ccOffset;// Update offsets for new discontinuities
if(currCC&&currCC.new){if(localTime!==undefined){// When local time is provided, offset = discontinuity start time - local time
cueOffset=vttCCs.ccOffset=currCC.start;}else{calculateOffset(vttCCs,cc,presentationTime);}}if(presentationTime){// If we have MPEGTS, offset = presentation time + discontinuity offset
cueOffset=presentationTime-vttCCs.presentationOffset;}cue.startTime+=cueOffset-localTime;cue.endTime+=cueOffset-localTime;// Create a unique hash id for a cue based on start/end times and text.
// This helps timeline-controller to avoid showing repeated captions.
cue.id=hash(cue.startTime.toString())+hash(cue.endTime.toString())+hash(cue.text);// Fix encoding of special characters. TODO: Test with all sorts of weird characters.
cue.text=decodeURIComponent(encodeURIComponent(cue.text));if(cue.endTime>0){cues.push(cue);}};parser.onparsingerror=function(e){parsingError=e;};parser.onflush=function(){if(parsingError&&errorCallBack){errorCallBack(parsingError);return;}callBack(cues);};// Go through contents line by line.
vttLines.forEach(function(line){if(inHeader){// Look for X-TIMESTAMP-MAP in header.
if(startsWith(line,'X-TIMESTAMP-MAP=')){// Once found, no more are allowed anyway, so stop searching.
inHeader=false;// Extract LOCAL and MPEGTS.
line.substr(16).split(',').forEach(function(timestamp){if(startsWith(timestamp,'LOCAL:')){cueTime=timestamp.substr(6);}else if(startsWith(timestamp,'MPEGTS:')){mpegTs=parseInt(timestamp.substr(7));}});try{// Calculate subtitle offset in milliseconds.
if(syncPTS+(vttCCs[cc].start*90000||0)<0){syncPTS+=8589934592;}// Adjust MPEGTS by sync PTS.
mpegTs-=syncPTS;// Convert cue time to seconds
localTime=cueString2millis(cueTime)/1000;// Convert MPEGTS to seconds from 90kHz.
presentationTime=mpegTs/90000;if(localTime===-1){parsingError=new Error("Malformed X-TIMESTAMP-MAP: "+line);}}catch(e){parsingError=new Error("Malformed X-TIMESTAMP-MAP: "+line);}// Return without parsing X-TIMESTAMP-MAP line.
return;}else if(line===''){inHeader=false;}}// Parse line by default.
parser.parse(line+'\n');});parser.flush();}};exports.default=WebVTTParser;/* WEBPACK VAR INJECTION */}).call(this,__webpack_require__(/*! ./src/polyfills/number */"./src/polyfills/number.js")["Number"]);/***/},/***/"./src/utils/xhr-loader.js":/*!*********************************!*\
  !*** ./src/utils/xhr-loader.js ***!
  \*********************************//*! no static exports found *//*! ModuleConcatenation bailout: Module is not an ECMAScript module *//***/function srcUtilsXhrLoaderJs(module,exports,__webpack_require__){"use strict";/**
 * XHR based logger
*/Object.defineProperty(exports,"__esModule",{value:true});var logger_1=__webpack_require__(/*! ../utils/logger */"./src/utils/logger.js");var performance=window.performance,XMLHttpRequest=window.XMLHttpRequest;var XhrLoader=/** @class */function(){function XhrLoader(config){if(config&&config.xhrSetup){this.xhrSetup=config.xhrSetup;}}XhrLoader.prototype.destroy=function(){this.abort();this.loader=null;};XhrLoader.prototype.abort=function(){var loader=this.loader;if(loader&&loader.readyState!==4){this.stats.aborted=true;loader.abort();}window.clearTimeout(this.requestTimeout);this.requestTimeout=null;window.clearTimeout(this.retryTimeout);this.retryTimeout=null;};XhrLoader.prototype.load=function(context,config,callbacks){this.context=context;this.config=config;this.callbacks=callbacks;this.stats={trequest:performance.now(),retry:0};this.retryDelay=config.retryDelay;this.loadInternal();};XhrLoader.prototype.loadInternal=function(){var xhr,context=this.context;xhr=this.loader=new XMLHttpRequest();var stats=this.stats;stats.tfirst=0;stats.loaded=0;var xhrSetup=this.xhrSetup;try{if(xhrSetup){try{xhrSetup(xhr,context.url);}catch(e){// fix xhrSetup: (xhr, url) => {xhr.setRequestHeader("Content-Language", "test");}
// not working, as xhr.setRequestHeader expects xhr.readyState === OPEN
xhr.open('GET',context.url,true);xhrSetup(xhr,context.url);}}if(!xhr.readyState){xhr.open('GET',context.url,true);}}catch(e){// IE11 throws an exception on xhr.open if attempting to access an HTTP resource over HTTPS
this.callbacks.onError({code:xhr.status,text:e.message},context,xhr);return;}if(context.rangeEnd){xhr.setRequestHeader('Range','bytes='+context.rangeStart+'-'+(context.rangeEnd-1));}xhr.onreadystatechange=this.readystatechange.bind(this);xhr.onprogress=this.loadprogress.bind(this);xhr.responseType=context.responseType;// setup timeout before we perform request
this.requestTimeout=window.setTimeout(this.loadtimeout.bind(this),this.config.timeout);xhr.send();};XhrLoader.prototype.readystatechange=function(event){var xhr=event.currentTarget,readyState=xhr.readyState,stats=this.stats,context=this.context,config=this.config;// don't proceed if xhr has been aborted
if(stats.aborted){return;}// >= HEADERS_RECEIVED
if(readyState>=2){// clear xhr timeout and rearm it if readyState less than 4
window.clearTimeout(this.requestTimeout);if(stats.tfirst===0){stats.tfirst=Math.max(performance.now(),stats.trequest);}if(readyState===4){var status_1=xhr.status;// http status between 200 to 299 are all successful
if(status_1>=200&&status_1<300){stats.tload=Math.max(stats.tfirst,performance.now());var data=void 0,len=void 0;if(context.responseType==='arraybuffer'){data=xhr.response;len=data.byteLength;}else{data=xhr.responseText;len=data.length;}stats.loaded=stats.total=len;var response={url:xhr.responseURL,data:data};this.callbacks.onSuccess(response,stats,context,xhr);}else{// if max nb of retries reached or if http status between 400 and 499 (such error cannot be recovered, retrying is useless), return error
if(stats.retry>=config.maxRetry||status_1>=400&&status_1<499){logger_1.logger.error(status_1+" while loading "+context.url);this.callbacks.onError({code:status_1,text:xhr.statusText},context,xhr);}else{// retry
logger_1.logger.warn(status_1+" while loading "+context.url+", retrying in "+this.retryDelay+"...");// aborts and resets internal state
this.destroy();// schedule retry
this.retryTimeout=window.setTimeout(this.loadInternal.bind(this),this.retryDelay);// set exponential backoff
this.retryDelay=Math.min(2*this.retryDelay,config.maxRetryDelay);stats.retry++;}}}else{// readyState >= 2 AND readyState !==4 (readyState = HEADERS_RECEIVED || LOADING) rearm timeout as xhr not finished yet
this.requestTimeout=window.setTimeout(this.loadtimeout.bind(this),config.timeout);}}};XhrLoader.prototype.loadtimeout=function(){logger_1.logger.warn("timeout while loading "+this.context.url);this.callbacks.onTimeout(this.stats,this.context,null);};XhrLoader.prototype.loadprogress=function(event){var xhr=event.currentTarget,stats=this.stats;stats.loaded=event.loaded;if(event.lengthComputable){stats.total=event.total;}var onProgress=this.callbacks.onProgress;if(onProgress){// third arg is to provide on progress data
onProgress(stats,this.context,null,xhr);}};return XhrLoader;}();exports.default=XhrLoader;/***/}/******/})["default"]);});//# sourceMappingURL=hls.js.map

/***/ }),

/***/ "XYJE":
/***/ (function(module, exports, __webpack_require__) {

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

!function (e, t) {
   true ? t(exports) : "function" == typeof define && define.amd ? define(["exports"], t) : t(e.reduxLogger = e.reduxLogger || {});
}(this, function (e) {
  "use strict";
  function t(e, t) {
    e.super_ = t, e.prototype = Object.create(t.prototype, { constructor: { value: e, enumerable: !1, writable: !0, configurable: !0 } });
  }function r(e, t) {
    Object.defineProperty(this, "kind", { value: e, enumerable: !0 }), t && t.length && Object.defineProperty(this, "path", { value: t, enumerable: !0 });
  }function n(e, t, r) {
    n.super_.call(this, "E", e), Object.defineProperty(this, "lhs", { value: t, enumerable: !0 }), Object.defineProperty(this, "rhs", { value: r, enumerable: !0 });
  }function o(e, t) {
    o.super_.call(this, "N", e), Object.defineProperty(this, "rhs", { value: t, enumerable: !0 });
  }function i(e, t) {
    i.super_.call(this, "D", e), Object.defineProperty(this, "lhs", { value: t, enumerable: !0 });
  }function a(e, t, r) {
    a.super_.call(this, "A", e), Object.defineProperty(this, "index", { value: t, enumerable: !0 }), Object.defineProperty(this, "item", { value: r, enumerable: !0 });
  }function f(e, t, r) {
    var n = e.slice((r || t) + 1 || e.length);return e.length = t < 0 ? e.length + t : t, e.push.apply(e, n), e;
  }function u(e) {
    var t = "undefined" == typeof e ? "undefined" : N(e);return "object" !== t ? t : e === Math ? "math" : null === e ? "null" : Array.isArray(e) ? "array" : "[object Date]" === Object.prototype.toString.call(e) ? "date" : "function" == typeof e.toString && /^\/.*\//.test(e.toString()) ? "regexp" : "object";
  }function l(e, t, r, c, s, d, p) {
    s = s || [], p = p || [];var g = s.slice(0);if ("undefined" != typeof d) {
      if (c) {
        if ("function" == typeof c && c(g, d)) return;if ("object" === ("undefined" == typeof c ? "undefined" : N(c))) {
          if (c.prefilter && c.prefilter(g, d)) return;if (c.normalize) {
            var h = c.normalize(g, d, e, t);h && (e = h[0], t = h[1]);
          }
        }
      }g.push(d);
    }"regexp" === u(e) && "regexp" === u(t) && (e = e.toString(), t = t.toString());var y = "undefined" == typeof e ? "undefined" : N(e),
        v = "undefined" == typeof t ? "undefined" : N(t),
        b = "undefined" !== y || p && p[p.length - 1].lhs && p[p.length - 1].lhs.hasOwnProperty(d),
        m = "undefined" !== v || p && p[p.length - 1].rhs && p[p.length - 1].rhs.hasOwnProperty(d);if (!b && m) r(new o(g, t));else if (!m && b) r(new i(g, e));else if (u(e) !== u(t)) r(new n(g, e, t));else if ("date" === u(e) && e - t !== 0) r(new n(g, e, t));else if ("object" === y && null !== e && null !== t) {
      if (p.filter(function (t) {
        return t.lhs === e;
      }).length) e !== t && r(new n(g, e, t));else {
        if (p.push({ lhs: e, rhs: t }), Array.isArray(e)) {
          var w;e.length;for (w = 0; w < e.length; w++) {
            w >= t.length ? r(new a(g, w, new i(void 0, e[w]))) : l(e[w], t[w], r, c, g, w, p);
          }for (; w < t.length;) {
            r(new a(g, w, new o(void 0, t[w++])));
          }
        } else {
          var x = Object.keys(e),
              S = Object.keys(t);x.forEach(function (n, o) {
            var i = S.indexOf(n);i >= 0 ? (l(e[n], t[n], r, c, g, n, p), S = f(S, i)) : l(e[n], void 0, r, c, g, n, p);
          }), S.forEach(function (e) {
            l(void 0, t[e], r, c, g, e, p);
          });
        }p.length = p.length - 1;
      }
    } else e !== t && ("number" === y && isNaN(e) && isNaN(t) || r(new n(g, e, t)));
  }function c(e, t, r, n) {
    return n = n || [], l(e, t, function (e) {
      e && n.push(e);
    }, r), n.length ? n : void 0;
  }function s(e, t, r) {
    if (r.path && r.path.length) {
      var n,
          o = e[t],
          i = r.path.length - 1;for (n = 0; n < i; n++) {
        o = o[r.path[n]];
      }switch (r.kind) {case "A":
          s(o[r.path[n]], r.index, r.item);break;case "D":
          delete o[r.path[n]];break;case "E":case "N":
          o[r.path[n]] = r.rhs;}
    } else switch (r.kind) {case "A":
        s(e[t], r.index, r.item);break;case "D":
        e = f(e, t);break;case "E":case "N":
        e[t] = r.rhs;}return e;
  }function d(e, t, r) {
    if (e && t && r && r.kind) {
      for (var n = e, o = -1, i = r.path ? r.path.length - 1 : 0; ++o < i;) {
        "undefined" == typeof n[r.path[o]] && (n[r.path[o]] = "number" == typeof r.path[o] ? [] : {}), n = n[r.path[o]];
      }switch (r.kind) {case "A":
          s(r.path ? n[r.path[o]] : n, r.index, r.item);break;case "D":
          delete n[r.path[o]];break;case "E":case "N":
          n[r.path[o]] = r.rhs;}
    }
  }function p(e, t, r) {
    if (r.path && r.path.length) {
      var n,
          o = e[t],
          i = r.path.length - 1;for (n = 0; n < i; n++) {
        o = o[r.path[n]];
      }switch (r.kind) {case "A":
          p(o[r.path[n]], r.index, r.item);break;case "D":
          o[r.path[n]] = r.lhs;break;case "E":
          o[r.path[n]] = r.lhs;break;case "N":
          delete o[r.path[n]];}
    } else switch (r.kind) {case "A":
        p(e[t], r.index, r.item);break;case "D":
        e[t] = r.lhs;break;case "E":
        e[t] = r.lhs;break;case "N":
        e = f(e, t);}return e;
  }function g(e, t, r) {
    if (e && t && r && r.kind) {
      var n,
          o,
          i = e;for (o = r.path.length - 1, n = 0; n < o; n++) {
        "undefined" == typeof i[r.path[n]] && (i[r.path[n]] = {}), i = i[r.path[n]];
      }switch (r.kind) {case "A":
          p(i[r.path[n]], r.index, r.item);break;case "D":
          i[r.path[n]] = r.lhs;break;case "E":
          i[r.path[n]] = r.lhs;break;case "N":
          delete i[r.path[n]];}
    }
  }function h(e, t, r) {
    if (e && t) {
      var n = function n(_n) {
        r && !r(e, t, _n) || d(e, t, _n);
      };l(e, t, n);
    }
  }function y(e) {
    return "color: " + F[e].color + "; font-weight: bold";
  }function v(e) {
    var t = e.kind,
        r = e.path,
        n = e.lhs,
        o = e.rhs,
        i = e.index,
        a = e.item;switch (t) {case "E":
        return [r.join("."), n, "→", o];case "N":
        return [r.join("."), o];case "D":
        return [r.join(".")];case "A":
        return [r.join(".") + "[" + i + "]", a];default:
        return [];}
  }function b(e, t, r, n) {
    var o = c(e, t);try {
      n ? r.groupCollapsed("diff") : r.group("diff");
    } catch (e) {
      r.log("diff");
    }o ? o.forEach(function (e) {
      var t = e.kind,
          n = v(e);r.log.apply(r, ["%c " + F[t].text, y(t)].concat(P(n)));
    }) : r.log("—— no diff ——");try {
      r.groupEnd();
    } catch (e) {
      r.log("—— diff end —— ");
    }
  }function m(e, t, r, n) {
    switch ("undefined" == typeof e ? "undefined" : N(e)) {case "object":
        return "function" == typeof e[n] ? e[n].apply(e, P(r)) : e[n];case "function":
        return e(t);default:
        return e;}
  }function w(e) {
    var t = e.timestamp,
        r = e.duration;return function (e, n, o) {
      var i = ["action"];return i.push("%c" + String(e.type)), t && i.push("%c@ " + n), r && i.push("%c(in " + o.toFixed(2) + " ms)"), i.join(" ");
    };
  }function x(e, t) {
    var r = t.logger,
        n = t.actionTransformer,
        o = t.titleFormatter,
        i = void 0 === o ? w(t) : o,
        a = t.collapsed,
        f = t.colors,
        u = t.level,
        l = t.diff,
        c = "undefined" == typeof t.titleFormatter;e.forEach(function (o, s) {
      var d = o.started,
          p = o.startedTime,
          g = o.action,
          h = o.prevState,
          y = o.error,
          v = o.took,
          w = o.nextState,
          x = e[s + 1];x && (w = x.prevState, v = x.started - d);var S = n(g),
          k = "function" == typeof a ? a(function () {
        return w;
      }, g, o) : a,
          j = D(p),
          E = f.title ? "color: " + f.title(S) + ";" : "",
          A = ["color: gray; font-weight: lighter;"];A.push(E), t.timestamp && A.push("color: gray; font-weight: lighter;"), t.duration && A.push("color: gray; font-weight: lighter;");var O = i(S, j, v);try {
        k ? f.title && c ? r.groupCollapsed.apply(r, ["%c " + O].concat(A)) : r.groupCollapsed(O) : f.title && c ? r.group.apply(r, ["%c " + O].concat(A)) : r.group(O);
      } catch (e) {
        r.log(O);
      }var N = m(u, S, [h], "prevState"),
          P = m(u, S, [S], "action"),
          C = m(u, S, [y, h], "error"),
          F = m(u, S, [w], "nextState");if (N) if (f.prevState) {
        var L = "color: " + f.prevState(h) + "; font-weight: bold";r[N]("%c prev state", L, h);
      } else r[N]("prev state", h);if (P) if (f.action) {
        var T = "color: " + f.action(S) + "; font-weight: bold";r[P]("%c action    ", T, S);
      } else r[P]("action    ", S);if (y && C) if (f.error) {
        var M = "color: " + f.error(y, h) + "; font-weight: bold;";r[C]("%c error     ", M, y);
      } else r[C]("error     ", y);if (F) if (f.nextState) {
        var _ = "color: " + f.nextState(w) + "; font-weight: bold";r[F]("%c next state", _, w);
      } else r[F]("next state", w);l && b(h, w, r, k);try {
        r.groupEnd();
      } catch (e) {
        r.log("—— log end ——");
      }
    });
  }function S() {
    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
        t = _extends({}, L, e),
        r = t.logger,
        n = t.stateTransformer,
        o = t.errorTransformer,
        i = t.predicate,
        a = t.logErrors,
        f = t.diffPredicate;if ("undefined" == typeof r) return function () {
      return function (e) {
        return function (t) {
          return e(t);
        };
      };
    };if (e.getState && e.dispatch) return console.error("[redux-logger] redux-logger not installed. Make sure to pass logger instance as middleware:\n// Logger with default options\nimport { logger } from 'redux-logger'\nconst store = createStore(\n  reducer,\n  applyMiddleware(logger)\n)\n// Or you can create your own logger with custom options http://bit.ly/redux-logger-options\nimport createLogger from 'redux-logger'\nconst logger = createLogger({\n  // ...options\n});\nconst store = createStore(\n  reducer,\n  applyMiddleware(logger)\n)\n"), function () {
      return function (e) {
        return function (t) {
          return e(t);
        };
      };
    };var u = [];return function (e) {
      var r = e.getState;return function (e) {
        return function (l) {
          if ("function" == typeof i && !i(r, l)) return e(l);var c = {};u.push(c), c.started = O.now(), c.startedTime = new Date(), c.prevState = n(r()), c.action = l;var s = void 0;if (a) try {
            s = e(l);
          } catch (e) {
            c.error = o(e);
          } else s = e(l);c.took = O.now() - c.started, c.nextState = n(r());var d = t.diff && "function" == typeof f ? f(r, l) : t.diff;if (x(u, _extends({}, t, { diff: d })), u.length = 0, c.error) throw c.error;return s;
        };
      };
    };
  }var k,
      j,
      E = function E(e, t) {
    return new Array(t + 1).join(e);
  },
      A = function A(e, t) {
    return E("0", t - e.toString().length) + e;
  },
      D = function D(e) {
    return A(e.getHours(), 2) + ":" + A(e.getMinutes(), 2) + ":" + A(e.getSeconds(), 2) + "." + A(e.getMilliseconds(), 3);
  },
      O = "undefined" != typeof performance && null !== performance && "function" == typeof performance.now ? performance : Date,
      N = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) {
    return typeof e;
  } : function (e) {
    return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
  },
      P = function P(e) {
    if (Array.isArray(e)) {
      for (var t = 0, r = Array(e.length); t < e.length; t++) {
        r[t] = e[t];
      }return r;
    }return Array.from(e);
  },
      C = [];k = "object" === ("undefined" == typeof global ? "undefined" : N(global)) && global ? global : "undefined" != typeof window ? window : {}, j = k.DeepDiff, j && C.push(function () {
    "undefined" != typeof j && k.DeepDiff === c && (k.DeepDiff = j, j = void 0);
  }), t(n, r), t(o, r), t(i, r), t(a, r), Object.defineProperties(c, { diff: { value: c, enumerable: !0 }, observableDiff: { value: l, enumerable: !0 }, applyDiff: { value: h, enumerable: !0 }, applyChange: { value: d, enumerable: !0 }, revertChange: { value: g, enumerable: !0 }, isConflict: { value: function value() {
        return "undefined" != typeof j;
      }, enumerable: !0 }, noConflict: { value: function value() {
        return C && (C.forEach(function (e) {
          e();
        }), C = null), c;
      }, enumerable: !0 } });var F = { E: { color: "#2196F3", text: "CHANGED:" }, N: { color: "#4CAF50", text: "ADDED:" }, D: { color: "#F44336", text: "DELETED:" }, A: { color: "#2196F3", text: "ARRAY:" } },
      L = { level: "log", logger: console, logErrors: !0, collapsed: void 0, predicate: void 0, duration: !1, timestamp: !0, stateTransformer: function stateTransformer(e) {
      return e;
    }, actionTransformer: function actionTransformer(e) {
      return e;
    }, errorTransformer: function errorTransformer(e) {
      return e;
    }, colors: { title: function title() {
        return "inherit";
      }, prevState: function prevState() {
        return "#9E9E9E";
      }, action: function action() {
        return "#03A9F4";
      }, nextState: function nextState() {
        return "#4CAF50";
      }, error: function error() {
        return "#F20404";
      } }, diff: !1, diffPredicate: void 0, transformer: void 0 },
      T = function T() {
    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
        t = e.dispatch,
        r = e.getState;return "function" == typeof t || "function" == typeof r ? S()({ dispatch: t, getState: r }) : void console.error("\n[redux-logger v3] BREAKING CHANGE\n[redux-logger v3] Since 3.0.0 redux-logger exports by default logger with default settings.\n[redux-logger v3] Change\n[redux-logger v3] import createLogger from 'redux-logger'\n[redux-logger v3] to\n[redux-logger v3] import { createLogger } from 'redux-logger'\n");
  };e.defaults = L, e.createLogger = S, e.logger = T, e.default = T, Object.defineProperty(e, "__esModule", { value: !0 });
});

/***/ }),

/***/ "juYr":
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * jQuery JavaScript Library v3.4.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2019-05-01T21:04Z
 */
(function (global, factory) {

	"use strict";

	if (typeof module === "object" && typeof module.exports === "object") {

		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ? factory(global, true) : function (w) {
			if (!w.document) {
				throw new Error("jQuery requires a window with a document");
			}
			return factory(w);
		};
	} else {
		factory(global);
	}

	// Pass this if window is not defined yet
})(typeof window !== "undefined" ? window : this, function (window, noGlobal) {

	// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
	// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
	// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
	// enough that all such attempts are guarded in a try block.
	"use strict";

	var arr = [];

	var document = window.document;

	var getProto = Object.getPrototypeOf;

	var _slice = arr.slice;

	var concat = arr.concat;

	var push = arr.push;

	var indexOf = arr.indexOf;

	var class2type = {};

	var toString = class2type.toString;

	var hasOwn = class2type.hasOwnProperty;

	var fnToString = hasOwn.toString;

	var ObjectFunctionString = fnToString.call(Object);

	var support = {};

	var isFunction = function isFunction(obj) {

		// Support: Chrome <=57, Firefox <=52
		// In some browsers, typeof returns "function" for HTML <object> elements
		// (i.e., `typeof document.createElement( "object" ) === "function"`).
		// We don't want to classify *any* DOM node as a function.
		return typeof obj === "function" && typeof obj.nodeType !== "number";
	};

	var isWindow = function isWindow(obj) {
		return obj != null && obj === obj.window;
	};

	var preservedScriptAttributes = {
		type: true,
		src: true,
		nonce: true,
		noModule: true
	};

	function DOMEval(code, node, doc) {
		doc = doc || document;

		var i,
		    val,
		    script = doc.createElement("script");

		script.text = code;
		if (node) {
			for (i in preservedScriptAttributes) {

				// Support: Firefox 64+, Edge 18+
				// Some browsers don't support the "nonce" property on scripts.
				// On the other hand, just using `getAttribute` is not enough as
				// the `nonce` attribute is reset to an empty string whenever it
				// becomes browsing-context connected.
				// See https://github.com/whatwg/html/issues/2369
				// See https://html.spec.whatwg.org/#nonce-attributes
				// The `node.getAttribute` check was added for the sake of
				// `jQuery.globalEval` so that it can fake a nonce-containing node
				// via an object.
				val = node[i] || node.getAttribute && node.getAttribute(i);
				if (val) {
					script.setAttribute(i, val);
				}
			}
		}
		doc.head.appendChild(script).parentNode.removeChild(script);
	}

	function toType(obj) {
		if (obj == null) {
			return obj + "";
		}

		// Support: Android <=2.3 only (functionish RegExp)
		return typeof obj === "object" || typeof obj === "function" ? class2type[toString.call(obj)] || "object" : typeof obj;
	}
	/* global Symbol */
	// Defining this global in .eslintrc.json would create a danger of using the global
	// unguarded in another place, it seems safer to define global only for this module


	var version = "3.4.1",


	// Define a local copy of jQuery
	jQuery = function jQuery(selector, context) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init(selector, context);
	},


	// Support: Android <=4.0 only
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;

	jQuery.fn = jQuery.prototype = {

		// The current version of jQuery being used
		jquery: version,

		constructor: jQuery,

		// The default length of a jQuery object is 0
		length: 0,

		toArray: function toArray() {
			return _slice.call(this);
		},

		// Get the Nth element in the matched element set OR
		// Get the whole matched element set as a clean array
		get: function get(num) {

			// Return all the elements in a clean array
			if (num == null) {
				return _slice.call(this);
			}

			// Return just the one element from the set
			return num < 0 ? this[num + this.length] : this[num];
		},

		// Take an array of elements and push it onto the stack
		// (returning the new matched element set)
		pushStack: function pushStack(elems) {

			// Build a new jQuery matched element set
			var ret = jQuery.merge(this.constructor(), elems);

			// Add the old object onto the stack (as a reference)
			ret.prevObject = this;

			// Return the newly-formed element set
			return ret;
		},

		// Execute a callback for every element in the matched set.
		each: function each(callback) {
			return jQuery.each(this, callback);
		},

		map: function map(callback) {
			return this.pushStack(jQuery.map(this, function (elem, i) {
				return callback.call(elem, i, elem);
			}));
		},

		slice: function slice() {
			return this.pushStack(_slice.apply(this, arguments));
		},

		first: function first() {
			return this.eq(0);
		},

		last: function last() {
			return this.eq(-1);
		},

		eq: function eq(i) {
			var len = this.length,
			    j = +i + (i < 0 ? len : 0);
			return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
		},

		end: function end() {
			return this.prevObject || this.constructor();
		},

		// For internal use only.
		// Behaves like an Array's method, not like a jQuery method.
		push: push,
		sort: arr.sort,
		splice: arr.splice
	};

	jQuery.extend = jQuery.fn.extend = function () {
		var options,
		    name,
		    src,
		    copy,
		    copyIsArray,
		    clone,
		    target = arguments[0] || {},
		    i = 1,
		    length = arguments.length,
		    deep = false;

		// Handle a deep copy situation
		if (typeof target === "boolean") {
			deep = target;

			// Skip the boolean and the target
			target = arguments[i] || {};
			i++;
		}

		// Handle case when target is a string or something (possible in deep copy)
		if (typeof target !== "object" && !isFunction(target)) {
			target = {};
		}

		// Extend jQuery itself if only one argument is passed
		if (i === length) {
			target = this;
			i--;
		}

		for (; i < length; i++) {

			// Only deal with non-null/undefined values
			if ((options = arguments[i]) != null) {

				// Extend the base object
				for (name in options) {
					copy = options[name];

					// Prevent Object.prototype pollution
					// Prevent never-ending loop
					if (name === "__proto__" || target === copy) {
						continue;
					}

					// Recurse if we're merging plain objects or arrays
					if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {
						src = target[name];

						// Ensure proper type for the source value
						if (copyIsArray && !Array.isArray(src)) {
							clone = [];
						} else if (!copyIsArray && !jQuery.isPlainObject(src)) {
							clone = {};
						} else {
							clone = src;
						}
						copyIsArray = false;

						// Never move original objects, clone them
						target[name] = jQuery.extend(deep, clone, copy);

						// Don't bring in undefined values
					} else if (copy !== undefined) {
						target[name] = copy;
					}
				}
			}
		}

		// Return the modified object
		return target;
	};

	jQuery.extend({

		// Unique for each copy of jQuery on the page
		expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""),

		// Assume jQuery is ready without the ready module
		isReady: true,

		error: function error(msg) {
			throw new Error(msg);
		},

		noop: function noop() {},

		isPlainObject: function isPlainObject(obj) {
			var proto, Ctor;

			// Detect obvious negatives
			// Use toString instead of jQuery.type to catch host objects
			if (!obj || toString.call(obj) !== "[object Object]") {
				return false;
			}

			proto = getProto(obj);

			// Objects with no prototype (e.g., `Object.create( null )`) are plain
			if (!proto) {
				return true;
			}

			// Objects with prototype are plain iff they were constructed by a global Object function
			Ctor = hasOwn.call(proto, "constructor") && proto.constructor;
			return typeof Ctor === "function" && fnToString.call(Ctor) === ObjectFunctionString;
		},

		isEmptyObject: function isEmptyObject(obj) {
			var name;

			for (name in obj) {
				return false;
			}
			return true;
		},

		// Evaluates a script in a global context
		globalEval: function globalEval(code, options) {
			DOMEval(code, { nonce: options && options.nonce });
		},

		each: function each(obj, callback) {
			var length,
			    i = 0;

			if (isArrayLike(obj)) {
				length = obj.length;
				for (; i < length; i++) {
					if (callback.call(obj[i], i, obj[i]) === false) {
						break;
					}
				}
			} else {
				for (i in obj) {
					if (callback.call(obj[i], i, obj[i]) === false) {
						break;
					}
				}
			}

			return obj;
		},

		// Support: Android <=4.0 only
		trim: function trim(text) {
			return text == null ? "" : (text + "").replace(rtrim, "");
		},

		// results is for internal usage only
		makeArray: function makeArray(arr, results) {
			var ret = results || [];

			if (arr != null) {
				if (isArrayLike(Object(arr))) {
					jQuery.merge(ret, typeof arr === "string" ? [arr] : arr);
				} else {
					push.call(ret, arr);
				}
			}

			return ret;
		},

		inArray: function inArray(elem, arr, i) {
			return arr == null ? -1 : indexOf.call(arr, elem, i);
		},

		// Support: Android <=4.0 only, PhantomJS 1 only
		// push.apply(_, arraylike) throws on ancient WebKit
		merge: function merge(first, second) {
			var len = +second.length,
			    j = 0,
			    i = first.length;

			for (; j < len; j++) {
				first[i++] = second[j];
			}

			first.length = i;

			return first;
		},

		grep: function grep(elems, callback, invert) {
			var callbackInverse,
			    matches = [],
			    i = 0,
			    length = elems.length,
			    callbackExpect = !invert;

			// Go through the array, only saving the items
			// that pass the validator function
			for (; i < length; i++) {
				callbackInverse = !callback(elems[i], i);
				if (callbackInverse !== callbackExpect) {
					matches.push(elems[i]);
				}
			}

			return matches;
		},

		// arg is for internal usage only
		map: function map(elems, callback, arg) {
			var length,
			    value,
			    i = 0,
			    ret = [];

			// Go through the array, translating each of the items to their new values
			if (isArrayLike(elems)) {
				length = elems.length;
				for (; i < length; i++) {
					value = callback(elems[i], i, arg);

					if (value != null) {
						ret.push(value);
					}
				}

				// Go through every key on the object,
			} else {
				for (i in elems) {
					value = callback(elems[i], i, arg);

					if (value != null) {
						ret.push(value);
					}
				}
			}

			// Flatten any nested arrays
			return concat.apply([], ret);
		},

		// A global GUID counter for objects
		guid: 1,

		// jQuery.support is not used in Core but other projects attach their
		// properties to it so it needs to exist.
		support: support
	});

	if (typeof Symbol === "function") {
		jQuery.fn[Symbol.iterator] = arr[Symbol.iterator];
	}

	// Populate the class2type map
	jQuery.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), function (i, name) {
		class2type["[object " + name + "]"] = name.toLowerCase();
	});

	function isArrayLike(obj) {

		// Support: real iOS 8.2 only (not reproducible in simulator)
		// `in` check used to prevent JIT error (gh-2145)
		// hasOwn isn't used here due to false negatives
		// regarding Nodelist length in IE
		var length = !!obj && "length" in obj && obj.length,
		    type = toType(obj);

		if (isFunction(obj) || isWindow(obj)) {
			return false;
		}

		return type === "array" || length === 0 || typeof length === "number" && length > 0 && length - 1 in obj;
	}
	var Sizzle =
	/*!
  * Sizzle CSS Selector Engine v2.3.4
  * https://sizzlejs.com/
  *
  * Copyright JS Foundation and other contributors
  * Released under the MIT license
  * https://js.foundation/
  *
  * Date: 2019-04-08
  */
	function (window) {

		var i,
		    support,
		    Expr,
		    getText,
		    isXML,
		    tokenize,
		    compile,
		    select,
		    outermostContext,
		    sortInput,
		    hasDuplicate,


		// Local document vars
		setDocument,
		    document,
		    docElem,
		    documentIsHTML,
		    rbuggyQSA,
		    rbuggyMatches,
		    matches,
		    contains,


		// Instance-specific data
		expando = "sizzle" + 1 * new Date(),
		    preferredDoc = window.document,
		    dirruns = 0,
		    done = 0,
		    classCache = createCache(),
		    tokenCache = createCache(),
		    compilerCache = createCache(),
		    nonnativeSelectorCache = createCache(),
		    sortOrder = function sortOrder(a, b) {
			if (a === b) {
				hasDuplicate = true;
			}
			return 0;
		},


		// Instance methods
		hasOwn = {}.hasOwnProperty,
		    arr = [],
		    pop = arr.pop,
		    push_native = arr.push,
		    push = arr.push,
		    slice = arr.slice,

		// Use a stripped-down indexOf as it's faster than native
		// https://jsperf.com/thor-indexof-vs-for/5
		indexOf = function indexOf(list, elem) {
			var i = 0,
			    len = list.length;
			for (; i < len; i++) {
				if (list[i] === elem) {
					return i;
				}
			}
			return -1;
		},
		    booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",


		// Regular expressions

		// http://www.w3.org/TR/css3-selectors/#whitespace
		whitespace = "[\\x20\\t\\r\\n\\f]",


		// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
		identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",


		// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
		attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace + "*\\]",
		    pseudos = ":(" + identifier + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" + ")\\)|)",


		// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
		rwhitespace = new RegExp(whitespace + "+", "g"),
		    rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g"),
		    rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"),
		    rcombinators = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"),
		    rdescend = new RegExp(whitespace + "|>"),
		    rpseudo = new RegExp(pseudos),
		    ridentifier = new RegExp("^" + identifier + "$"),
		    matchExpr = {
			"ID": new RegExp("^#(" + identifier + ")"),
			"CLASS": new RegExp("^\\.(" + identifier + ")"),
			"TAG": new RegExp("^(" + identifier + "|[*])"),
			"ATTR": new RegExp("^" + attributes),
			"PSEUDO": new RegExp("^" + pseudos),
			"CHILD": new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i"),
			"bool": new RegExp("^(?:" + booleans + ")$", "i"),
			// For use in libraries implementing .is()
			// We use this for POS matching in `select`
			"needsContext": new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
		},
		    rhtml = /HTML$/i,
		    rinputs = /^(?:input|select|textarea|button)$/i,
		    rheader = /^h\d$/i,
		    rnative = /^[^{]+\{\s*\[native \w/,


		// Easily-parseable/retrievable ID or TAG or CLASS selectors
		rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
		    rsibling = /[+~]/,


		// CSS escapes
		// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
		runescape = new RegExp("\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig"),
		    funescape = function funescape(_, escaped, escapedWhitespace) {
			var high = "0x" + escaped - 0x10000;
			// NaN means non-codepoint
			// Support: Firefox<24
			// Workaround erroneous numeric interpretation of +"0x"
			return high !== high || escapedWhitespace ? escaped : high < 0 ?
			// BMP codepoint
			String.fromCharCode(high + 0x10000) :
			// Supplemental Plane codepoint (surrogate pair)
			String.fromCharCode(high >> 10 | 0xD800, high & 0x3FF | 0xDC00);
		},


		// CSS string/identifier serialization
		// https://drafts.csswg.org/cssom/#common-serializing-idioms
		rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
		    fcssescape = function fcssescape(ch, asCodePoint) {
			if (asCodePoint) {

				// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
				if (ch === "\0") {
					return "\uFFFD";
				}

				// Control characters and (dependent upon position) numbers get escaped as code points
				return ch.slice(0, -1) + "\\" + ch.charCodeAt(ch.length - 1).toString(16) + " ";
			}

			// Other potentially-special ASCII characters get backslash-escaped
			return "\\" + ch;
		},


		// Used for iframes
		// See setDocument()
		// Removing the function wrapper causes a "Permission Denied"
		// error in IE
		unloadHandler = function unloadHandler() {
			setDocument();
		},
		    inDisabledFieldset = addCombinator(function (elem) {
			return elem.disabled === true && elem.nodeName.toLowerCase() === "fieldset";
		}, { dir: "parentNode", next: "legend" });

		// Optimize for push.apply( _, NodeList )
		try {
			push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes);
			// Support: Android<4.0
			// Detect silently failing push.apply
			arr[preferredDoc.childNodes.length].nodeType;
		} catch (e) {
			push = { apply: arr.length ?

				// Leverage slice if possible
				function (target, els) {
					push_native.apply(target, slice.call(els));
				} :

				// Support: IE<9
				// Otherwise append directly
				function (target, els) {
					var j = target.length,
					    i = 0;
					// Can't trust NodeList.length
					while (target[j++] = els[i++]) {}
					target.length = j - 1;
				}
			};
		}

		function Sizzle(selector, context, results, seed) {
			var m,
			    i,
			    elem,
			    nid,
			    match,
			    groups,
			    newSelector,
			    newContext = context && context.ownerDocument,


			// nodeType defaults to 9, since context defaults to document
			nodeType = context ? context.nodeType : 9;

			results = results || [];

			// Return early from calls with invalid selector or context
			if (typeof selector !== "string" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {

				return results;
			}

			// Try to shortcut find operations (as opposed to filters) in HTML documents
			if (!seed) {

				if ((context ? context.ownerDocument || context : preferredDoc) !== document) {
					setDocument(context);
				}
				context = context || document;

				if (documentIsHTML) {

					// If the selector is sufficiently simple, try using a "get*By*" DOM method
					// (excepting DocumentFragment context, where the methods don't exist)
					if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {

						// ID selector
						if (m = match[1]) {

							// Document context
							if (nodeType === 9) {
								if (elem = context.getElementById(m)) {

									// Support: IE, Opera, Webkit
									// TODO: identify versions
									// getElementById can match elements by name instead of ID
									if (elem.id === m) {
										results.push(elem);
										return results;
									}
								} else {
									return results;
								}

								// Element context
							} else {

								// Support: IE, Opera, Webkit
								// TODO: identify versions
								// getElementById can match elements by name instead of ID
								if (newContext && (elem = newContext.getElementById(m)) && contains(context, elem) && elem.id === m) {

									results.push(elem);
									return results;
								}
							}

							// Type selector
						} else if (match[2]) {
							push.apply(results, context.getElementsByTagName(selector));
							return results;

							// Class selector
						} else if ((m = match[3]) && support.getElementsByClassName && context.getElementsByClassName) {

							push.apply(results, context.getElementsByClassName(m));
							return results;
						}
					}

					// Take advantage of querySelectorAll
					if (support.qsa && !nonnativeSelectorCache[selector + " "] && (!rbuggyQSA || !rbuggyQSA.test(selector)) && (

					// Support: IE 8 only
					// Exclude object elements
					nodeType !== 1 || context.nodeName.toLowerCase() !== "object")) {

						newSelector = selector;
						newContext = context;

						// qSA considers elements outside a scoping root when evaluating child or
						// descendant combinators, which is not what we want.
						// In such cases, we work around the behavior by prefixing every selector in the
						// list with an ID selector referencing the scope context.
						// Thanks to Andrew Dupont for this technique.
						if (nodeType === 1 && rdescend.test(selector)) {

							// Capture the context ID, setting it first if necessary
							if (nid = context.getAttribute("id")) {
								nid = nid.replace(rcssescape, fcssescape);
							} else {
								context.setAttribute("id", nid = expando);
							}

							// Prefix every selector in the list
							groups = tokenize(selector);
							i = groups.length;
							while (i--) {
								groups[i] = "#" + nid + " " + toSelector(groups[i]);
							}
							newSelector = groups.join(",");

							// Expand context for sibling selectors
							newContext = rsibling.test(selector) && testContext(context.parentNode) || context;
						}

						try {
							push.apply(results, newContext.querySelectorAll(newSelector));
							return results;
						} catch (qsaError) {
							nonnativeSelectorCache(selector, true);
						} finally {
							if (nid === expando) {
								context.removeAttribute("id");
							}
						}
					}
				}
			}

			// All others
			return select(selector.replace(rtrim, "$1"), context, results, seed);
		}

		/**
   * Create key-value caches of limited size
   * @returns {function(string, object)} Returns the Object data after storing it on itself with
   *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
   *	deleting the oldest entry
   */
		function createCache() {
			var keys = [];

			function cache(key, value) {
				// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
				if (keys.push(key + " ") > Expr.cacheLength) {
					// Only keep the most recent entries
					delete cache[keys.shift()];
				}
				return cache[key + " "] = value;
			}
			return cache;
		}

		/**
   * Mark a function for special use by Sizzle
   * @param {Function} fn The function to mark
   */
		function markFunction(fn) {
			fn[expando] = true;
			return fn;
		}

		/**
   * Support testing using an element
   * @param {Function} fn Passed the created element and returns a boolean result
   */
		function assert(fn) {
			var el = document.createElement("fieldset");

			try {
				return !!fn(el);
			} catch (e) {
				return false;
			} finally {
				// Remove from its parent by default
				if (el.parentNode) {
					el.parentNode.removeChild(el);
				}
				// release memory in IE
				el = null;
			}
		}

		/**
   * Adds the same handler for all of the specified attrs
   * @param {String} attrs Pipe-separated list of attributes
   * @param {Function} handler The method that will be applied
   */
		function addHandle(attrs, handler) {
			var arr = attrs.split("|"),
			    i = arr.length;

			while (i--) {
				Expr.attrHandle[arr[i]] = handler;
			}
		}

		/**
   * Checks document order of two siblings
   * @param {Element} a
   * @param {Element} b
   * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
   */
		function siblingCheck(a, b) {
			var cur = b && a,
			    diff = cur && a.nodeType === 1 && b.nodeType === 1 && a.sourceIndex - b.sourceIndex;

			// Use IE sourceIndex if available on both nodes
			if (diff) {
				return diff;
			}

			// Check if b follows a
			if (cur) {
				while (cur = cur.nextSibling) {
					if (cur === b) {
						return -1;
					}
				}
			}

			return a ? 1 : -1;
		}

		/**
   * Returns a function to use in pseudos for input types
   * @param {String} type
   */
		function createInputPseudo(type) {
			return function (elem) {
				var name = elem.nodeName.toLowerCase();
				return name === "input" && elem.type === type;
			};
		}

		/**
   * Returns a function to use in pseudos for buttons
   * @param {String} type
   */
		function createButtonPseudo(type) {
			return function (elem) {
				var name = elem.nodeName.toLowerCase();
				return (name === "input" || name === "button") && elem.type === type;
			};
		}

		/**
   * Returns a function to use in pseudos for :enabled/:disabled
   * @param {Boolean} disabled true for :disabled; false for :enabled
   */
		function createDisabledPseudo(disabled) {

			// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
			return function (elem) {

				// Only certain elements can match :enabled or :disabled
				// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
				// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
				if ("form" in elem) {

					// Check for inherited disabledness on relevant non-disabled elements:
					// * listed form-associated elements in a disabled fieldset
					//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
					//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
					// * option elements in a disabled optgroup
					//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
					// All such elements have a "form" property.
					if (elem.parentNode && elem.disabled === false) {

						// Option elements defer to a parent optgroup if present
						if ("label" in elem) {
							if ("label" in elem.parentNode) {
								return elem.parentNode.disabled === disabled;
							} else {
								return elem.disabled === disabled;
							}
						}

						// Support: IE 6 - 11
						// Use the isDisabled shortcut property to check for disabled fieldset ancestors
						return elem.isDisabled === disabled ||

						// Where there is no isDisabled, check manually
						/* jshint -W018 */
						elem.isDisabled !== !disabled && inDisabledFieldset(elem) === disabled;
					}

					return elem.disabled === disabled;

					// Try to winnow out elements that can't be disabled before trusting the disabled property.
					// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
					// even exist on them, let alone have a boolean value.
				} else if ("label" in elem) {
					return elem.disabled === disabled;
				}

				// Remaining elements are neither :enabled nor :disabled
				return false;
			};
		}

		/**
   * Returns a function to use in pseudos for positionals
   * @param {Function} fn
   */
		function createPositionalPseudo(fn) {
			return markFunction(function (argument) {
				argument = +argument;
				return markFunction(function (seed, matches) {
					var j,
					    matchIndexes = fn([], seed.length, argument),
					    i = matchIndexes.length;

					// Match elements found at the specified indexes
					while (i--) {
						if (seed[j = matchIndexes[i]]) {
							seed[j] = !(matches[j] = seed[j]);
						}
					}
				});
			});
		}

		/**
   * Checks a node for validity as a Sizzle context
   * @param {Element|Object=} context
   * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
   */
		function testContext(context) {
			return context && typeof context.getElementsByTagName !== "undefined" && context;
		}

		// Expose support vars for convenience
		support = Sizzle.support = {};

		/**
   * Detects XML nodes
   * @param {Element|Object} elem An element or a document
   * @returns {Boolean} True iff elem is a non-HTML XML node
   */
		isXML = Sizzle.isXML = function (elem) {
			var namespace = elem.namespaceURI,
			    docElem = (elem.ownerDocument || elem).documentElement;

			// Support: IE <=8
			// Assume HTML when documentElement doesn't yet exist, such as inside loading iframes
			// https://bugs.jquery.com/ticket/4833
			return !rhtml.test(namespace || docElem && docElem.nodeName || "HTML");
		};

		/**
   * Sets document-related variables once based on the current document
   * @param {Element|Object} [doc] An element or document object to use to set the document
   * @returns {Object} Returns the current document
   */
		setDocument = Sizzle.setDocument = function (node) {
			var hasCompare,
			    subWindow,
			    doc = node ? node.ownerDocument || node : preferredDoc;

			// Return early if doc is invalid or already selected
			if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {
				return document;
			}

			// Update global variables
			document = doc;
			docElem = document.documentElement;
			documentIsHTML = !isXML(document);

			// Support: IE 9-11, Edge
			// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
			if (preferredDoc !== document && (subWindow = document.defaultView) && subWindow.top !== subWindow) {

				// Support: IE 11, Edge
				if (subWindow.addEventListener) {
					subWindow.addEventListener("unload", unloadHandler, false);

					// Support: IE 9 - 10 only
				} else if (subWindow.attachEvent) {
					subWindow.attachEvent("onunload", unloadHandler);
				}
			}

			/* Attributes
   ---------------------------------------------------------------------- */

			// Support: IE<8
			// Verify that getAttribute really returns attributes and not properties
			// (excepting IE8 booleans)
			support.attributes = assert(function (el) {
				el.className = "i";
				return !el.getAttribute("className");
			});

			/* getElement(s)By*
   ---------------------------------------------------------------------- */

			// Check if getElementsByTagName("*") returns only elements
			support.getElementsByTagName = assert(function (el) {
				el.appendChild(document.createComment(""));
				return !el.getElementsByTagName("*").length;
			});

			// Support: IE<9
			support.getElementsByClassName = rnative.test(document.getElementsByClassName);

			// Support: IE<10
			// Check if getElementById returns elements by name
			// The broken getElementById methods don't pick up programmatically-set names,
			// so use a roundabout getElementsByName test
			support.getById = assert(function (el) {
				docElem.appendChild(el).id = expando;
				return !document.getElementsByName || !document.getElementsByName(expando).length;
			});

			// ID filter and find
			if (support.getById) {
				Expr.filter["ID"] = function (id) {
					var attrId = id.replace(runescape, funescape);
					return function (elem) {
						return elem.getAttribute("id") === attrId;
					};
				};
				Expr.find["ID"] = function (id, context) {
					if (typeof context.getElementById !== "undefined" && documentIsHTML) {
						var elem = context.getElementById(id);
						return elem ? [elem] : [];
					}
				};
			} else {
				Expr.filter["ID"] = function (id) {
					var attrId = id.replace(runescape, funescape);
					return function (elem) {
						var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
						return node && node.value === attrId;
					};
				};

				// Support: IE 6 - 7 only
				// getElementById is not reliable as a find shortcut
				Expr.find["ID"] = function (id, context) {
					if (typeof context.getElementById !== "undefined" && documentIsHTML) {
						var node,
						    i,
						    elems,
						    elem = context.getElementById(id);

						if (elem) {

							// Verify the id attribute
							node = elem.getAttributeNode("id");
							if (node && node.value === id) {
								return [elem];
							}

							// Fall back on getElementsByName
							elems = context.getElementsByName(id);
							i = 0;
							while (elem = elems[i++]) {
								node = elem.getAttributeNode("id");
								if (node && node.value === id) {
									return [elem];
								}
							}
						}

						return [];
					}
				};
			}

			// Tag
			Expr.find["TAG"] = support.getElementsByTagName ? function (tag, context) {
				if (typeof context.getElementsByTagName !== "undefined") {
					return context.getElementsByTagName(tag);

					// DocumentFragment nodes don't have gEBTN
				} else if (support.qsa) {
					return context.querySelectorAll(tag);
				}
			} : function (tag, context) {
				var elem,
				    tmp = [],
				    i = 0,

				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName(tag);

				// Filter out possible comments
				if (tag === "*") {
					while (elem = results[i++]) {
						if (elem.nodeType === 1) {
							tmp.push(elem);
						}
					}

					return tmp;
				}
				return results;
			};

			// Class
			Expr.find["CLASS"] = support.getElementsByClassName && function (className, context) {
				if (typeof context.getElementsByClassName !== "undefined" && documentIsHTML) {
					return context.getElementsByClassName(className);
				}
			};

			/* QSA/matchesSelector
   ---------------------------------------------------------------------- */

			// QSA and matchesSelector support

			// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
			rbuggyMatches = [];

			// qSa(:focus) reports false when true (Chrome 21)
			// We allow this because of a bug in IE8/9 that throws an error
			// whenever `document.activeElement` is accessed on an iframe
			// So, we allow :focus to pass through QSA all the time to avoid the IE error
			// See https://bugs.jquery.com/ticket/13378
			rbuggyQSA = [];

			if (support.qsa = rnative.test(document.querySelectorAll)) {
				// Build QSA regex
				// Regex strategy adopted from Diego Perini
				assert(function (el) {
					// Select is set to empty string on purpose
					// This is to test IE's treatment of not explicitly
					// setting a boolean content attribute,
					// since its presence should be enough
					// https://bugs.jquery.com/ticket/12359
					docElem.appendChild(el).innerHTML = "<a id='" + expando + "'></a>" + "<select id='" + expando + "-\r\\' msallowcapture=''>" + "<option selected=''></option></select>";

					// Support: IE8, Opera 11-12.16
					// Nothing should be selected when empty strings follow ^= or $= or *=
					// The test attribute must be unknown in Opera but "safe" for WinRT
					// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
					if (el.querySelectorAll("[msallowcapture^='']").length) {
						rbuggyQSA.push("[*^$]=" + whitespace + "*(?:''|\"\")");
					}

					// Support: IE8
					// Boolean attributes and "value" are not treated correctly
					if (!el.querySelectorAll("[selected]").length) {
						rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");
					}

					// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
					if (!el.querySelectorAll("[id~=" + expando + "-]").length) {
						rbuggyQSA.push("~=");
					}

					// Webkit/Opera - :checked should return selected option elements
					// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
					// IE8 throws error here and will not see later tests
					if (!el.querySelectorAll(":checked").length) {
						rbuggyQSA.push(":checked");
					}

					// Support: Safari 8+, iOS 8+
					// https://bugs.webkit.org/show_bug.cgi?id=136851
					// In-page `selector#id sibling-combinator selector` fails
					if (!el.querySelectorAll("a#" + expando + "+*").length) {
						rbuggyQSA.push(".#.+[+~]");
					}
				});

				assert(function (el) {
					el.innerHTML = "<a href='' disabled='disabled'></a>" + "<select disabled='disabled'><option/></select>";

					// Support: Windows 8 Native Apps
					// The type and name attributes are restricted during .innerHTML assignment
					var input = document.createElement("input");
					input.setAttribute("type", "hidden");
					el.appendChild(input).setAttribute("name", "D");

					// Support: IE8
					// Enforce case-sensitivity of name attribute
					if (el.querySelectorAll("[name=d]").length) {
						rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?=");
					}

					// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
					// IE8 throws error here and will not see later tests
					if (el.querySelectorAll(":enabled").length !== 2) {
						rbuggyQSA.push(":enabled", ":disabled");
					}

					// Support: IE9-11+
					// IE's :disabled selector does not pick up the children of disabled fieldsets
					docElem.appendChild(el).disabled = true;
					if (el.querySelectorAll(":disabled").length !== 2) {
						rbuggyQSA.push(":enabled", ":disabled");
					}

					// Opera 10-11 does not throw on post-comma invalid pseudos
					el.querySelectorAll("*,:x");
					rbuggyQSA.push(",.*:");
				});
			}

			if (support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {

				assert(function (el) {
					// Check to see if it's possible to do matchesSelector
					// on a disconnected node (IE 9)
					support.disconnectedMatch = matches.call(el, "*");

					// This should fail with an exception
					// Gecko does not error, returns false instead
					matches.call(el, "[s!='']:x");
					rbuggyMatches.push("!=", pseudos);
				});
			}

			rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
			rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));

			/* Contains
   ---------------------------------------------------------------------- */
			hasCompare = rnative.test(docElem.compareDocumentPosition);

			// Element contains another
			// Purposefully self-exclusive
			// As in, an element does not contain itself
			contains = hasCompare || rnative.test(docElem.contains) ? function (a, b) {
				var adown = a.nodeType === 9 ? a.documentElement : a,
				    bup = b && b.parentNode;
				return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
			} : function (a, b) {
				if (b) {
					while (b = b.parentNode) {
						if (b === a) {
							return true;
						}
					}
				}
				return false;
			};

			/* Sorting
   ---------------------------------------------------------------------- */

			// Document order sorting
			sortOrder = hasCompare ? function (a, b) {

				// Flag for duplicate removal
				if (a === b) {
					hasDuplicate = true;
					return 0;
				}

				// Sort on method existence if only one input has compareDocumentPosition
				var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
				if (compare) {
					return compare;
				}

				// Calculate position if both inputs belong to the same document
				compare = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) :

				// Otherwise we know they are disconnected
				1;

				// Disconnected nodes
				if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {

					// Choose the first element that is related to our preferred document
					if (a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a)) {
						return -1;
					}
					if (b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b)) {
						return 1;
					}

					// Maintain original order
					return sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;
				}

				return compare & 4 ? -1 : 1;
			} : function (a, b) {
				// Exit early if the nodes are identical
				if (a === b) {
					hasDuplicate = true;
					return 0;
				}

				var cur,
				    i = 0,
				    aup = a.parentNode,
				    bup = b.parentNode,
				    ap = [a],
				    bp = [b];

				// Parentless nodes are either documents or disconnected
				if (!aup || !bup) {
					return a === document ? -1 : b === document ? 1 : aup ? -1 : bup ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;

					// If the nodes are siblings, we can do a quick check
				} else if (aup === bup) {
					return siblingCheck(a, b);
				}

				// Otherwise we need full lists of their ancestors for comparison
				cur = a;
				while (cur = cur.parentNode) {
					ap.unshift(cur);
				}
				cur = b;
				while (cur = cur.parentNode) {
					bp.unshift(cur);
				}

				// Walk down the tree looking for a discrepancy
				while (ap[i] === bp[i]) {
					i++;
				}

				return i ?
				// Do a sibling check if the nodes have a common ancestor
				siblingCheck(ap[i], bp[i]) :

				// Otherwise nodes in our document sort first
				ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0;
			};

			return document;
		};

		Sizzle.matches = function (expr, elements) {
			return Sizzle(expr, null, null, elements);
		};

		Sizzle.matchesSelector = function (elem, expr) {
			// Set document vars if needed
			if ((elem.ownerDocument || elem) !== document) {
				setDocument(elem);
			}

			if (support.matchesSelector && documentIsHTML && !nonnativeSelectorCache[expr + " "] && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {

				try {
					var ret = matches.call(elem, expr);

					// IE 9's matchesSelector returns false on disconnected nodes
					if (ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11) {
						return ret;
					}
				} catch (e) {
					nonnativeSelectorCache(expr, true);
				}
			}

			return Sizzle(expr, document, null, [elem]).length > 0;
		};

		Sizzle.contains = function (context, elem) {
			// Set document vars if needed
			if ((context.ownerDocument || context) !== document) {
				setDocument(context);
			}
			return contains(context, elem);
		};

		Sizzle.attr = function (elem, name) {
			// Set document vars if needed
			if ((elem.ownerDocument || elem) !== document) {
				setDocument(elem);
			}

			var fn = Expr.attrHandle[name.toLowerCase()],

			// Don't get fooled by Object.prototype properties (jQuery #13807)
			val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;

			return val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
		};

		Sizzle.escape = function (sel) {
			return (sel + "").replace(rcssescape, fcssescape);
		};

		Sizzle.error = function (msg) {
			throw new Error("Syntax error, unrecognized expression: " + msg);
		};

		/**
   * Document sorting and removing duplicates
   * @param {ArrayLike} results
   */
		Sizzle.uniqueSort = function (results) {
			var elem,
			    duplicates = [],
			    j = 0,
			    i = 0;

			// Unless we *know* we can detect duplicates, assume their presence
			hasDuplicate = !support.detectDuplicates;
			sortInput = !support.sortStable && results.slice(0);
			results.sort(sortOrder);

			if (hasDuplicate) {
				while (elem = results[i++]) {
					if (elem === results[i]) {
						j = duplicates.push(i);
					}
				}
				while (j--) {
					results.splice(duplicates[j], 1);
				}
			}

			// Clear input after sorting to release objects
			// See https://github.com/jquery/sizzle/pull/225
			sortInput = null;

			return results;
		};

		/**
   * Utility function for retrieving the text value of an array of DOM nodes
   * @param {Array|Element} elem
   */
		getText = Sizzle.getText = function (elem) {
			var node,
			    ret = "",
			    i = 0,
			    nodeType = elem.nodeType;

			if (!nodeType) {
				// If no nodeType, this is expected to be an array
				while (node = elem[i++]) {
					// Do not traverse comment nodes
					ret += getText(node);
				}
			} else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
				// Use textContent for elements
				// innerText usage removed for consistency of new lines (jQuery #11153)
				if (typeof elem.textContent === "string") {
					return elem.textContent;
				} else {
					// Traverse its children
					for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
						ret += getText(elem);
					}
				}
			} else if (nodeType === 3 || nodeType === 4) {
				return elem.nodeValue;
			}
			// Do not include comment or processing instruction nodes

			return ret;
		};

		Expr = Sizzle.selectors = {

			// Can be adjusted by the user
			cacheLength: 50,

			createPseudo: markFunction,

			match: matchExpr,

			attrHandle: {},

			find: {},

			relative: {
				">": { dir: "parentNode", first: true },
				" ": { dir: "parentNode" },
				"+": { dir: "previousSibling", first: true },
				"~": { dir: "previousSibling" }
			},

			preFilter: {
				"ATTR": function ATTR(match) {
					match[1] = match[1].replace(runescape, funescape);

					// Move the given value to match[3] whether quoted or unquoted
					match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);

					if (match[2] === "~=") {
						match[3] = " " + match[3] + " ";
					}

					return match.slice(0, 4);
				},

				"CHILD": function CHILD(match) {
					/* matches from matchExpr["CHILD"]
     	1 type (only|nth|...)
     	2 what (child|of-type)
     	3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
     	4 xn-component of xn+y argument ([+-]?\d*n|)
     	5 sign of xn-component
     	6 x of xn-component
     	7 sign of y-component
     	8 y of y-component
     */
					match[1] = match[1].toLowerCase();

					if (match[1].slice(0, 3) === "nth") {
						// nth-* requires argument
						if (!match[3]) {
							Sizzle.error(match[0]);
						}

						// numeric x and y parameters for Expr.filter.CHILD
						// remember that false/true cast respectively to 0/1
						match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
						match[5] = +(match[7] + match[8] || match[3] === "odd");

						// other types prohibit arguments
					} else if (match[3]) {
						Sizzle.error(match[0]);
					}

					return match;
				},

				"PSEUDO": function PSEUDO(match) {
					var excess,
					    unquoted = !match[6] && match[2];

					if (matchExpr["CHILD"].test(match[0])) {
						return null;
					}

					// Accept quoted arguments as-is
					if (match[3]) {
						match[2] = match[4] || match[5] || "";

						// Strip excess characters from unquoted arguments
					} else if (unquoted && rpseudo.test(unquoted) && (
					// Get excess from tokenize (recursively)
					excess = tokenize(unquoted, true)) && (
					// advance to the next closing parenthesis
					excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {

						// excess is a negative index
						match[0] = match[0].slice(0, excess);
						match[2] = unquoted.slice(0, excess);
					}

					// Return only captures needed by the pseudo filter method (type and argument)
					return match.slice(0, 3);
				}
			},

			filter: {

				"TAG": function TAG(nodeNameSelector) {
					var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
					return nodeNameSelector === "*" ? function () {
						return true;
					} : function (elem) {
						return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
					};
				},

				"CLASS": function CLASS(className) {
					var pattern = classCache[className + " "];

					return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className, function (elem) {
						return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "");
					});
				},

				"ATTR": function ATTR(name, operator, check) {
					return function (elem) {
						var result = Sizzle.attr(elem, name);

						if (result == null) {
							return operator === "!=";
						}
						if (!operator) {
							return true;
						}

						result += "";

						return operator === "=" ? result === check : operator === "!=" ? result !== check : operator === "^=" ? check && result.indexOf(check) === 0 : operator === "*=" ? check && result.indexOf(check) > -1 : operator === "$=" ? check && result.slice(-check.length) === check : operator === "~=" ? (" " + result.replace(rwhitespace, " ") + " ").indexOf(check) > -1 : operator === "|=" ? result === check || result.slice(0, check.length + 1) === check + "-" : false;
					};
				},

				"CHILD": function CHILD(type, what, argument, first, last) {
					var simple = type.slice(0, 3) !== "nth",
					    forward = type.slice(-4) !== "last",
					    ofType = what === "of-type";

					return first === 1 && last === 0 ?

					// Shortcut for :nth-*(n)
					function (elem) {
						return !!elem.parentNode;
					} : function (elem, context, xml) {
						var cache,
						    uniqueCache,
						    outerCache,
						    node,
						    nodeIndex,
						    start,
						    dir = simple !== forward ? "nextSibling" : "previousSibling",
						    parent = elem.parentNode,
						    name = ofType && elem.nodeName.toLowerCase(),
						    useCache = !xml && !ofType,
						    diff = false;

						if (parent) {

							// :(first|last|only)-(child|of-type)
							if (simple) {
								while (dir) {
									node = elem;
									while (node = node[dir]) {
										if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {

											return false;
										}
									}
									// Reverse direction for :only-* (if we haven't yet done so)
									start = dir = type === "only" && !start && "nextSibling";
								}
								return true;
							}

							start = [forward ? parent.firstChild : parent.lastChild];

							// non-xml :nth-child(...) stores cache data on `parent`
							if (forward && useCache) {

								// Seek `elem` from a previously-cached index

								// ...in a gzip-friendly way
								node = parent;
								outerCache = node[expando] || (node[expando] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});

								cache = uniqueCache[type] || [];
								nodeIndex = cache[0] === dirruns && cache[1];
								diff = nodeIndex && cache[2];
								node = nodeIndex && parent.childNodes[nodeIndex];

								while (node = ++nodeIndex && node && node[dir] || (

								// Fallback to seeking `elem` from the start
								diff = nodeIndex = 0) || start.pop()) {

									// When found, cache indexes on `parent` and break
									if (node.nodeType === 1 && ++diff && node === elem) {
										uniqueCache[type] = [dirruns, nodeIndex, diff];
										break;
									}
								}
							} else {
								// Use previously-cached element index if available
								if (useCache) {
									// ...in a gzip-friendly way
									node = elem;
									outerCache = node[expando] || (node[expando] = {});

									// Support: IE <9 only
									// Defend against cloned attroperties (jQuery gh-1709)
									uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});

									cache = uniqueCache[type] || [];
									nodeIndex = cache[0] === dirruns && cache[1];
									diff = nodeIndex;
								}

								// xml :nth-child(...)
								// or :nth-last-child(...) or :nth(-last)?-of-type(...)
								if (diff === false) {
									// Use the same loop as above to seek `elem` from the start
									while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {

										if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {

											// Cache the index of each encountered element
											if (useCache) {
												outerCache = node[expando] || (node[expando] = {});

												// Support: IE <9 only
												// Defend against cloned attroperties (jQuery gh-1709)
												uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});

												uniqueCache[type] = [dirruns, diff];
											}

											if (node === elem) {
												break;
											}
										}
									}
								}
							}

							// Incorporate the offset, then check against cycle size
							diff -= last;
							return diff === first || diff % first === 0 && diff / first >= 0;
						}
					};
				},

				"PSEUDO": function PSEUDO(pseudo, argument) {
					// pseudo-class names are case-insensitive
					// http://www.w3.org/TR/selectors/#pseudo-classes
					// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
					// Remember that setFilters inherits from pseudos
					var args,
					    fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error("unsupported pseudo: " + pseudo);

					// The user may use createPseudo to indicate that
					// arguments are needed to create the filter function
					// just as Sizzle does
					if (fn[expando]) {
						return fn(argument);
					}

					// But maintain support for old signatures
					if (fn.length > 1) {
						args = [pseudo, pseudo, "", argument];
						return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {
							var idx,
							    matched = fn(seed, argument),
							    i = matched.length;
							while (i--) {
								idx = indexOf(seed, matched[i]);
								seed[idx] = !(matches[idx] = matched[i]);
							}
						}) : function (elem) {
							return fn(elem, 0, args);
						};
					}

					return fn;
				}
			},

			pseudos: {
				// Potentially complex pseudos
				"not": markFunction(function (selector) {
					// Trim the selector passed to compile
					// to avoid treating leading and trailing
					// spaces as combinators
					var input = [],
					    results = [],
					    matcher = compile(selector.replace(rtrim, "$1"));

					return matcher[expando] ? markFunction(function (seed, matches, context, xml) {
						var elem,
						    unmatched = matcher(seed, null, xml, []),
						    i = seed.length;

						// Match elements unmatched by `matcher`
						while (i--) {
							if (elem = unmatched[i]) {
								seed[i] = !(matches[i] = elem);
							}
						}
					}) : function (elem, context, xml) {
						input[0] = elem;
						matcher(input, null, xml, results);
						// Don't keep the element (issue #299)
						input[0] = null;
						return !results.pop();
					};
				}),

				"has": markFunction(function (selector) {
					return function (elem) {
						return Sizzle(selector, elem).length > 0;
					};
				}),

				"contains": markFunction(function (text) {
					text = text.replace(runescape, funescape);
					return function (elem) {
						return (elem.textContent || getText(elem)).indexOf(text) > -1;
					};
				}),

				// "Whether an element is represented by a :lang() selector
				// is based solely on the element's language value
				// being equal to the identifier C,
				// or beginning with the identifier C immediately followed by "-".
				// The matching of C against the element's language value is performed case-insensitively.
				// The identifier C does not have to be a valid language name."
				// http://www.w3.org/TR/selectors/#lang-pseudo
				"lang": markFunction(function (lang) {
					// lang value must be a valid identifier
					if (!ridentifier.test(lang || "")) {
						Sizzle.error("unsupported lang: " + lang);
					}
					lang = lang.replace(runescape, funescape).toLowerCase();
					return function (elem) {
						var elemLang;
						do {
							if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang")) {

								elemLang = elemLang.toLowerCase();
								return elemLang === lang || elemLang.indexOf(lang + "-") === 0;
							}
						} while ((elem = elem.parentNode) && elem.nodeType === 1);
						return false;
					};
				}),

				// Miscellaneous
				"target": function target(elem) {
					var hash = window.location && window.location.hash;
					return hash && hash.slice(1) === elem.id;
				},

				"root": function root(elem) {
					return elem === docElem;
				},

				"focus": function focus(elem) {
					return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
				},

				// Boolean properties
				"enabled": createDisabledPseudo(false),
				"disabled": createDisabledPseudo(true),

				"checked": function checked(elem) {
					// In CSS3, :checked should return both checked and selected elements
					// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
					var nodeName = elem.nodeName.toLowerCase();
					return nodeName === "input" && !!elem.checked || nodeName === "option" && !!elem.selected;
				},

				"selected": function selected(elem) {
					// Accessing this property makes selected-by-default
					// options in Safari work properly
					if (elem.parentNode) {
						elem.parentNode.selectedIndex;
					}

					return elem.selected === true;
				},

				// Contents
				"empty": function empty(elem) {
					// http://www.w3.org/TR/selectors/#empty-pseudo
					// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
					//   but not by others (comment: 8; processing instruction: 7; etc.)
					// nodeType < 6 works because attributes (2) do not appear as children
					for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
						if (elem.nodeType < 6) {
							return false;
						}
					}
					return true;
				},

				"parent": function parent(elem) {
					return !Expr.pseudos["empty"](elem);
				},

				// Element/input types
				"header": function header(elem) {
					return rheader.test(elem.nodeName);
				},

				"input": function input(elem) {
					return rinputs.test(elem.nodeName);
				},

				"button": function button(elem) {
					var name = elem.nodeName.toLowerCase();
					return name === "input" && elem.type === "button" || name === "button";
				},

				"text": function text(elem) {
					var attr;
					return elem.nodeName.toLowerCase() === "input" && elem.type === "text" && (

					// Support: IE<8
					// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
					(attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text");
				},

				// Position-in-collection
				"first": createPositionalPseudo(function () {
					return [0];
				}),

				"last": createPositionalPseudo(function (matchIndexes, length) {
					return [length - 1];
				}),

				"eq": createPositionalPseudo(function (matchIndexes, length, argument) {
					return [argument < 0 ? argument + length : argument];
				}),

				"even": createPositionalPseudo(function (matchIndexes, length) {
					var i = 0;
					for (; i < length; i += 2) {
						matchIndexes.push(i);
					}
					return matchIndexes;
				}),

				"odd": createPositionalPseudo(function (matchIndexes, length) {
					var i = 1;
					for (; i < length; i += 2) {
						matchIndexes.push(i);
					}
					return matchIndexes;
				}),

				"lt": createPositionalPseudo(function (matchIndexes, length, argument) {
					var i = argument < 0 ? argument + length : argument > length ? length : argument;
					for (; --i >= 0;) {
						matchIndexes.push(i);
					}
					return matchIndexes;
				}),

				"gt": createPositionalPseudo(function (matchIndexes, length, argument) {
					var i = argument < 0 ? argument + length : argument;
					for (; ++i < length;) {
						matchIndexes.push(i);
					}
					return matchIndexes;
				})
			}
		};

		Expr.pseudos["nth"] = Expr.pseudos["eq"];

		// Add button/input type pseudos
		for (i in { radio: true, checkbox: true, file: true, password: true, image: true }) {
			Expr.pseudos[i] = createInputPseudo(i);
		}
		for (i in { submit: true, reset: true }) {
			Expr.pseudos[i] = createButtonPseudo(i);
		}

		// Easy API for creating new setFilters
		function setFilters() {}
		setFilters.prototype = Expr.filters = Expr.pseudos;
		Expr.setFilters = new setFilters();

		tokenize = Sizzle.tokenize = function (selector, parseOnly) {
			var matched,
			    match,
			    tokens,
			    type,
			    soFar,
			    groups,
			    preFilters,
			    cached = tokenCache[selector + " "];

			if (cached) {
				return parseOnly ? 0 : cached.slice(0);
			}

			soFar = selector;
			groups = [];
			preFilters = Expr.preFilter;

			while (soFar) {

				// Comma and first run
				if (!matched || (match = rcomma.exec(soFar))) {
					if (match) {
						// Don't consume trailing commas as valid
						soFar = soFar.slice(match[0].length) || soFar;
					}
					groups.push(tokens = []);
				}

				matched = false;

				// Combinators
				if (match = rcombinators.exec(soFar)) {
					matched = match.shift();
					tokens.push({
						value: matched,
						// Cast descendant combinators to space
						type: match[0].replace(rtrim, " ")
					});
					soFar = soFar.slice(matched.length);
				}

				// Filters
				for (type in Expr.filter) {
					if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
						matched = match.shift();
						tokens.push({
							value: matched,
							type: type,
							matches: match
						});
						soFar = soFar.slice(matched.length);
					}
				}

				if (!matched) {
					break;
				}
			}

			// Return the length of the invalid excess
			// if we're just parsing
			// Otherwise, throw an error or return tokens
			return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) :
			// Cache the tokens
			tokenCache(selector, groups).slice(0);
		};

		function toSelector(tokens) {
			var i = 0,
			    len = tokens.length,
			    selector = "";
			for (; i < len; i++) {
				selector += tokens[i].value;
			}
			return selector;
		}

		function addCombinator(matcher, combinator, base) {
			var dir = combinator.dir,
			    skip = combinator.next,
			    key = skip || dir,
			    checkNonElements = base && key === "parentNode",
			    doneName = done++;

			return combinator.first ?
			// Check against closest ancestor/preceding element
			function (elem, context, xml) {
				while (elem = elem[dir]) {
					if (elem.nodeType === 1 || checkNonElements) {
						return matcher(elem, context, xml);
					}
				}
				return false;
			} :

			// Check against all ancestor/preceding elements
			function (elem, context, xml) {
				var oldCache,
				    uniqueCache,
				    outerCache,
				    newCache = [dirruns, doneName];

				// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
				if (xml) {
					while (elem = elem[dir]) {
						if (elem.nodeType === 1 || checkNonElements) {
							if (matcher(elem, context, xml)) {
								return true;
							}
						}
					}
				} else {
					while (elem = elem[dir]) {
						if (elem.nodeType === 1 || checkNonElements) {
							outerCache = elem[expando] || (elem[expando] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[elem.uniqueID] || (outerCache[elem.uniqueID] = {});

							if (skip && skip === elem.nodeName.toLowerCase()) {
								elem = elem[dir] || elem;
							} else if ((oldCache = uniqueCache[key]) && oldCache[0] === dirruns && oldCache[1] === doneName) {

								// Assign to newCache so results back-propagate to previous elements
								return newCache[2] = oldCache[2];
							} else {
								// Reuse newcache so results back-propagate to previous elements
								uniqueCache[key] = newCache;

								// A match means we're done; a fail means we have to keep checking
								if (newCache[2] = matcher(elem, context, xml)) {
									return true;
								}
							}
						}
					}
				}
				return false;
			};
		}

		function elementMatcher(matchers) {
			return matchers.length > 1 ? function (elem, context, xml) {
				var i = matchers.length;
				while (i--) {
					if (!matchers[i](elem, context, xml)) {
						return false;
					}
				}
				return true;
			} : matchers[0];
		}

		function multipleContexts(selector, contexts, results) {
			var i = 0,
			    len = contexts.length;
			for (; i < len; i++) {
				Sizzle(selector, contexts[i], results);
			}
			return results;
		}

		function condense(unmatched, map, filter, context, xml) {
			var elem,
			    newUnmatched = [],
			    i = 0,
			    len = unmatched.length,
			    mapped = map != null;

			for (; i < len; i++) {
				if (elem = unmatched[i]) {
					if (!filter || filter(elem, context, xml)) {
						newUnmatched.push(elem);
						if (mapped) {
							map.push(i);
						}
					}
				}
			}

			return newUnmatched;
		}

		function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
			if (postFilter && !postFilter[expando]) {
				postFilter = setMatcher(postFilter);
			}
			if (postFinder && !postFinder[expando]) {
				postFinder = setMatcher(postFinder, postSelector);
			}
			return markFunction(function (seed, results, context, xml) {
				var temp,
				    i,
				    elem,
				    preMap = [],
				    postMap = [],
				    preexisting = results.length,


				// Get initial elements from seed or context
				elems = seed || multipleContexts(selector || "*", context.nodeType ? [context] : context, []),


				// Prefilter to get matcher input, preserving a map for seed-results synchronization
				matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems,
				    matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || (seed ? preFilter : preexisting || postFilter) ?

				// ...intermediate processing is necessary
				[] :

				// ...otherwise use results directly
				results : matcherIn;

				// Find primary matches
				if (matcher) {
					matcher(matcherIn, matcherOut, context, xml);
				}

				// Apply postFilter
				if (postFilter) {
					temp = condense(matcherOut, postMap);
					postFilter(temp, [], context, xml);

					// Un-match failing elements by moving them back to matcherIn
					i = temp.length;
					while (i--) {
						if (elem = temp[i]) {
							matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
						}
					}
				}

				if (seed) {
					if (postFinder || preFilter) {
						if (postFinder) {
							// Get the final matcherOut by condensing this intermediate into postFinder contexts
							temp = [];
							i = matcherOut.length;
							while (i--) {
								if (elem = matcherOut[i]) {
									// Restore matcherIn since elem is not yet a final match
									temp.push(matcherIn[i] = elem);
								}
							}
							postFinder(null, matcherOut = [], temp, xml);
						}

						// Move matched elements from seed to results to keep them synchronized
						i = matcherOut.length;
						while (i--) {
							if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) {

								seed[temp] = !(results[temp] = elem);
							}
						}
					}

					// Add elements to results, through postFinder if defined
				} else {
					matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);
					if (postFinder) {
						postFinder(null, results, matcherOut, xml);
					} else {
						push.apply(results, matcherOut);
					}
				}
			});
		}

		function matcherFromTokens(tokens) {
			var checkContext,
			    matcher,
			    j,
			    len = tokens.length,
			    leadingRelative = Expr.relative[tokens[0].type],
			    implicitRelative = leadingRelative || Expr.relative[" "],
			    i = leadingRelative ? 1 : 0,


			// The foundational matcher ensures that elements are reachable from top-level context(s)
			matchContext = addCombinator(function (elem) {
				return elem === checkContext;
			}, implicitRelative, true),
			    matchAnyContext = addCombinator(function (elem) {
				return indexOf(checkContext, elem) > -1;
			}, implicitRelative, true),
			    matchers = [function (elem, context, xml) {
				var ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));
				// Avoid hanging onto element (issue #299)
				checkContext = null;
				return ret;
			}];

			for (; i < len; i++) {
				if (matcher = Expr.relative[tokens[i].type]) {
					matchers = [addCombinator(elementMatcher(matchers), matcher)];
				} else {
					matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);

					// Return special upon seeing a positional matcher
					if (matcher[expando]) {
						// Find the next relative operator (if any) for proper handling
						j = ++i;
						for (; j < len; j++) {
							if (Expr.relative[tokens[j].type]) {
								break;
							}
						}
						return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice(0, i - 1).concat({ value: tokens[i - 2].type === " " ? "*" : "" })).replace(rtrim, "$1"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));
					}
					matchers.push(matcher);
				}
			}

			return elementMatcher(matchers);
		}

		function matcherFromGroupMatchers(elementMatchers, setMatchers) {
			var bySet = setMatchers.length > 0,
			    byElement = elementMatchers.length > 0,
			    superMatcher = function superMatcher(seed, context, xml, results, outermost) {
				var elem,
				    j,
				    matcher,
				    matchedCount = 0,
				    i = "0",
				    unmatched = seed && [],
				    setMatched = [],
				    contextBackup = outermostContext,

				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]("*", outermost),

				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1,
				    len = elems.length;

				if (outermost) {
					outermostContext = context === document || context || outermost;
				}

				// Add elements passing elementMatchers directly to results
				// Support: IE<9, Safari
				// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
				for (; i !== len && (elem = elems[i]) != null; i++) {
					if (byElement && elem) {
						j = 0;
						if (!context && elem.ownerDocument !== document) {
							setDocument(elem);
							xml = !documentIsHTML;
						}
						while (matcher = elementMatchers[j++]) {
							if (matcher(elem, context || document, xml)) {
								results.push(elem);
								break;
							}
						}
						if (outermost) {
							dirruns = dirrunsUnique;
						}
					}

					// Track unmatched elements for set filters
					if (bySet) {
						// They will have gone through all possible matchers
						if (elem = !matcher && elem) {
							matchedCount--;
						}

						// Lengthen the array for every element, matched or not
						if (seed) {
							unmatched.push(elem);
						}
					}
				}

				// `i` is now the count of elements visited above, and adding it to `matchedCount`
				// makes the latter nonnegative.
				matchedCount += i;

				// Apply set filters to unmatched elements
				// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
				// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
				// no element matchers and no seed.
				// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
				// case, which will result in a "00" `matchedCount` that differs from `i` but is also
				// numerically zero.
				if (bySet && i !== matchedCount) {
					j = 0;
					while (matcher = setMatchers[j++]) {
						matcher(unmatched, setMatched, context, xml);
					}

					if (seed) {
						// Reintegrate element matches to eliminate the need for sorting
						if (matchedCount > 0) {
							while (i--) {
								if (!(unmatched[i] || setMatched[i])) {
									setMatched[i] = pop.call(results);
								}
							}
						}

						// Discard index placeholder values to get only actual matches
						setMatched = condense(setMatched);
					}

					// Add matches to results
					push.apply(results, setMatched);

					// Seedless set matches succeeding multiple successful matchers stipulate sorting
					if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {

						Sizzle.uniqueSort(results);
					}
				}

				// Override manipulation of globals by nested matchers
				if (outermost) {
					dirruns = dirrunsUnique;
					outermostContext = contextBackup;
				}

				return unmatched;
			};

			return bySet ? markFunction(superMatcher) : superMatcher;
		}

		compile = Sizzle.compile = function (selector, match /* Internal Use Only */) {
			var i,
			    setMatchers = [],
			    elementMatchers = [],
			    cached = compilerCache[selector + " "];

			if (!cached) {
				// Generate a function of recursive functions that can be used to check each element
				if (!match) {
					match = tokenize(selector);
				}
				i = match.length;
				while (i--) {
					cached = matcherFromTokens(match[i]);
					if (cached[expando]) {
						setMatchers.push(cached);
					} else {
						elementMatchers.push(cached);
					}
				}

				// Cache the compiled function
				cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));

				// Save selector and tokenization
				cached.selector = selector;
			}
			return cached;
		};

		/**
   * A low-level selection function that works with Sizzle's compiled
   *  selector functions
   * @param {String|Function} selector A selector or a pre-compiled
   *  selector function built with Sizzle.compile
   * @param {Element} context
   * @param {Array} [results]
   * @param {Array} [seed] A set of elements to match against
   */
		select = Sizzle.select = function (selector, context, results, seed) {
			var i,
			    tokens,
			    token,
			    type,
			    find,
			    compiled = typeof selector === "function" && selector,
			    match = !seed && tokenize(selector = compiled.selector || selector);

			results = results || [];

			// Try to minimize operations if there is only one selector in the list and no seed
			// (the latter of which guarantees us context)
			if (match.length === 1) {

				// Reduce context if the leading compound selector is an ID
				tokens = match[0] = match[0].slice(0);
				if (tokens.length > 2 && (token = tokens[0]).type === "ID" && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {

					context = (Expr.find["ID"](token.matches[0].replace(runescape, funescape), context) || [])[0];
					if (!context) {
						return results;

						// Precompiled matchers will still verify ancestry, so step up a level
					} else if (compiled) {
						context = context.parentNode;
					}

					selector = selector.slice(tokens.shift().value.length);
				}

				// Fetch a seed set for right-to-left matching
				i = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;
				while (i--) {
					token = tokens[i];

					// Abort if we hit a combinator
					if (Expr.relative[type = token.type]) {
						break;
					}
					if (find = Expr.find[type]) {
						// Search, expanding context for leading sibling combinators
						if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {

							// If seed is empty or no tokens remain, we can return early
							tokens.splice(i, 1);
							selector = seed.length && toSelector(tokens);
							if (!selector) {
								push.apply(results, seed);
								return results;
							}

							break;
						}
					}
				}
			}

			// Compile and execute a filtering function if one is not provided
			// Provide `match` to avoid retokenization if we modified the selector above
			(compiled || compile(selector, match))(seed, context, !documentIsHTML, results, !context || rsibling.test(selector) && testContext(context.parentNode) || context);
			return results;
		};

		// One-time assignments

		// Sort stability
		support.sortStable = expando.split("").sort(sortOrder).join("") === expando;

		// Support: Chrome 14-35+
		// Always assume duplicates if they aren't passed to the comparison function
		support.detectDuplicates = !!hasDuplicate;

		// Initialize against the default document
		setDocument();

		// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
		// Detached nodes confoundingly follow *each other*
		support.sortDetached = assert(function (el) {
			// Should return 1, but returns 4 (following)
			return el.compareDocumentPosition(document.createElement("fieldset")) & 1;
		});

		// Support: IE<8
		// Prevent attribute/property "interpolation"
		// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
		if (!assert(function (el) {
			el.innerHTML = "<a href='#'></a>";
			return el.firstChild.getAttribute("href") === "#";
		})) {
			addHandle("type|href|height|width", function (elem, name, isXML) {
				if (!isXML) {
					return elem.getAttribute(name, name.toLowerCase() === "type" ? 1 : 2);
				}
			});
		}

		// Support: IE<9
		// Use defaultValue in place of getAttribute("value")
		if (!support.attributes || !assert(function (el) {
			el.innerHTML = "<input/>";
			el.firstChild.setAttribute("value", "");
			return el.firstChild.getAttribute("value") === "";
		})) {
			addHandle("value", function (elem, name, isXML) {
				if (!isXML && elem.nodeName.toLowerCase() === "input") {
					return elem.defaultValue;
				}
			});
		}

		// Support: IE<9
		// Use getAttributeNode to fetch booleans when getAttribute lies
		if (!assert(function (el) {
			return el.getAttribute("disabled") == null;
		})) {
			addHandle(booleans, function (elem, name, isXML) {
				var val;
				if (!isXML) {
					return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
				}
			});
		}

		return Sizzle;
	}(window);

	jQuery.find = Sizzle;
	jQuery.expr = Sizzle.selectors;

	// Deprecated
	jQuery.expr[":"] = jQuery.expr.pseudos;
	jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
	jQuery.text = Sizzle.getText;
	jQuery.isXMLDoc = Sizzle.isXML;
	jQuery.contains = Sizzle.contains;
	jQuery.escapeSelector = Sizzle.escape;

	var dir = function dir(elem, _dir, until) {
		var matched = [],
		    truncate = until !== undefined;

		while ((elem = elem[_dir]) && elem.nodeType !== 9) {
			if (elem.nodeType === 1) {
				if (truncate && jQuery(elem).is(until)) {
					break;
				}
				matched.push(elem);
			}
		}
		return matched;
	};

	var _siblings = function _siblings(n, elem) {
		var matched = [];

		for (; n; n = n.nextSibling) {
			if (n.nodeType === 1 && n !== elem) {
				matched.push(n);
			}
		}

		return matched;
	};

	var rneedsContext = jQuery.expr.match.needsContext;

	function nodeName(elem, name) {

		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	};
	var rsingleTag = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;

	// Implement the identical functionality for filter and not
	function winnow(elements, qualifier, not) {
		if (isFunction(qualifier)) {
			return jQuery.grep(elements, function (elem, i) {
				return !!qualifier.call(elem, i, elem) !== not;
			});
		}

		// Single element
		if (qualifier.nodeType) {
			return jQuery.grep(elements, function (elem) {
				return elem === qualifier !== not;
			});
		}

		// Arraylike of elements (jQuery, arguments, Array)
		if (typeof qualifier !== "string") {
			return jQuery.grep(elements, function (elem) {
				return indexOf.call(qualifier, elem) > -1 !== not;
			});
		}

		// Filtered directly for both simple and complex selectors
		return jQuery.filter(qualifier, elements, not);
	}

	jQuery.filter = function (expr, elems, not) {
		var elem = elems[0];

		if (not) {
			expr = ":not(" + expr + ")";
		}

		if (elems.length === 1 && elem.nodeType === 1) {
			return jQuery.find.matchesSelector(elem, expr) ? [elem] : [];
		}

		return jQuery.find.matches(expr, jQuery.grep(elems, function (elem) {
			return elem.nodeType === 1;
		}));
	};

	jQuery.fn.extend({
		find: function find(selector) {
			var i,
			    ret,
			    len = this.length,
			    self = this;

			if (typeof selector !== "string") {
				return this.pushStack(jQuery(selector).filter(function () {
					for (i = 0; i < len; i++) {
						if (jQuery.contains(self[i], this)) {
							return true;
						}
					}
				}));
			}

			ret = this.pushStack([]);

			for (i = 0; i < len; i++) {
				jQuery.find(selector, self[i], ret);
			}

			return len > 1 ? jQuery.uniqueSort(ret) : ret;
		},
		filter: function filter(selector) {
			return this.pushStack(winnow(this, selector || [], false));
		},
		not: function not(selector) {
			return this.pushStack(winnow(this, selector || [], true));
		},
		is: function is(selector) {
			return !!winnow(this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;
		}
	});

	// Initialize a jQuery object


	// A central reference to the root jQuery(document)
	var rootjQuery,


	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	// Shortcut simple #id case for speed
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,
	    init = jQuery.fn.init = function (selector, context, root) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if (!selector) {
			return this;
		}

		// Method init() accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if (typeof selector === "string") {
			if (selector[0] === "<" && selector[selector.length - 1] === ">" && selector.length >= 3) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [null, selector, null];
			} else {
				match = rquickExpr.exec(selector);
			}

			// Match html or make sure no context is specified for #id
			if (match && (match[1] || !context)) {

				// HANDLE: $(html) -> $(array)
				if (match[1]) {
					context = context instanceof jQuery ? context[0] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true));

					// HANDLE: $(html, props)
					if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
						for (match in context) {

							// Properties of context are called as methods if possible
							if (isFunction(this[match])) {
								this[match](context[match]);

								// ...and otherwise set as attributes
							} else {
								this.attr(match, context[match]);
							}
						}
					}

					return this;

					// HANDLE: $(#id)
				} else {
					elem = document.getElementById(match[2]);

					if (elem) {

						// Inject the element directly into the jQuery object
						this[0] = elem;
						this.length = 1;
					}
					return this;
				}

				// HANDLE: $(expr, $(...))
			} else if (!context || context.jquery) {
				return (context || root).find(selector);

				// HANDLE: $(expr, context)
				// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor(context).find(selector);
			}

			// HANDLE: $(DOMElement)
		} else if (selector.nodeType) {
			this[0] = selector;
			this.length = 1;
			return this;

			// HANDLE: $(function)
			// Shortcut for document ready
		} else if (isFunction(selector)) {
			return root.ready !== undefined ? root.ready(selector) :

			// Execute immediately if ready is not present
			selector(jQuery);
		}

		return jQuery.makeArray(selector, this);
	};

	// Give the init function the jQuery prototype for later instantiation
	init.prototype = jQuery.fn;

	// Initialize central reference
	rootjQuery = jQuery(document);

	var rparentsprev = /^(?:parents|prev(?:Until|All))/,


	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

	jQuery.fn.extend({
		has: function has(target) {
			var targets = jQuery(target, this),
			    l = targets.length;

			return this.filter(function () {
				var i = 0;
				for (; i < l; i++) {
					if (jQuery.contains(this, targets[i])) {
						return true;
					}
				}
			});
		},

		closest: function closest(selectors, context) {
			var cur,
			    i = 0,
			    l = this.length,
			    matched = [],
			    targets = typeof selectors !== "string" && jQuery(selectors);

			// Positional selectors never match, since there's no _selection_ context
			if (!rneedsContext.test(selectors)) {
				for (; i < l; i++) {
					for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {

						// Always skip document fragments
						if (cur.nodeType < 11 && (targets ? targets.index(cur) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {

							matched.push(cur);
							break;
						}
					}
				}
			}

			return this.pushStack(matched.length > 1 ? jQuery.uniqueSort(matched) : matched);
		},

		// Determine the position of an element within the set
		index: function index(elem) {

			// No argument, return index in parent
			if (!elem) {
				return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
			}

			// Index in selector
			if (typeof elem === "string") {
				return indexOf.call(jQuery(elem), this[0]);
			}

			// Locate the position of the desired element
			return indexOf.call(this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[0] : elem);
		},

		add: function add(selector, context) {
			return this.pushStack(jQuery.uniqueSort(jQuery.merge(this.get(), jQuery(selector, context))));
		},

		addBack: function addBack(selector) {
			return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
		}
	});

	function sibling(cur, dir) {
		while ((cur = cur[dir]) && cur.nodeType !== 1) {}
		return cur;
	}

	jQuery.each({
		parent: function parent(elem) {
			var parent = elem.parentNode;
			return parent && parent.nodeType !== 11 ? parent : null;
		},
		parents: function parents(elem) {
			return dir(elem, "parentNode");
		},
		parentsUntil: function parentsUntil(elem, i, until) {
			return dir(elem, "parentNode", until);
		},
		next: function next(elem) {
			return sibling(elem, "nextSibling");
		},
		prev: function prev(elem) {
			return sibling(elem, "previousSibling");
		},
		nextAll: function nextAll(elem) {
			return dir(elem, "nextSibling");
		},
		prevAll: function prevAll(elem) {
			return dir(elem, "previousSibling");
		},
		nextUntil: function nextUntil(elem, i, until) {
			return dir(elem, "nextSibling", until);
		},
		prevUntil: function prevUntil(elem, i, until) {
			return dir(elem, "previousSibling", until);
		},
		siblings: function siblings(elem) {
			return _siblings((elem.parentNode || {}).firstChild, elem);
		},
		children: function children(elem) {
			return _siblings(elem.firstChild);
		},
		contents: function contents(elem) {
			if (typeof elem.contentDocument !== "undefined") {
				return elem.contentDocument;
			}

			// Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
			// Treat the template element as a regular one in browsers that
			// don't support it.
			if (nodeName(elem, "template")) {
				elem = elem.content || elem;
			}

			return jQuery.merge([], elem.childNodes);
		}
	}, function (name, fn) {
		jQuery.fn[name] = function (until, selector) {
			var matched = jQuery.map(this, fn, until);

			if (name.slice(-5) !== "Until") {
				selector = until;
			}

			if (selector && typeof selector === "string") {
				matched = jQuery.filter(selector, matched);
			}

			if (this.length > 1) {

				// Remove duplicates
				if (!guaranteedUnique[name]) {
					jQuery.uniqueSort(matched);
				}

				// Reverse order for parents* and prev-derivatives
				if (rparentsprev.test(name)) {
					matched.reverse();
				}
			}

			return this.pushStack(matched);
		};
	});
	var rnothtmlwhite = /[^\x20\t\r\n\f]+/g;

	// Convert String-formatted options into Object-formatted ones
	function createOptions(options) {
		var object = {};
		jQuery.each(options.match(rnothtmlwhite) || [], function (_, flag) {
			object[flag] = true;
		});
		return object;
	}

	/*
  * Create a callback list using the following parameters:
  *
  *	options: an optional list of space-separated options that will change how
  *			the callback list behaves or a more traditional option object
  *
  * By default a callback list will act like an event callback list and can be
  * "fired" multiple times.
  *
  * Possible options:
  *
  *	once:			will ensure the callback list can only be fired once (like a Deferred)
  *
  *	memory:			will keep track of previous values and will call any callback added
  *					after the list has been fired right away with the latest "memorized"
  *					values (like a Deferred)
  *
  *	unique:			will ensure a callback can only be added once (no duplicate in the list)
  *
  *	stopOnFalse:	interrupt callings when a callback returns false
  *
  */
	jQuery.Callbacks = function (options) {

		// Convert options from String-formatted to Object-formatted if needed
		// (we check in cache first)
		options = typeof options === "string" ? createOptions(options) : jQuery.extend({}, options);

		var // Flag to know if list is currently firing
		firing,


		// Last fire value for non-forgettable lists
		memory,


		// Flag to know if list was already fired
		_fired,


		// Flag to prevent firing
		_locked,


		// Actual callback list
		list = [],


		// Queue of execution data for repeatable lists
		queue = [],


		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,


		// Fire callbacks
		fire = function fire() {

			// Enforce single-firing
			_locked = _locked || options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			_fired = firing = true;
			for (; queue.length; firingIndex = -1) {
				memory = queue.shift();
				while (++firingIndex < list.length) {

					// Run callback and check for early termination
					if (list[firingIndex].apply(memory[0], memory[1]) === false && options.stopOnFalse) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if (!options.memory) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if (_locked) {

				// Keep an empty list if we have data for future add calls
				if (memory) {
					list = [];

					// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},


		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function add() {
				if (list) {

					// If we have memory from a past run, we should fire after adding
					if (memory && !firing) {
						firingIndex = list.length - 1;
						queue.push(memory);
					}

					(function add(args) {
						jQuery.each(args, function (_, arg) {
							if (isFunction(arg)) {
								if (!options.unique || !self.has(arg)) {
									list.push(arg);
								}
							} else if (arg && arg.length && toType(arg) !== "string") {

								// Inspect recursively
								add(arg);
							}
						});
					})(arguments);

					if (memory && !firing) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function remove() {
				jQuery.each(arguments, function (_, arg) {
					var index;
					while ((index = jQuery.inArray(arg, list, index)) > -1) {
						list.splice(index, 1);

						// Handle firing indexes
						if (index <= firingIndex) {
							firingIndex--;
						}
					}
				});
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function has(fn) {
				return fn ? jQuery.inArray(fn, list) > -1 : list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function empty() {
				if (list) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function disable() {
				_locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function disabled() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function lock() {
				_locked = queue = [];
				if (!memory && !firing) {
					list = memory = "";
				}
				return this;
			},
			locked: function locked() {
				return !!_locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function fireWith(context, args) {
				if (!_locked) {
					args = args || [];
					args = [context, args.slice ? args.slice() : args];
					queue.push(args);
					if (!firing) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function fire() {
				self.fireWith(this, arguments);
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function fired() {
				return !!_fired;
			}
		};

		return self;
	};

	function Identity(v) {
		return v;
	}
	function Thrower(ex) {
		throw ex;
	}

	function adoptValue(value, resolve, reject, noValue) {
		var method;

		try {

			// Check for promise aspect first to privilege synchronous behavior
			if (value && isFunction(method = value.promise)) {
				method.call(value).done(resolve).fail(reject);

				// Other thenables
			} else if (value && isFunction(method = value.then)) {
				method.call(value, resolve, reject);

				// Other non-thenables
			} else {

				// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
				// * false: [ value ].slice( 0 ) => resolve( value )
				// * true: [ value ].slice( 1 ) => resolve()
				resolve.apply(undefined, [value].slice(noValue));
			}

			// For Promises/A+, convert exceptions into rejections
			// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
			// Deferred#then to conditionally suppress rejection.
		} catch (value) {

			// Support: Android 4.0 only
			// Strict mode functions invoked without .call/.apply get global-object context
			reject.apply(undefined, [value]);
		}
	}

	jQuery.extend({

		Deferred: function Deferred(func) {
			var tuples = [

			// action, add listener, callbacks,
			// ... .then handlers, argument index, [final state]
			["notify", "progress", jQuery.Callbacks("memory"), jQuery.Callbacks("memory"), 2], ["resolve", "done", jQuery.Callbacks("once memory"), jQuery.Callbacks("once memory"), 0, "resolved"], ["reject", "fail", jQuery.Callbacks("once memory"), jQuery.Callbacks("once memory"), 1, "rejected"]],
			    _state = "pending",
			    _promise = {
				state: function state() {
					return _state;
				},
				always: function always() {
					deferred.done(arguments).fail(arguments);
					return this;
				},
				"catch": function _catch(fn) {
					return _promise.then(null, fn);
				},

				// Keep pipe for back-compat
				pipe: function pipe() /* fnDone, fnFail, fnProgress */{
					var fns = arguments;

					return jQuery.Deferred(function (newDefer) {
						jQuery.each(tuples, function (i, tuple) {

							// Map tuples (progress, done, fail) to arguments (done, fail, progress)
							var fn = isFunction(fns[tuple[4]]) && fns[tuple[4]];

							// deferred.progress(function() { bind to newDefer or newDefer.notify })
							// deferred.done(function() { bind to newDefer or newDefer.resolve })
							// deferred.fail(function() { bind to newDefer or newDefer.reject })
							deferred[tuple[1]](function () {
								var returned = fn && fn.apply(this, arguments);
								if (returned && isFunction(returned.promise)) {
									returned.promise().progress(newDefer.notify).done(newDefer.resolve).fail(newDefer.reject);
								} else {
									newDefer[tuple[0] + "With"](this, fn ? [returned] : arguments);
								}
							});
						});
						fns = null;
					}).promise();
				},
				then: function then(onFulfilled, onRejected, onProgress) {
					var maxDepth = 0;
					function resolve(depth, deferred, handler, special) {
						return function () {
							var that = this,
							    args = arguments,
							    mightThrow = function mightThrow() {
								var returned, then;

								// Support: Promises/A+ section 2.3.3.3.3
								// https://promisesaplus.com/#point-59
								// Ignore double-resolution attempts
								if (depth < maxDepth) {
									return;
								}

								returned = handler.apply(that, args);

								// Support: Promises/A+ section 2.3.1
								// https://promisesaplus.com/#point-48
								if (returned === deferred.promise()) {
									throw new TypeError("Thenable self-resolution");
								}

								// Support: Promises/A+ sections 2.3.3.1, 3.5
								// https://promisesaplus.com/#point-54
								// https://promisesaplus.com/#point-75
								// Retrieve `then` only once
								then = returned && (

								// Support: Promises/A+ section 2.3.4
								// https://promisesaplus.com/#point-64
								// Only check objects and functions for thenability
								typeof returned === "object" || typeof returned === "function") && returned.then;

								// Handle a returned thenable
								if (isFunction(then)) {

									// Special processors (notify) just wait for resolution
									if (special) {
										then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special));

										// Normal processors (resolve) also hook into progress
									} else {

										// ...and disregard older resolution values
										maxDepth++;

										then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special), resolve(maxDepth, deferred, Identity, deferred.notifyWith));
									}

									// Handle all other returned values
								} else {

									// Only substitute handlers pass on context
									// and multiple values (non-spec behavior)
									if (handler !== Identity) {
										that = undefined;
										args = [returned];
									}

									// Process the value(s)
									// Default process is resolve
									(special || deferred.resolveWith)(that, args);
								}
							},


							// Only normal processors (resolve) catch and reject exceptions
							process = special ? mightThrow : function () {
								try {
									mightThrow();
								} catch (e) {

									if (jQuery.Deferred.exceptionHook) {
										jQuery.Deferred.exceptionHook(e, process.stackTrace);
									}

									// Support: Promises/A+ section 2.3.3.3.4.1
									// https://promisesaplus.com/#point-61
									// Ignore post-resolution exceptions
									if (depth + 1 >= maxDepth) {

										// Only substitute handlers pass on context
										// and multiple values (non-spec behavior)
										if (handler !== Thrower) {
											that = undefined;
											args = [e];
										}

										deferred.rejectWith(that, args);
									}
								}
							};

							// Support: Promises/A+ section 2.3.3.3.1
							// https://promisesaplus.com/#point-57
							// Re-resolve promises immediately to dodge false rejection from
							// subsequent errors
							if (depth) {
								process();
							} else {

								// Call an optional hook to record the stack, in case of exception
								// since it's otherwise lost when execution goes async
								if (jQuery.Deferred.getStackHook) {
									process.stackTrace = jQuery.Deferred.getStackHook();
								}
								window.setTimeout(process);
							}
						};
					}

					return jQuery.Deferred(function (newDefer) {

						// progress_handlers.add( ... )
						tuples[0][3].add(resolve(0, newDefer, isFunction(onProgress) ? onProgress : Identity, newDefer.notifyWith));

						// fulfilled_handlers.add( ... )
						tuples[1][3].add(resolve(0, newDefer, isFunction(onFulfilled) ? onFulfilled : Identity));

						// rejected_handlers.add( ... )
						tuples[2][3].add(resolve(0, newDefer, isFunction(onRejected) ? onRejected : Thrower));
					}).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function promise(obj) {
					return obj != null ? jQuery.extend(obj, _promise) : _promise;
				}
			},
			    deferred = {};

			// Add list-specific methods
			jQuery.each(tuples, function (i, tuple) {
				var list = tuple[2],
				    stateString = tuple[5];

				// promise.progress = list.add
				// promise.done = list.add
				// promise.fail = list.add
				_promise[tuple[1]] = list.add;

				// Handle state
				if (stateString) {
					list.add(function () {

						// state = "resolved" (i.e., fulfilled)
						// state = "rejected"
						_state = stateString;
					},

					// rejected_callbacks.disable
					// fulfilled_callbacks.disable
					tuples[3 - i][2].disable,

					// rejected_handlers.disable
					// fulfilled_handlers.disable
					tuples[3 - i][3].disable,

					// progress_callbacks.lock
					tuples[0][2].lock,

					// progress_handlers.lock
					tuples[0][3].lock);
				}

				// progress_handlers.fire
				// fulfilled_handlers.fire
				// rejected_handlers.fire
				list.add(tuple[3].fire);

				// deferred.notify = function() { deferred.notifyWith(...) }
				// deferred.resolve = function() { deferred.resolveWith(...) }
				// deferred.reject = function() { deferred.rejectWith(...) }
				deferred[tuple[0]] = function () {
					deferred[tuple[0] + "With"](this === deferred ? undefined : this, arguments);
					return this;
				};

				// deferred.notifyWith = list.fireWith
				// deferred.resolveWith = list.fireWith
				// deferred.rejectWith = list.fireWith
				deferred[tuple[0] + "With"] = list.fireWith;
			});

			// Make the deferred a promise
			_promise.promise(deferred);

			// Call given func if any
			if (func) {
				func.call(deferred, deferred);
			}

			// All done!
			return deferred;
		},

		// Deferred helper
		when: function when(singleValue) {
			var

			// count of uncompleted subordinates
			remaining = arguments.length,


			// count of unprocessed arguments
			i = remaining,


			// subordinate fulfillment data
			resolveContexts = Array(i),
			    resolveValues = _slice.call(arguments),


			// the master Deferred
			master = jQuery.Deferred(),


			// subordinate callback factory
			updateFunc = function updateFunc(i) {
				return function (value) {
					resolveContexts[i] = this;
					resolveValues[i] = arguments.length > 1 ? _slice.call(arguments) : value;
					if (! --remaining) {
						master.resolveWith(resolveContexts, resolveValues);
					}
				};
			};

			// Single- and empty arguments are adopted like Promise.resolve
			if (remaining <= 1) {
				adoptValue(singleValue, master.done(updateFunc(i)).resolve, master.reject, !remaining);

				// Use .then() to unwrap secondary thenables (cf. gh-3000)
				if (master.state() === "pending" || isFunction(resolveValues[i] && resolveValues[i].then)) {

					return master.then();
				}
			}

			// Multiple arguments are aggregated like Promise.all array elements
			while (i--) {
				adoptValue(resolveValues[i], updateFunc(i), master.reject);
			}

			return master.promise();
		}
	});

	// These usually indicate a programmer mistake during development,
	// warn about them ASAP rather than swallowing them by default.
	var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

	jQuery.Deferred.exceptionHook = function (error, stack) {

		// Support: IE 8 - 9 only
		// Console exists when dev tools are open, which can happen at any time
		if (window.console && window.console.warn && error && rerrorNames.test(error.name)) {
			window.console.warn("jQuery.Deferred exception: " + error.message, error.stack, stack);
		}
	};

	jQuery.readyException = function (error) {
		window.setTimeout(function () {
			throw error;
		});
	};

	// The deferred used on DOM ready
	var readyList = jQuery.Deferred();

	jQuery.fn.ready = function (fn) {

		readyList.then(fn)

		// Wrap jQuery.readyException in a function so that the lookup
		// happens at the time of error handling instead of callback
		// registration.
		.catch(function (error) {
			jQuery.readyException(error);
		});

		return this;
	};

	jQuery.extend({

		// Is the DOM ready to be used? Set to true once it occurs.
		isReady: false,

		// A counter to track how many items to wait for before
		// the ready event fires. See #6781
		readyWait: 1,

		// Handle when the DOM is ready
		ready: function ready(wait) {

			// Abort if there are pending holds or we're already ready
			if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
				return;
			}

			// Remember that the DOM is ready
			jQuery.isReady = true;

			// If a normal DOM Ready event fired, decrement, and wait if need be
			if (wait !== true && --jQuery.readyWait > 0) {
				return;
			}

			// If there are functions bound, to execute
			readyList.resolveWith(document, [jQuery]);
		}
	});

	jQuery.ready.then = readyList.then;

	// The ready event handler and self cleanup method
	function completed() {
		document.removeEventListener("DOMContentLoaded", completed);
		window.removeEventListener("load", completed);
		jQuery.ready();
	}

	// Catch cases where $(document).ready() is called
	// after the browser event has already occurred.
	// Support: IE <=9 - 10 only
	// Older IE sometimes signals "interactive" too soon
	if (document.readyState === "complete" || document.readyState !== "loading" && !document.documentElement.doScroll) {

		// Handle it asynchronously to allow scripts the opportunity to delay ready
		window.setTimeout(jQuery.ready);
	} else {

		// Use the handy event callback
		document.addEventListener("DOMContentLoaded", completed);

		// A fallback to window.onload, that will always work
		window.addEventListener("load", completed);
	}

	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	var access = function access(elems, fn, key, value, chainable, emptyGet, raw) {
		var i = 0,
		    len = elems.length,
		    bulk = key == null;

		// Sets many values
		if (toType(key) === "object") {
			chainable = true;
			for (i in key) {
				access(elems, fn, i, key[i], true, emptyGet, raw);
			}

			// Sets one value
		} else if (value !== undefined) {
			chainable = true;

			if (!isFunction(value)) {
				raw = true;
			}

			if (bulk) {

				// Bulk operations run against the entire set
				if (raw) {
					fn.call(elems, value);
					fn = null;

					// ...except when executing function values
				} else {
					bulk = fn;
					fn = function fn(elem, key, value) {
						return bulk.call(jQuery(elem), value);
					};
				}
			}

			if (fn) {
				for (; i < len; i++) {
					fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
				}
			}
		}

		if (chainable) {
			return elems;
		}

		// Gets
		if (bulk) {
			return fn.call(elems);
		}

		return len ? fn(elems[0], key) : emptyGet;
	};

	// Matches dashed string for camelizing
	var rmsPrefix = /^-ms-/,
	    rdashAlpha = /-([a-z])/g;

	// Used by camelCase as callback to replace()
	function fcamelCase(all, letter) {
		return letter.toUpperCase();
	}

	// Convert dashed to camelCase; used by the css and data modules
	// Support: IE <=9 - 11, Edge 12 - 15
	// Microsoft forgot to hump their vendor prefix (#9572)
	function camelCase(string) {
		return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
	}
	var acceptData = function acceptData(owner) {

		// Accepts only:
		//  - Node
		//    - Node.ELEMENT_NODE
		//    - Node.DOCUMENT_NODE
		//  - Object
		//    - Any
		return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;
	};

	function Data() {
		this.expando = jQuery.expando + Data.uid++;
	}

	Data.uid = 1;

	Data.prototype = {

		cache: function cache(owner) {

			// Check if the owner object already has a cache
			var value = owner[this.expando];

			// If not, create one
			if (!value) {
				value = {};

				// We can accept data for non-element nodes in modern browsers,
				// but we should not, see #8335.
				// Always return an empty object.
				if (acceptData(owner)) {

					// If it is a node unlikely to be stringify-ed or looped over
					// use plain assignment
					if (owner.nodeType) {
						owner[this.expando] = value;

						// Otherwise secure it in a non-enumerable property
						// configurable must be true to allow the property to be
						// deleted when data is removed
					} else {
						Object.defineProperty(owner, this.expando, {
							value: value,
							configurable: true
						});
					}
				}
			}

			return value;
		},
		set: function set(owner, data, value) {
			var prop,
			    cache = this.cache(owner);

			// Handle: [ owner, key, value ] args
			// Always use camelCase key (gh-2257)
			if (typeof data === "string") {
				cache[camelCase(data)] = value;

				// Handle: [ owner, { properties } ] args
			} else {

				// Copy the properties one-by-one to the cache object
				for (prop in data) {
					cache[camelCase(prop)] = data[prop];
				}
			}
			return cache;
		},
		get: function get(owner, key) {
			return key === undefined ? this.cache(owner) :

			// Always use camelCase key (gh-2257)
			owner[this.expando] && owner[this.expando][camelCase(key)];
		},
		access: function access(owner, key, value) {

			// In cases where either:
			//
			//   1. No key was specified
			//   2. A string key was specified, but no value provided
			//
			// Take the "read" path and allow the get method to determine
			// which value to return, respectively either:
			//
			//   1. The entire cache object
			//   2. The data stored at the key
			//
			if (key === undefined || key && typeof key === "string" && value === undefined) {

				return this.get(owner, key);
			}

			// When the key is not a string, or both a key and value
			// are specified, set or extend (existing objects) with either:
			//
			//   1. An object of properties
			//   2. A key and value
			//
			this.set(owner, key, value);

			// Since the "set" path can have two possible entry points
			// return the expected data based on which path was taken[*]
			return value !== undefined ? value : key;
		},
		remove: function remove(owner, key) {
			var i,
			    cache = owner[this.expando];

			if (cache === undefined) {
				return;
			}

			if (key !== undefined) {

				// Support array or space separated string of keys
				if (Array.isArray(key)) {

					// If key is an array of keys...
					// We always set camelCase keys, so remove that.
					key = key.map(camelCase);
				} else {
					key = camelCase(key);

					// If a key with the spaces exists, use it.
					// Otherwise, create an array by matching non-whitespace
					key = key in cache ? [key] : key.match(rnothtmlwhite) || [];
				}

				i = key.length;

				while (i--) {
					delete cache[key[i]];
				}
			}

			// Remove the expando if there's no more data
			if (key === undefined || jQuery.isEmptyObject(cache)) {

				// Support: Chrome <=35 - 45
				// Webkit & Blink performance suffers when deleting properties
				// from DOM nodes, so set to undefined instead
				// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
				if (owner.nodeType) {
					owner[this.expando] = undefined;
				} else {
					delete owner[this.expando];
				}
			}
		},
		hasData: function hasData(owner) {
			var cache = owner[this.expando];
			return cache !== undefined && !jQuery.isEmptyObject(cache);
		}
	};
	var dataPriv = new Data();

	var dataUser = new Data();

	//	Implementation Summary
	//
	//	1. Enforce API surface and semantic compatibility with 1.9.x branch
	//	2. Improve the module's maintainability by reducing the storage
	//		paths to a single mechanism.
	//	3. Use the same single mechanism to support "private" and "user" data.
	//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
	//	5. Avoid exposing implementation details on user objects (eg. expando properties)
	//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

	var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	    rmultiDash = /[A-Z]/g;

	function getData(data) {
		if (data === "true") {
			return true;
		}

		if (data === "false") {
			return false;
		}

		if (data === "null") {
			return null;
		}

		// Only convert to a number if it doesn't change the string
		if (data === +data + "") {
			return +data;
		}

		if (rbrace.test(data)) {
			return JSON.parse(data);
		}

		return data;
	}

	function dataAttr(elem, key, data) {
		var name;

		// If nothing was found internally, try to fetch any
		// data from the HTML5 data-* attribute
		if (data === undefined && elem.nodeType === 1) {
			name = "data-" + key.replace(rmultiDash, "-$&").toLowerCase();
			data = elem.getAttribute(name);

			if (typeof data === "string") {
				try {
					data = getData(data);
				} catch (e) {}

				// Make sure we set the data so it isn't changed later
				dataUser.set(elem, key, data);
			} else {
				data = undefined;
			}
		}
		return data;
	}

	jQuery.extend({
		hasData: function hasData(elem) {
			return dataUser.hasData(elem) || dataPriv.hasData(elem);
		},

		data: function data(elem, name, _data) {
			return dataUser.access(elem, name, _data);
		},

		removeData: function removeData(elem, name) {
			dataUser.remove(elem, name);
		},

		// TODO: Now that all calls to _data and _removeData have been replaced
		// with direct calls to dataPriv methods, these can be deprecated.
		_data: function _data(elem, name, data) {
			return dataPriv.access(elem, name, data);
		},

		_removeData: function _removeData(elem, name) {
			dataPriv.remove(elem, name);
		}
	});

	jQuery.fn.extend({
		data: function data(key, value) {
			var i,
			    name,
			    data,
			    elem = this[0],
			    attrs = elem && elem.attributes;

			// Gets all values
			if (key === undefined) {
				if (this.length) {
					data = dataUser.get(elem);

					if (elem.nodeType === 1 && !dataPriv.get(elem, "hasDataAttrs")) {
						i = attrs.length;
						while (i--) {

							// Support: IE 11 only
							// The attrs elements can be null (#14894)
							if (attrs[i]) {
								name = attrs[i].name;
								if (name.indexOf("data-") === 0) {
									name = camelCase(name.slice(5));
									dataAttr(elem, name, data[name]);
								}
							}
						}
						dataPriv.set(elem, "hasDataAttrs", true);
					}
				}

				return data;
			}

			// Sets multiple values
			if (typeof key === "object") {
				return this.each(function () {
					dataUser.set(this, key);
				});
			}

			return access(this, function (value) {
				var data;

				// The calling jQuery object (element matches) is not empty
				// (and therefore has an element appears at this[ 0 ]) and the
				// `value` parameter was not undefined. An empty jQuery object
				// will result in `undefined` for elem = this[ 0 ] which will
				// throw an exception if an attempt to read a data cache is made.
				if (elem && value === undefined) {

					// Attempt to get data from the cache
					// The key will always be camelCased in Data
					data = dataUser.get(elem, key);
					if (data !== undefined) {
						return data;
					}

					// Attempt to "discover" the data in
					// HTML5 custom data-* attrs
					data = dataAttr(elem, key);
					if (data !== undefined) {
						return data;
					}

					// We tried really hard, but the data doesn't exist.
					return;
				}

				// Set the data...
				this.each(function () {

					// We always store the camelCased key
					dataUser.set(this, key, value);
				});
			}, null, value, arguments.length > 1, null, true);
		},

		removeData: function removeData(key) {
			return this.each(function () {
				dataUser.remove(this, key);
			});
		}
	});

	jQuery.extend({
		queue: function queue(elem, type, data) {
			var queue;

			if (elem) {
				type = (type || "fx") + "queue";
				queue = dataPriv.get(elem, type);

				// Speed up dequeue by getting out quickly if this is just a lookup
				if (data) {
					if (!queue || Array.isArray(data)) {
						queue = dataPriv.access(elem, type, jQuery.makeArray(data));
					} else {
						queue.push(data);
					}
				}
				return queue || [];
			}
		},

		dequeue: function dequeue(elem, type) {
			type = type || "fx";

			var queue = jQuery.queue(elem, type),
			    startLength = queue.length,
			    fn = queue.shift(),
			    hooks = jQuery._queueHooks(elem, type),
			    next = function next() {
				jQuery.dequeue(elem, type);
			};

			// If the fx queue is dequeued, always remove the progress sentinel
			if (fn === "inprogress") {
				fn = queue.shift();
				startLength--;
			}

			if (fn) {

				// Add a progress sentinel to prevent the fx queue from being
				// automatically dequeued
				if (type === "fx") {
					queue.unshift("inprogress");
				}

				// Clear up the last queue stop function
				delete hooks.stop;
				fn.call(elem, next, hooks);
			}

			if (!startLength && hooks) {
				hooks.empty.fire();
			}
		},

		// Not public - generate a queueHooks object, or return the current one
		_queueHooks: function _queueHooks(elem, type) {
			var key = type + "queueHooks";
			return dataPriv.get(elem, key) || dataPriv.access(elem, key, {
				empty: jQuery.Callbacks("once memory").add(function () {
					dataPriv.remove(elem, [type + "queue", key]);
				})
			});
		}
	});

	jQuery.fn.extend({
		queue: function queue(type, data) {
			var setter = 2;

			if (typeof type !== "string") {
				data = type;
				type = "fx";
				setter--;
			}

			if (arguments.length < setter) {
				return jQuery.queue(this[0], type);
			}

			return data === undefined ? this : this.each(function () {
				var queue = jQuery.queue(this, type, data);

				// Ensure a hooks for this queue
				jQuery._queueHooks(this, type);

				if (type === "fx" && queue[0] !== "inprogress") {
					jQuery.dequeue(this, type);
				}
			});
		},
		dequeue: function dequeue(type) {
			return this.each(function () {
				jQuery.dequeue(this, type);
			});
		},
		clearQueue: function clearQueue(type) {
			return this.queue(type || "fx", []);
		},

		// Get a promise resolved when queues of a certain type
		// are emptied (fx is the type by default)
		promise: function promise(type, obj) {
			var tmp,
			    count = 1,
			    defer = jQuery.Deferred(),
			    elements = this,
			    i = this.length,
			    resolve = function resolve() {
				if (! --count) {
					defer.resolveWith(elements, [elements]);
				}
			};

			if (typeof type !== "string") {
				obj = type;
				type = undefined;
			}
			type = type || "fx";

			while (i--) {
				tmp = dataPriv.get(elements[i], type + "queueHooks");
				if (tmp && tmp.empty) {
					count++;
					tmp.empty.add(resolve);
				}
			}
			resolve();
			return defer.promise(obj);
		}
	});
	var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;

	var rcssNum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i");

	var cssExpand = ["Top", "Right", "Bottom", "Left"];

	var documentElement = document.documentElement;

	var isAttached = function isAttached(elem) {
		return jQuery.contains(elem.ownerDocument, elem);
	},
	    composed = { composed: true };

	// Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only
	// Check attachment across shadow DOM boundaries when possible (gh-3504)
	// Support: iOS 10.0-10.2 only
	// Early iOS 10 versions support `attachShadow` but not `getRootNode`,
	// leading to errors. We need to check for `getRootNode`.
	if (documentElement.getRootNode) {
		isAttached = function isAttached(elem) {
			return jQuery.contains(elem.ownerDocument, elem) || elem.getRootNode(composed) === elem.ownerDocument;
		};
	}
	var isHiddenWithinTree = function isHiddenWithinTree(elem, el) {

		// isHiddenWithinTree might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;

		// Inline style trumps all
		return elem.style.display === "none" || elem.style.display === "" &&

		// Otherwise, check computed style
		// Support: Firefox <=43 - 45
		// Disconnected elements can have computed display: none, so first confirm that elem is
		// in the document.
		isAttached(elem) && jQuery.css(elem, "display") === "none";
	};

	var swap = function swap(elem, options, callback, args) {
		var ret,
		    name,
		    old = {};

		// Remember the old values, and insert the new ones
		for (name in options) {
			old[name] = elem.style[name];
			elem.style[name] = options[name];
		}

		ret = callback.apply(elem, args || []);

		// Revert the old values
		for (name in options) {
			elem.style[name] = old[name];
		}

		return ret;
	};

	function adjustCSS(elem, prop, valueParts, tween) {
		var adjusted,
		    scale,
		    maxIterations = 20,
		    currentValue = tween ? function () {
			return tween.cur();
		} : function () {
			return jQuery.css(elem, prop, "");
		},
		    initial = currentValue(),
		    unit = valueParts && valueParts[3] || (jQuery.cssNumber[prop] ? "" : "px"),


		// Starting value computation is required for potential unit mismatches
		initialInUnit = elem.nodeType && (jQuery.cssNumber[prop] || unit !== "px" && +initial) && rcssNum.exec(jQuery.css(elem, prop));

		if (initialInUnit && initialInUnit[3] !== unit) {

			// Support: Firefox <=54
			// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
			initial = initial / 2;

			// Trust units reported by jQuery.css
			unit = unit || initialInUnit[3];

			// Iteratively approximate from a nonzero starting point
			initialInUnit = +initial || 1;

			while (maxIterations--) {

				// Evaluate and update our best guess (doubling guesses that zero out).
				// Finish if the scale equals or crosses 1 (making the old*new product non-positive).
				jQuery.style(elem, prop, initialInUnit + unit);
				if ((1 - scale) * (1 - (scale = currentValue() / initial || 0.5)) <= 0) {
					maxIterations = 0;
				}
				initialInUnit = initialInUnit / scale;
			}

			initialInUnit = initialInUnit * 2;
			jQuery.style(elem, prop, initialInUnit + unit);

			// Make sure we update the tween properties later on
			valueParts = valueParts || [];
		}

		if (valueParts) {
			initialInUnit = +initialInUnit || +initial || 0;

			// Apply relative offset (+=/-=) if specified
			adjusted = valueParts[1] ? initialInUnit + (valueParts[1] + 1) * valueParts[2] : +valueParts[2];
			if (tween) {
				tween.unit = unit;
				tween.start = initialInUnit;
				tween.end = adjusted;
			}
		}
		return adjusted;
	}

	var defaultDisplayMap = {};

	function getDefaultDisplay(elem) {
		var temp,
		    doc = elem.ownerDocument,
		    nodeName = elem.nodeName,
		    display = defaultDisplayMap[nodeName];

		if (display) {
			return display;
		}

		temp = doc.body.appendChild(doc.createElement(nodeName));
		display = jQuery.css(temp, "display");

		temp.parentNode.removeChild(temp);

		if (display === "none") {
			display = "block";
		}
		defaultDisplayMap[nodeName] = display;

		return display;
	}

	function showHide(elements, show) {
		var display,
		    elem,
		    values = [],
		    index = 0,
		    length = elements.length;

		// Determine new display value for elements that need to change
		for (; index < length; index++) {
			elem = elements[index];
			if (!elem.style) {
				continue;
			}

			display = elem.style.display;
			if (show) {

				// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
				// check is required in this first loop unless we have a nonempty display value (either
				// inline or about-to-be-restored)
				if (display === "none") {
					values[index] = dataPriv.get(elem, "display") || null;
					if (!values[index]) {
						elem.style.display = "";
					}
				}
				if (elem.style.display === "" && isHiddenWithinTree(elem)) {
					values[index] = getDefaultDisplay(elem);
				}
			} else {
				if (display !== "none") {
					values[index] = "none";

					// Remember what we're overwriting
					dataPriv.set(elem, "display", display);
				}
			}
		}

		// Set the display of the elements in a second loop to avoid constant reflow
		for (index = 0; index < length; index++) {
			if (values[index] != null) {
				elements[index].style.display = values[index];
			}
		}

		return elements;
	}

	jQuery.fn.extend({
		show: function show() {
			return showHide(this, true);
		},
		hide: function hide() {
			return showHide(this);
		},
		toggle: function toggle(state) {
			if (typeof state === "boolean") {
				return state ? this.show() : this.hide();
			}

			return this.each(function () {
				if (isHiddenWithinTree(this)) {
					jQuery(this).show();
				} else {
					jQuery(this).hide();
				}
			});
		}
	});
	var rcheckableType = /^(?:checkbox|radio)$/i;

	var rtagName = /<([a-z][^\/\0>\x20\t\r\n\f]*)/i;

	var rscriptType = /^$|^module$|\/(?:java|ecma)script/i;

	// We have to close these tags to support XHTML (#13200)
	var wrapMap = {

		// Support: IE <=9 only
		option: [1, "<select multiple='multiple'>", "</select>"],

		// XHTML parsers do not magically insert elements in the
		// same way that tag soup parsers do. So we cannot shorten
		// this by omitting <tbody> or other required elements.
		thead: [1, "<table>", "</table>"],
		col: [2, "<table><colgroup>", "</colgroup></table>"],
		tr: [2, "<table><tbody>", "</tbody></table>"],
		td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],

		_default: [0, "", ""]
	};

	// Support: IE <=9 only
	wrapMap.optgroup = wrapMap.option;

	wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
	wrapMap.th = wrapMap.td;

	function getAll(context, tag) {

		// Support: IE <=9 - 11 only
		// Use typeof to avoid zero-argument method invocation on host objects (#15151)
		var ret;

		if (typeof context.getElementsByTagName !== "undefined") {
			ret = context.getElementsByTagName(tag || "*");
		} else if (typeof context.querySelectorAll !== "undefined") {
			ret = context.querySelectorAll(tag || "*");
		} else {
			ret = [];
		}

		if (tag === undefined || tag && nodeName(context, tag)) {
			return jQuery.merge([context], ret);
		}

		return ret;
	}

	// Mark scripts as having already been evaluated
	function setGlobalEval(elems, refElements) {
		var i = 0,
		    l = elems.length;

		for (; i < l; i++) {
			dataPriv.set(elems[i], "globalEval", !refElements || dataPriv.get(refElements[i], "globalEval"));
		}
	}

	var rhtml = /<|&#?\w+;/;

	function buildFragment(elems, context, scripts, selection, ignored) {
		var elem,
		    tmp,
		    tag,
		    wrap,
		    attached,
		    j,
		    fragment = context.createDocumentFragment(),
		    nodes = [],
		    i = 0,
		    l = elems.length;

		for (; i < l; i++) {
			elem = elems[i];

			if (elem || elem === 0) {

				// Add nodes directly
				if (toType(elem) === "object") {

					// Support: Android <=4.0 only, PhantomJS 1 only
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge(nodes, elem.nodeType ? [elem] : elem);

					// Convert non-html into a text node
				} else if (!rhtml.test(elem)) {
					nodes.push(context.createTextNode(elem));

					// Convert html into DOM nodes
				} else {
					tmp = tmp || fragment.appendChild(context.createElement("div"));

					// Deserialize a standard representation
					tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
					wrap = wrapMap[tag] || wrapMap._default;
					tmp.innerHTML = wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2];

					// Descend through wrappers to the right content
					j = wrap[0];
					while (j--) {
						tmp = tmp.lastChild;
					}

					// Support: Android <=4.0 only, PhantomJS 1 only
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge(nodes, tmp.childNodes);

					// Remember the top-level container
					tmp = fragment.firstChild;

					// Ensure the created nodes are orphaned (#12392)
					tmp.textContent = "";
				}
			}
		}

		// Remove wrapper from fragment
		fragment.textContent = "";

		i = 0;
		while (elem = nodes[i++]) {

			// Skip elements already in the context collection (trac-4087)
			if (selection && jQuery.inArray(elem, selection) > -1) {
				if (ignored) {
					ignored.push(elem);
				}
				continue;
			}

			attached = isAttached(elem);

			// Append to fragment
			tmp = getAll(fragment.appendChild(elem), "script");

			// Preserve script evaluation history
			if (attached) {
				setGlobalEval(tmp);
			}

			// Capture executables
			if (scripts) {
				j = 0;
				while (elem = tmp[j++]) {
					if (rscriptType.test(elem.type || "")) {
						scripts.push(elem);
					}
				}
			}
		}

		return fragment;
	}

	(function () {
		var fragment = document.createDocumentFragment(),
		    div = fragment.appendChild(document.createElement("div")),
		    input = document.createElement("input");

		// Support: Android 4.0 - 4.3 only
		// Check state lost if the name is set (#11217)
		// Support: Windows Web Apps (WWA)
		// `name` and `type` must use .setAttribute for WWA (#14901)
		input.setAttribute("type", "radio");
		input.setAttribute("checked", "checked");
		input.setAttribute("name", "t");

		div.appendChild(input);

		// Support: Android <=4.1 only
		// Older WebKit doesn't clone checked state correctly in fragments
		support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;

		// Support: IE <=11 only
		// Make sure textarea (and checkbox) defaultValue is properly cloned
		div.innerHTML = "<textarea>x</textarea>";
		support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;
	})();

	var rkeyEvent = /^key/,
	    rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
	    rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

	function returnTrue() {
		return true;
	}

	function returnFalse() {
		return false;
	}

	// Support: IE <=9 - 11+
	// focus() and blur() are asynchronous, except when they are no-op.
	// So expect focus to be synchronous when the element is already active,
	// and blur to be synchronous when the element is not already active.
	// (focus and blur are always synchronous in other supported browsers,
	// this just defines when we can count on it).
	function expectSync(elem, type) {
		return elem === safeActiveElement() === (type === "focus");
	}

	// Support: IE <=9 only
	// Accessing document.activeElement can throw unexpectedly
	// https://bugs.jquery.com/ticket/13393
	function safeActiveElement() {
		try {
			return document.activeElement;
		} catch (err) {}
	}

	function _on(elem, types, selector, data, fn, one) {
		var origFn, type;

		// Types can be a map of types/handlers
		if (typeof types === "object") {

			// ( types-Object, selector, data )
			if (typeof selector !== "string") {

				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for (type in types) {
				_on(elem, type, selector, data, types[type], one);
			}
			return elem;
		}

		if (data == null && fn == null) {

			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if (fn == null) {
			if (typeof selector === "string") {

				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {

				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if (fn === false) {
			fn = returnFalse;
		} else if (!fn) {
			return elem;
		}

		if (one === 1) {
			origFn = fn;
			fn = function fn(event) {

				// Can use an empty set, since event contains the info
				jQuery().off(event);
				return origFn.apply(this, arguments);
			};

			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
		}
		return elem.each(function () {
			jQuery.event.add(this, types, fn, data, selector);
		});
	}

	/*
  * Helper functions for managing events -- not part of the public interface.
  * Props to Dean Edwards' addEvent library for many of the ideas.
  */
	jQuery.event = {

		global: {},

		add: function add(elem, types, handler, data, selector) {

			var handleObjIn,
			    eventHandle,
			    tmp,
			    events,
			    t,
			    handleObj,
			    special,
			    handlers,
			    type,
			    namespaces,
			    origType,
			    elemData = dataPriv.get(elem);

			// Don't attach events to noData or text/comment nodes (but allow plain objects)
			if (!elemData) {
				return;
			}

			// Caller can pass in an object of custom data in lieu of the handler
			if (handler.handler) {
				handleObjIn = handler;
				handler = handleObjIn.handler;
				selector = handleObjIn.selector;
			}

			// Ensure that invalid selectors throw exceptions at attach time
			// Evaluate against documentElement in case elem is a non-element node (e.g., document)
			if (selector) {
				jQuery.find.matchesSelector(documentElement, selector);
			}

			// Make sure that the handler has a unique ID, used to find/remove it later
			if (!handler.guid) {
				handler.guid = jQuery.guid++;
			}

			// Init the element's event structure and main handler, if this is the first
			if (!(events = elemData.events)) {
				events = elemData.events = {};
			}
			if (!(eventHandle = elemData.handle)) {
				eventHandle = elemData.handle = function (e) {

					// Discard the second event of a jQuery.event.trigger() and
					// when an event is called after a page has unloaded
					return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : undefined;
				};
			}

			// Handle multiple events separated by a space
			types = (types || "").match(rnothtmlwhite) || [""];
			t = types.length;
			while (t--) {
				tmp = rtypenamespace.exec(types[t]) || [];
				type = origType = tmp[1];
				namespaces = (tmp[2] || "").split(".").sort();

				// There *must* be a type, no attaching namespace-only handlers
				if (!type) {
					continue;
				}

				// If event changes its type, use the special event handlers for the changed type
				special = jQuery.event.special[type] || {};

				// If selector defined, determine special event api type, otherwise given type
				type = (selector ? special.delegateType : special.bindType) || type;

				// Update special based on newly reset type
				special = jQuery.event.special[type] || {};

				// handleObj is passed to all event handlers
				handleObj = jQuery.extend({
					type: type,
					origType: origType,
					data: data,
					handler: handler,
					guid: handler.guid,
					selector: selector,
					needsContext: selector && jQuery.expr.match.needsContext.test(selector),
					namespace: namespaces.join(".")
				}, handleObjIn);

				// Init the event handler queue if we're the first
				if (!(handlers = events[type])) {
					handlers = events[type] = [];
					handlers.delegateCount = 0;

					// Only use addEventListener if the special events handler returns false
					if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {

						if (elem.addEventListener) {
							elem.addEventListener(type, eventHandle);
						}
					}
				}

				if (special.add) {
					special.add.call(elem, handleObj);

					if (!handleObj.handler.guid) {
						handleObj.handler.guid = handler.guid;
					}
				}

				// Add to the element's handler list, delegates in front
				if (selector) {
					handlers.splice(handlers.delegateCount++, 0, handleObj);
				} else {
					handlers.push(handleObj);
				}

				// Keep track of which events have ever been used, for event optimization
				jQuery.event.global[type] = true;
			}
		},

		// Detach an event or set of events from an element
		remove: function remove(elem, types, handler, selector, mappedTypes) {

			var j,
			    origCount,
			    tmp,
			    events,
			    t,
			    handleObj,
			    special,
			    handlers,
			    type,
			    namespaces,
			    origType,
			    elemData = dataPriv.hasData(elem) && dataPriv.get(elem);

			if (!elemData || !(events = elemData.events)) {
				return;
			}

			// Once for each type.namespace in types; type may be omitted
			types = (types || "").match(rnothtmlwhite) || [""];
			t = types.length;
			while (t--) {
				tmp = rtypenamespace.exec(types[t]) || [];
				type = origType = tmp[1];
				namespaces = (tmp[2] || "").split(".").sort();

				// Unbind all events (on this namespace, if provided) for the element
				if (!type) {
					for (type in events) {
						jQuery.event.remove(elem, type + types[t], handler, selector, true);
					}
					continue;
				}

				special = jQuery.event.special[type] || {};
				type = (selector ? special.delegateType : special.bindType) || type;
				handlers = events[type] || [];
				tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");

				// Remove matching events
				origCount = j = handlers.length;
				while (j--) {
					handleObj = handlers[j];

					if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
						handlers.splice(j, 1);

						if (handleObj.selector) {
							handlers.delegateCount--;
						}
						if (special.remove) {
							special.remove.call(elem, handleObj);
						}
					}
				}

				// Remove generic event handler if we removed something and no more handlers exist
				// (avoids potential for endless recursion during removal of special event handlers)
				if (origCount && !handlers.length) {
					if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {

						jQuery.removeEvent(elem, type, elemData.handle);
					}

					delete events[type];
				}
			}

			// Remove data and the expando if it's no longer used
			if (jQuery.isEmptyObject(events)) {
				dataPriv.remove(elem, "handle events");
			}
		},

		dispatch: function dispatch(nativeEvent) {

			// Make a writable jQuery.Event from the native event object
			var event = jQuery.event.fix(nativeEvent);

			var i,
			    j,
			    ret,
			    matched,
			    handleObj,
			    handlerQueue,
			    args = new Array(arguments.length),
			    handlers = (dataPriv.get(this, "events") || {})[event.type] || [],
			    special = jQuery.event.special[event.type] || {};

			// Use the fix-ed jQuery.Event rather than the (read-only) native event
			args[0] = event;

			for (i = 1; i < arguments.length; i++) {
				args[i] = arguments[i];
			}

			event.delegateTarget = this;

			// Call the preDispatch hook for the mapped type, and let it bail if desired
			if (special.preDispatch && special.preDispatch.call(this, event) === false) {
				return;
			}

			// Determine handlers
			handlerQueue = jQuery.event.handlers.call(this, event, handlers);

			// Run delegates first; they may want to stop propagation beneath us
			i = 0;
			while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
				event.currentTarget = matched.elem;

				j = 0;
				while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {

					// If the event is namespaced, then each handler is only invoked if it is
					// specially universal or its namespaces are a superset of the event's.
					if (!event.rnamespace || handleObj.namespace === false || event.rnamespace.test(handleObj.namespace)) {

						event.handleObj = handleObj;
						event.data = handleObj.data;

						ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);

						if (ret !== undefined) {
							if ((event.result = ret) === false) {
								event.preventDefault();
								event.stopPropagation();
							}
						}
					}
				}
			}

			// Call the postDispatch hook for the mapped type
			if (special.postDispatch) {
				special.postDispatch.call(this, event);
			}

			return event.result;
		},

		handlers: function handlers(event, _handlers) {
			var i,
			    handleObj,
			    sel,
			    matchedHandlers,
			    matchedSelectors,
			    handlerQueue = [],
			    delegateCount = _handlers.delegateCount,
			    cur = event.target;

			// Find delegate handlers
			if (delegateCount &&

			// Support: IE <=9
			// Black-hole SVG <use> instance trees (trac-13180)
			cur.nodeType &&

			// Support: Firefox <=42
			// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
			// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
			// Support: IE 11 only
			// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
			!(event.type === "click" && event.button >= 1)) {

				for (; cur !== this; cur = cur.parentNode || this) {

					// Don't check non-elements (#13208)
					// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
					if (cur.nodeType === 1 && !(event.type === "click" && cur.disabled === true)) {
						matchedHandlers = [];
						matchedSelectors = {};
						for (i = 0; i < delegateCount; i++) {
							handleObj = _handlers[i];

							// Don't conflict with Object.prototype properties (#13203)
							sel = handleObj.selector + " ";

							if (matchedSelectors[sel] === undefined) {
								matchedSelectors[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) > -1 : jQuery.find(sel, this, null, [cur]).length;
							}
							if (matchedSelectors[sel]) {
								matchedHandlers.push(handleObj);
							}
						}
						if (matchedHandlers.length) {
							handlerQueue.push({ elem: cur, handlers: matchedHandlers });
						}
					}
				}
			}

			// Add the remaining (directly-bound) handlers
			cur = this;
			if (delegateCount < _handlers.length) {
				handlerQueue.push({ elem: cur, handlers: _handlers.slice(delegateCount) });
			}

			return handlerQueue;
		},

		addProp: function addProp(name, hook) {
			Object.defineProperty(jQuery.Event.prototype, name, {
				enumerable: true,
				configurable: true,

				get: isFunction(hook) ? function () {
					if (this.originalEvent) {
						return hook(this.originalEvent);
					}
				} : function () {
					if (this.originalEvent) {
						return this.originalEvent[name];
					}
				},

				set: function set(value) {
					Object.defineProperty(this, name, {
						enumerable: true,
						configurable: true,
						writable: true,
						value: value
					});
				}
			});
		},

		fix: function fix(originalEvent) {
			return originalEvent[jQuery.expando] ? originalEvent : new jQuery.Event(originalEvent);
		},

		special: {
			load: {

				// Prevent triggered image.load events from bubbling to window.load
				noBubble: true
			},
			click: {

				// Utilize native event to ensure correct state for checkable inputs
				setup: function setup(data) {

					// For mutual compressibility with _default, replace `this` access with a local var.
					// `|| data` is dead code meant only to preserve the variable through minification.
					var el = this || data;

					// Claim the first handler
					if (rcheckableType.test(el.type) && el.click && nodeName(el, "input")) {

						// dataPriv.set( el, "click", ... )
						leverageNative(el, "click", returnTrue);
					}

					// Return false to allow normal processing in the caller
					return false;
				},
				trigger: function trigger(data) {

					// For mutual compressibility with _default, replace `this` access with a local var.
					// `|| data` is dead code meant only to preserve the variable through minification.
					var el = this || data;

					// Force setup before triggering a click
					if (rcheckableType.test(el.type) && el.click && nodeName(el, "input")) {

						leverageNative(el, "click");
					}

					// Return non-false to allow normal event-path propagation
					return true;
				},

				// For cross-browser consistency, suppress native .click() on links
				// Also prevent it if we're currently inside a leveraged native-event stack
				_default: function _default(event) {
					var target = event.target;
					return rcheckableType.test(target.type) && target.click && nodeName(target, "input") && dataPriv.get(target, "click") || nodeName(target, "a");
				}
			},

			beforeunload: {
				postDispatch: function postDispatch(event) {

					// Support: Firefox 20+
					// Firefox doesn't alert if the returnValue field is not set.
					if (event.result !== undefined && event.originalEvent) {
						event.originalEvent.returnValue = event.result;
					}
				}
			}
		}
	};

	// Ensure the presence of an event listener that handles manually-triggered
	// synthetic events by interrupting progress until reinvoked in response to
	// *native* events that it fires directly, ensuring that state changes have
	// already occurred before other listeners are invoked.
	function leverageNative(el, type, expectSync) {

		// Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add
		if (!expectSync) {
			if (dataPriv.get(el, type) === undefined) {
				jQuery.event.add(el, type, returnTrue);
			}
			return;
		}

		// Register the controller as a special universal handler for all event namespaces
		dataPriv.set(el, type, false);
		jQuery.event.add(el, type, {
			namespace: false,
			handler: function handler(event) {
				var notAsync,
				    result,
				    saved = dataPriv.get(this, type);

				if (event.isTrigger & 1 && this[type]) {

					// Interrupt processing of the outer synthetic .trigger()ed event
					// Saved data should be false in such cases, but might be a leftover capture object
					// from an async native handler (gh-4350)
					if (!saved.length) {

						// Store arguments for use when handling the inner native event
						// There will always be at least one argument (an event object), so this array
						// will not be confused with a leftover capture object.
						saved = _slice.call(arguments);
						dataPriv.set(this, type, saved);

						// Trigger the native event and capture its result
						// Support: IE <=9 - 11+
						// focus() and blur() are asynchronous
						notAsync = expectSync(this, type);
						this[type]();
						result = dataPriv.get(this, type);
						if (saved !== result || notAsync) {
							dataPriv.set(this, type, false);
						} else {
							result = {};
						}
						if (saved !== result) {

							// Cancel the outer synthetic event
							event.stopImmediatePropagation();
							event.preventDefault();
							return result.value;
						}

						// If this is an inner synthetic event for an event with a bubbling surrogate
						// (focus or blur), assume that the surrogate already propagated from triggering the
						// native event and prevent that from happening again here.
						// This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the
						// bubbling surrogate propagates *after* the non-bubbling base), but that seems
						// less bad than duplication.
					} else if ((jQuery.event.special[type] || {}).delegateType) {
						event.stopPropagation();
					}

					// If this is a native event triggered above, everything is now in order
					// Fire an inner synthetic event with the original arguments
				} else if (saved.length) {

					// ...and capture the result
					dataPriv.set(this, type, {
						value: jQuery.event.trigger(

						// Support: IE <=9 - 11+
						// Extend with the prototype to reset the above stopImmediatePropagation()
						jQuery.extend(saved[0], jQuery.Event.prototype), saved.slice(1), this)
					});

					// Abort handling of the native event
					event.stopImmediatePropagation();
				}
			}
		});
	}

	jQuery.removeEvent = function (elem, type, handle) {

		// This "if" is needed for plain objects
		if (elem.removeEventListener) {
			elem.removeEventListener(type, handle);
		}
	};

	jQuery.Event = function (src, props) {

		// Allow instantiation without the 'new' keyword
		if (!(this instanceof jQuery.Event)) {
			return new jQuery.Event(src, props);
		}

		// Event object
		if (src && src.type) {
			this.originalEvent = src;
			this.type = src.type;

			// Events bubbling up the document may have been marked as prevented
			// by a handler lower down the tree; reflect the correct value.
			this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined &&

			// Support: Android <=2.3 only
			src.returnValue === false ? returnTrue : returnFalse;

			// Create target properties
			// Support: Safari <=6 - 7 only
			// Target should not be a text node (#504, #13143)
			this.target = src.target && src.target.nodeType === 3 ? src.target.parentNode : src.target;

			this.currentTarget = src.currentTarget;
			this.relatedTarget = src.relatedTarget;

			// Event type
		} else {
			this.type = src;
		}

		// Put explicitly provided properties onto the event object
		if (props) {
			jQuery.extend(this, props);
		}

		// Create a timestamp if incoming event doesn't have one
		this.timeStamp = src && src.timeStamp || Date.now();

		// Mark it as fixed
		this[jQuery.expando] = true;
	};

	// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
	// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
	jQuery.Event.prototype = {
		constructor: jQuery.Event,
		isDefaultPrevented: returnFalse,
		isPropagationStopped: returnFalse,
		isImmediatePropagationStopped: returnFalse,
		isSimulated: false,

		preventDefault: function preventDefault() {
			var e = this.originalEvent;

			this.isDefaultPrevented = returnTrue;

			if (e && !this.isSimulated) {
				e.preventDefault();
			}
		},
		stopPropagation: function stopPropagation() {
			var e = this.originalEvent;

			this.isPropagationStopped = returnTrue;

			if (e && !this.isSimulated) {
				e.stopPropagation();
			}
		},
		stopImmediatePropagation: function stopImmediatePropagation() {
			var e = this.originalEvent;

			this.isImmediatePropagationStopped = returnTrue;

			if (e && !this.isSimulated) {
				e.stopImmediatePropagation();
			}

			this.stopPropagation();
		}
	};

	// Includes all common event props including KeyEvent and MouseEvent specific props
	jQuery.each({
		altKey: true,
		bubbles: true,
		cancelable: true,
		changedTouches: true,
		ctrlKey: true,
		detail: true,
		eventPhase: true,
		metaKey: true,
		pageX: true,
		pageY: true,
		shiftKey: true,
		view: true,
		"char": true,
		code: true,
		charCode: true,
		key: true,
		keyCode: true,
		button: true,
		buttons: true,
		clientX: true,
		clientY: true,
		offsetX: true,
		offsetY: true,
		pointerId: true,
		pointerType: true,
		screenX: true,
		screenY: true,
		targetTouches: true,
		toElement: true,
		touches: true,

		which: function which(event) {
			var button = event.button;

			// Add which for key events
			if (event.which == null && rkeyEvent.test(event.type)) {
				return event.charCode != null ? event.charCode : event.keyCode;
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			if (!event.which && button !== undefined && rmouseEvent.test(event.type)) {
				if (button & 1) {
					return 1;
				}

				if (button & 2) {
					return 3;
				}

				if (button & 4) {
					return 2;
				}

				return 0;
			}

			return event.which;
		}
	}, jQuery.event.addProp);

	jQuery.each({ focus: "focusin", blur: "focusout" }, function (type, delegateType) {
		jQuery.event.special[type] = {

			// Utilize native event if possible so blur/focus sequence is correct
			setup: function setup() {

				// Claim the first handler
				// dataPriv.set( this, "focus", ... )
				// dataPriv.set( this, "blur", ... )
				leverageNative(this, type, expectSync);

				// Return false to allow normal processing in the caller
				return false;
			},
			trigger: function trigger() {

				// Force setup before trigger
				leverageNative(this, type);

				// Return non-false to allow normal event-path propagation
				return true;
			},

			delegateType: delegateType
		};
	});

	// Create mouseenter/leave events using mouseover/out and event-time checks
	// so that event delegation works in jQuery.
	// Do the same for pointerenter/pointerleave and pointerover/pointerout
	//
	// Support: Safari 7 only
	// Safari sends mouseenter too often; see:
	// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
	// for the description of the bug (it existed in older Chrome versions as well).
	jQuery.each({
		mouseenter: "mouseover",
		mouseleave: "mouseout",
		pointerenter: "pointerover",
		pointerleave: "pointerout"
	}, function (orig, fix) {
		jQuery.event.special[orig] = {
			delegateType: fix,
			bindType: fix,

			handle: function handle(event) {
				var ret,
				    target = this,
				    related = event.relatedTarget,
				    handleObj = event.handleObj;

				// For mouseenter/leave call the handler if related is outside the target.
				// NB: No relatedTarget if the mouse left/entered the browser window
				if (!related || related !== target && !jQuery.contains(target, related)) {
					event.type = handleObj.origType;
					ret = handleObj.handler.apply(this, arguments);
					event.type = fix;
				}
				return ret;
			}
		};
	});

	jQuery.fn.extend({

		on: function on(types, selector, data, fn) {
			return _on(this, types, selector, data, fn);
		},
		one: function one(types, selector, data, fn) {
			return _on(this, types, selector, data, fn, 1);
		},
		off: function off(types, selector, fn) {
			var handleObj, type;
			if (types && types.preventDefault && types.handleObj) {

				// ( event )  dispatched jQuery.Event
				handleObj = types.handleObj;
				jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
				return this;
			}
			if (typeof types === "object") {

				// ( types-object [, selector] )
				for (type in types) {
					this.off(type, selector, types[type]);
				}
				return this;
			}
			if (selector === false || typeof selector === "function") {

				// ( types [, fn] )
				fn = selector;
				selector = undefined;
			}
			if (fn === false) {
				fn = returnFalse;
			}
			return this.each(function () {
				jQuery.event.remove(this, types, fn, selector);
			});
		}
	});

	var

	/* eslint-disable max-len */

	// See https://github.com/eslint/eslint/issues/3229
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,


	/* eslint-enable */

	// Support: IE <=10 - 11, Edge 12 - 13 only
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,


	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	    rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

	// Prefer a tbody over its parent table for containing new rows
	function manipulationTarget(elem, content) {
		if (nodeName(elem, "table") && nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr")) {

			return jQuery(elem).children("tbody")[0] || elem;
		}

		return elem;
	}

	// Replace/restore the type attribute of script elements for safe DOM manipulation
	function disableScript(elem) {
		elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
		return elem;
	}
	function restoreScript(elem) {
		if ((elem.type || "").slice(0, 5) === "true/") {
			elem.type = elem.type.slice(5);
		} else {
			elem.removeAttribute("type");
		}

		return elem;
	}

	function cloneCopyEvent(src, dest) {
		var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

		if (dest.nodeType !== 1) {
			return;
		}

		// 1. Copy private data: events, handlers, etc.
		if (dataPriv.hasData(src)) {
			pdataOld = dataPriv.access(src);
			pdataCur = dataPriv.set(dest, pdataOld);
			events = pdataOld.events;

			if (events) {
				delete pdataCur.handle;
				pdataCur.events = {};

				for (type in events) {
					for (i = 0, l = events[type].length; i < l; i++) {
						jQuery.event.add(dest, type, events[type][i]);
					}
				}
			}
		}

		// 2. Copy user data
		if (dataUser.hasData(src)) {
			udataOld = dataUser.access(src);
			udataCur = jQuery.extend({}, udataOld);

			dataUser.set(dest, udataCur);
		}
	}

	// Fix IE bugs, see support tests
	function fixInput(src, dest) {
		var nodeName = dest.nodeName.toLowerCase();

		// Fails to persist the checked state of a cloned checkbox or radio button.
		if (nodeName === "input" && rcheckableType.test(src.type)) {
			dest.checked = src.checked;

			// Fails to return the selected option to the default selected state when cloning options
		} else if (nodeName === "input" || nodeName === "textarea") {
			dest.defaultValue = src.defaultValue;
		}
	}

	function domManip(collection, args, callback, ignored) {

		// Flatten any nested arrays
		args = concat.apply([], args);

		var fragment,
		    first,
		    scripts,
		    hasScripts,
		    node,
		    doc,
		    i = 0,
		    l = collection.length,
		    iNoClone = l - 1,
		    value = args[0],
		    valueIsFunction = isFunction(value);

		// We can't cloneNode fragments that contain checked, in WebKit
		if (valueIsFunction || l > 1 && typeof value === "string" && !support.checkClone && rchecked.test(value)) {
			return collection.each(function (index) {
				var self = collection.eq(index);
				if (valueIsFunction) {
					args[0] = value.call(this, index, self.html());
				}
				domManip(self, args, callback, ignored);
			});
		}

		if (l) {
			fragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored);
			first = fragment.firstChild;

			if (fragment.childNodes.length === 1) {
				fragment = first;
			}

			// Require either new content or an interest in ignored elements to invoke the callback
			if (first || ignored) {
				scripts = jQuery.map(getAll(fragment, "script"), disableScript);
				hasScripts = scripts.length;

				// Use the original fragment for the last item
				// instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for (; i < l; i++) {
					node = fragment;

					if (i !== iNoClone) {
						node = jQuery.clone(node, true, true);

						// Keep references to cloned scripts for later restoration
						if (hasScripts) {

							// Support: Android <=4.0 only, PhantomJS 1 only
							// push.apply(_, arraylike) throws on ancient WebKit
							jQuery.merge(scripts, getAll(node, "script"));
						}
					}

					callback.call(collection[i], node, i);
				}

				if (hasScripts) {
					doc = scripts[scripts.length - 1].ownerDocument;

					// Reenable scripts
					jQuery.map(scripts, restoreScript);

					// Evaluate executable scripts on first document insertion
					for (i = 0; i < hasScripts; i++) {
						node = scripts[i];
						if (rscriptType.test(node.type || "") && !dataPriv.access(node, "globalEval") && jQuery.contains(doc, node)) {

							if (node.src && (node.type || "").toLowerCase() !== "module") {

								// Optional AJAX dependency, but won't run scripts if not present
								if (jQuery._evalUrl && !node.noModule) {
									jQuery._evalUrl(node.src, {
										nonce: node.nonce || node.getAttribute("nonce")
									});
								}
							} else {
								DOMEval(node.textContent.replace(rcleanScript, ""), node, doc);
							}
						}
					}
				}
			}
		}

		return collection;
	}

	function _remove(elem, selector, keepData) {
		var node,
		    nodes = selector ? jQuery.filter(selector, elem) : elem,
		    i = 0;

		for (; (node = nodes[i]) != null; i++) {
			if (!keepData && node.nodeType === 1) {
				jQuery.cleanData(getAll(node));
			}

			if (node.parentNode) {
				if (keepData && isAttached(node)) {
					setGlobalEval(getAll(node, "script"));
				}
				node.parentNode.removeChild(node);
			}
		}

		return elem;
	}

	jQuery.extend({
		htmlPrefilter: function htmlPrefilter(html) {
			return html.replace(rxhtmlTag, "<$1></$2>");
		},

		clone: function clone(elem, dataAndEvents, deepDataAndEvents) {
			var i,
			    l,
			    srcElements,
			    destElements,
			    clone = elem.cloneNode(true),
			    inPage = isAttached(elem);

			// Fix IE cloning issues
			if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {

				// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
				destElements = getAll(clone);
				srcElements = getAll(elem);

				for (i = 0, l = srcElements.length; i < l; i++) {
					fixInput(srcElements[i], destElements[i]);
				}
			}

			// Copy the events from the original to the clone
			if (dataAndEvents) {
				if (deepDataAndEvents) {
					srcElements = srcElements || getAll(elem);
					destElements = destElements || getAll(clone);

					for (i = 0, l = srcElements.length; i < l; i++) {
						cloneCopyEvent(srcElements[i], destElements[i]);
					}
				} else {
					cloneCopyEvent(elem, clone);
				}
			}

			// Preserve script evaluation history
			destElements = getAll(clone, "script");
			if (destElements.length > 0) {
				setGlobalEval(destElements, !inPage && getAll(elem, "script"));
			}

			// Return the cloned set
			return clone;
		},

		cleanData: function cleanData(elems) {
			var data,
			    elem,
			    type,
			    special = jQuery.event.special,
			    i = 0;

			for (; (elem = elems[i]) !== undefined; i++) {
				if (acceptData(elem)) {
					if (data = elem[dataPriv.expando]) {
						if (data.events) {
							for (type in data.events) {
								if (special[type]) {
									jQuery.event.remove(elem, type);

									// This is a shortcut to avoid jQuery.event.remove's overhead
								} else {
									jQuery.removeEvent(elem, type, data.handle);
								}
							}
						}

						// Support: Chrome <=35 - 45+
						// Assign undefined instead of using delete, see Data#remove
						elem[dataPriv.expando] = undefined;
					}
					if (elem[dataUser.expando]) {

						// Support: Chrome <=35 - 45+
						// Assign undefined instead of using delete, see Data#remove
						elem[dataUser.expando] = undefined;
					}
				}
			}
		}
	});

	jQuery.fn.extend({
		detach: function detach(selector) {
			return _remove(this, selector, true);
		},

		remove: function remove(selector) {
			return _remove(this, selector);
		},

		text: function text(value) {
			return access(this, function (value) {
				return value === undefined ? jQuery.text(this) : this.empty().each(function () {
					if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
						this.textContent = value;
					}
				});
			}, null, value, arguments.length);
		},

		append: function append() {
			return domManip(this, arguments, function (elem) {
				if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
					var target = manipulationTarget(this, elem);
					target.appendChild(elem);
				}
			});
		},

		prepend: function prepend() {
			return domManip(this, arguments, function (elem) {
				if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
					var target = manipulationTarget(this, elem);
					target.insertBefore(elem, target.firstChild);
				}
			});
		},

		before: function before() {
			return domManip(this, arguments, function (elem) {
				if (this.parentNode) {
					this.parentNode.insertBefore(elem, this);
				}
			});
		},

		after: function after() {
			return domManip(this, arguments, function (elem) {
				if (this.parentNode) {
					this.parentNode.insertBefore(elem, this.nextSibling);
				}
			});
		},

		empty: function empty() {
			var elem,
			    i = 0;

			for (; (elem = this[i]) != null; i++) {
				if (elem.nodeType === 1) {

					// Prevent memory leaks
					jQuery.cleanData(getAll(elem, false));

					// Remove any remaining nodes
					elem.textContent = "";
				}
			}

			return this;
		},

		clone: function clone(dataAndEvents, deepDataAndEvents) {
			dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
			deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

			return this.map(function () {
				return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
			});
		},

		html: function html(value) {
			return access(this, function (value) {
				var elem = this[0] || {},
				    i = 0,
				    l = this.length;

				if (value === undefined && elem.nodeType === 1) {
					return elem.innerHTML;
				}

				// See if we can take a shortcut and just use innerHTML
				if (typeof value === "string" && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()]) {

					value = jQuery.htmlPrefilter(value);

					try {
						for (; i < l; i++) {
							elem = this[i] || {};

							// Remove element nodes and prevent memory leaks
							if (elem.nodeType === 1) {
								jQuery.cleanData(getAll(elem, false));
								elem.innerHTML = value;
							}
						}

						elem = 0;

						// If using innerHTML throws an exception, use the fallback method
					} catch (e) {}
				}

				if (elem) {
					this.empty().append(value);
				}
			}, null, value, arguments.length);
		},

		replaceWith: function replaceWith() {
			var ignored = [];

			// Make the changes, replacing each non-ignored context element with the new content
			return domManip(this, arguments, function (elem) {
				var parent = this.parentNode;

				if (jQuery.inArray(this, ignored) < 0) {
					jQuery.cleanData(getAll(this));
					if (parent) {
						parent.replaceChild(elem, this);
					}
				}

				// Force callback invocation
			}, ignored);
		}
	});

	jQuery.each({
		appendTo: "append",
		prependTo: "prepend",
		insertBefore: "before",
		insertAfter: "after",
		replaceAll: "replaceWith"
	}, function (name, original) {
		jQuery.fn[name] = function (selector) {
			var elems,
			    ret = [],
			    insert = jQuery(selector),
			    last = insert.length - 1,
			    i = 0;

			for (; i <= last; i++) {
				elems = i === last ? this : this.clone(true);
				jQuery(insert[i])[original](elems);

				// Support: Android <=4.0 only, PhantomJS 1 only
				// .get() because push.apply(_, arraylike) throws on ancient WebKit
				push.apply(ret, elems.get());
			}

			return this.pushStack(ret);
		};
	});
	var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");

	var getStyles = function getStyles(elem) {

		// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if (!view || !view.opener) {
			view = window;
		}

		return view.getComputedStyle(elem);
	};

	var rboxStyle = new RegExp(cssExpand.join("|"), "i");

	(function () {

		// Executing both pixelPosition & boxSizingReliable tests require only one layout
		// so they're executed at the same time to save the second computation.
		function computeStyleTests() {

			// This is a singleton, we need to execute it only once
			if (!div) {
				return;
			}

			container.style.cssText = "position:absolute;left:-11111px;width:60px;" + "margin-top:1px;padding:0;border:0";
			div.style.cssText = "position:relative;display:block;box-sizing:border-box;overflow:scroll;" + "margin:auto;border:1px;padding:1px;" + "width:60%;top:1%";
			documentElement.appendChild(container).appendChild(div);

			var divStyle = window.getComputedStyle(div);
			pixelPositionVal = divStyle.top !== "1%";

			// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
			reliableMarginLeftVal = roundPixelMeasures(divStyle.marginLeft) === 12;

			// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
			// Some styles come back with percentage values, even though they shouldn't
			div.style.right = "60%";
			pixelBoxStylesVal = roundPixelMeasures(divStyle.right) === 36;

			// Support: IE 9 - 11 only
			// Detect misreporting of content dimensions for box-sizing:border-box elements
			boxSizingReliableVal = roundPixelMeasures(divStyle.width) === 36;

			// Support: IE 9 only
			// Detect overflow:scroll screwiness (gh-3699)
			// Support: Chrome <=64
			// Don't get tricked when zoom affects offsetWidth (gh-4029)
			div.style.position = "absolute";
			scrollboxSizeVal = roundPixelMeasures(div.offsetWidth / 3) === 12;

			documentElement.removeChild(container);

			// Nullify the div so it wouldn't be stored in the memory and
			// it will also be a sign that checks already performed
			div = null;
		}

		function roundPixelMeasures(measure) {
			return Math.round(parseFloat(measure));
		}

		var pixelPositionVal,
		    boxSizingReliableVal,
		    scrollboxSizeVal,
		    pixelBoxStylesVal,
		    reliableMarginLeftVal,
		    container = document.createElement("div"),
		    div = document.createElement("div");

		// Finish early in limited (non-browser) environments
		if (!div.style) {
			return;
		}

		// Support: IE <=9 - 11 only
		// Style of cloned element affects source element cloned (#8908)
		div.style.backgroundClip = "content-box";
		div.cloneNode(true).style.backgroundClip = "";
		support.clearCloneStyle = div.style.backgroundClip === "content-box";

		jQuery.extend(support, {
			boxSizingReliable: function boxSizingReliable() {
				computeStyleTests();
				return boxSizingReliableVal;
			},
			pixelBoxStyles: function pixelBoxStyles() {
				computeStyleTests();
				return pixelBoxStylesVal;
			},
			pixelPosition: function pixelPosition() {
				computeStyleTests();
				return pixelPositionVal;
			},
			reliableMarginLeft: function reliableMarginLeft() {
				computeStyleTests();
				return reliableMarginLeftVal;
			},
			scrollboxSize: function scrollboxSize() {
				computeStyleTests();
				return scrollboxSizeVal;
			}
		});
	})();

	function curCSS(elem, name, computed) {
		var width,
		    minWidth,
		    maxWidth,
		    ret,


		// Support: Firefox 51+
		// Retrieving style before computed somehow
		// fixes an issue with getting wrong values
		// on detached elements
		style = elem.style;

		computed = computed || getStyles(elem);

		// getPropertyValue is needed for:
		//   .css('filter') (IE 9 only, #12537)
		//   .css('--customProperty) (#3144)
		if (computed) {
			ret = computed.getPropertyValue(name) || computed[name];

			if (ret === "" && !isAttached(elem)) {
				ret = jQuery.style(elem, name);
			}

			// A tribute to the "awesome hack by Dean Edwards"
			// Android Browser returns percentage for some values,
			// but width seems to be reliably pixels.
			// This is against the CSSOM draft spec:
			// https://drafts.csswg.org/cssom/#resolved-values
			if (!support.pixelBoxStyles() && rnumnonpx.test(ret) && rboxStyle.test(name)) {

				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;

				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;

				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}

		return ret !== undefined ?

		// Support: IE <=9 - 11 only
		// IE returns zIndex value as an integer.
		ret + "" : ret;
	}

	function addGetHookIf(conditionFn, hookFn) {

		// Define the hook, we'll check on the first run if it's really needed.
		return {
			get: function get() {
				if (conditionFn()) {

					// Hook not needed (or it's not possible to use it due
					// to missing dependency), remove it.
					delete this.get;
					return;
				}

				// Hook needed; redefine it so that the support test is not executed again.
				return (this.get = hookFn).apply(this, arguments);
			}
		};
	}

	var cssPrefixes = ["Webkit", "Moz", "ms"],
	    emptyStyle = document.createElement("div").style,
	    vendorProps = {};

	// Return a vendor-prefixed property or undefined
	function vendorPropName(name) {

		// Check for vendor prefixed names
		var capName = name[0].toUpperCase() + name.slice(1),
		    i = cssPrefixes.length;

		while (i--) {
			name = cssPrefixes[i] + capName;
			if (name in emptyStyle) {
				return name;
			}
		}
	}

	// Return a potentially-mapped jQuery.cssProps or vendor prefixed property
	function finalPropName(name) {
		var final = jQuery.cssProps[name] || vendorProps[name];

		if (final) {
			return final;
		}
		if (name in emptyStyle) {
			return name;
		}
		return vendorProps[name] = vendorPropName(name) || name;
	}

	var

	// Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	    rcustomProp = /^--/,
	    cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	    cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	};

	function setPositiveNumber(elem, value, subtract) {

		// Any relative (+/-) values have already been
		// normalized at this point
		var matches = rcssNum.exec(value);
		return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max(0, matches[2] - (subtract || 0)) + (matches[3] || "px") : value;
	}

	function boxModelAdjustment(elem, dimension, box, isBorderBox, styles, computedVal) {
		var i = dimension === "width" ? 1 : 0,
		    extra = 0,
		    delta = 0;

		// Adjustment may not be necessary
		if (box === (isBorderBox ? "border" : "content")) {
			return 0;
		}

		for (; i < 4; i += 2) {

			// Both box models exclude margin
			if (box === "margin") {
				delta += jQuery.css(elem, box + cssExpand[i], true, styles);
			}

			// If we get here with a content-box, we're seeking "padding" or "border" or "margin"
			if (!isBorderBox) {

				// Add padding
				delta += jQuery.css(elem, "padding" + cssExpand[i], true, styles);

				// For "border" or "margin", add border
				if (box !== "padding") {
					delta += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);

					// But still keep track of it otherwise
				} else {
					extra += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
				}

				// If we get here with a border-box (content + padding + border), we're seeking "content" or
				// "padding" or "margin"
			} else {

				// For "content", subtract padding
				if (box === "content") {
					delta -= jQuery.css(elem, "padding" + cssExpand[i], true, styles);
				}

				// For "content" or "padding", subtract border
				if (box !== "margin") {
					delta -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
				}
			}
		}

		// Account for positive content-box scroll gutter when requested by providing computedVal
		if (!isBorderBox && computedVal >= 0) {

			// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
			// Assuming integer scroll gutter, subtract the rest and round down
			delta += Math.max(0, Math.ceil(elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] - computedVal - delta - extra - 0.5

			// If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter
			// Use an explicit zero to avoid NaN (gh-3964)
			)) || 0;
		}

		return delta;
	}

	function getWidthOrHeight(elem, dimension, extra) {

		// Start with computed style
		var styles = getStyles(elem),


		// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).
		// Fake content-box until we know it's needed to know the true value.
		boxSizingNeeded = !support.boxSizingReliable() || extra,
		    isBorderBox = boxSizingNeeded && jQuery.css(elem, "boxSizing", false, styles) === "border-box",
		    valueIsBorderBox = isBorderBox,
		    val = curCSS(elem, dimension, styles),
		    offsetProp = "offset" + dimension[0].toUpperCase() + dimension.slice(1);

		// Support: Firefox <=54
		// Return a confounding non-pixel value or feign ignorance, as appropriate.
		if (rnumnonpx.test(val)) {
			if (!extra) {
				return val;
			}
			val = "auto";
		}

		// Fall back to offsetWidth/offsetHeight when value is "auto"
		// This happens for inline elements with no explicit setting (gh-3571)
		// Support: Android <=4.1 - 4.3 only
		// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
		// Support: IE 9-11 only
		// Also use offsetWidth/offsetHeight for when box sizing is unreliable
		// We use getClientRects() to check for hidden/disconnected.
		// In those cases, the computed value can be trusted to be border-box
		if ((!support.boxSizingReliable() && isBorderBox || val === "auto" || !parseFloat(val) && jQuery.css(elem, "display", false, styles) === "inline") && elem.getClientRects().length) {

			isBorderBox = jQuery.css(elem, "boxSizing", false, styles) === "border-box";

			// Where available, offsetWidth/offsetHeight approximate border box dimensions.
			// Where not available (e.g., SVG), assume unreliable box-sizing and interpret the
			// retrieved value as a content box dimension.
			valueIsBorderBox = offsetProp in elem;
			if (valueIsBorderBox) {
				val = elem[offsetProp];
			}
		}

		// Normalize "" and auto
		val = parseFloat(val) || 0;

		// Adjust for the element's box model
		return val + boxModelAdjustment(elem, dimension, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles,

		// Provide the current computed size to request scroll gutter calculation (gh-3589)
		val) + "px";
	}

	jQuery.extend({

		// Add in style property hooks for overriding the default
		// behavior of getting and setting a style property
		cssHooks: {
			opacity: {
				get: function get(elem, computed) {
					if (computed) {

						// We should always get a number back from opacity
						var ret = curCSS(elem, "opacity");
						return ret === "" ? "1" : ret;
					}
				}
			}
		},

		// Don't automatically add "px" to these possibly-unitless properties
		cssNumber: {
			"animationIterationCount": true,
			"columnCount": true,
			"fillOpacity": true,
			"flexGrow": true,
			"flexShrink": true,
			"fontWeight": true,
			"gridArea": true,
			"gridColumn": true,
			"gridColumnEnd": true,
			"gridColumnStart": true,
			"gridRow": true,
			"gridRowEnd": true,
			"gridRowStart": true,
			"lineHeight": true,
			"opacity": true,
			"order": true,
			"orphans": true,
			"widows": true,
			"zIndex": true,
			"zoom": true
		},

		// Add in properties whose names you wish to fix before
		// setting or getting the value
		cssProps: {},

		// Get and set the style property on a DOM Node
		style: function style(elem, name, value, extra) {

			// Don't set styles on text and comment nodes
			if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
				return;
			}

			// Make sure that we're working with the right name
			var ret,
			    type,
			    hooks,
			    origName = camelCase(name),
			    isCustomProp = rcustomProp.test(name),
			    style = elem.style;

			// Make sure that we're working with the right name. We don't
			// want to query the value if it is a CSS custom property
			// since they are user-defined.
			if (!isCustomProp) {
				name = finalPropName(origName);
			}

			// Gets hook for the prefixed version, then unprefixed version
			hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

			// Check if we're setting a value
			if (value !== undefined) {
				type = typeof value;

				// Convert "+=" or "-=" to relative numbers (#7345)
				if (type === "string" && (ret = rcssNum.exec(value)) && ret[1]) {
					value = adjustCSS(elem, name, ret);

					// Fixes bug #9237
					type = "number";
				}

				// Make sure that null and NaN values aren't set (#7116)
				if (value == null || value !== value) {
					return;
				}

				// If a number was passed in, add the unit (except for certain CSS properties)
				// The isCustomProp check can be removed in jQuery 4.0 when we only auto-append
				// "px" to a few hardcoded values.
				if (type === "number" && !isCustomProp) {
					value += ret && ret[3] || (jQuery.cssNumber[origName] ? "" : "px");
				}

				// background-* props affect original clone's values
				if (!support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {
					style[name] = "inherit";
				}

				// If a hook was provided, use that value, otherwise just set the specified value
				if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {

					if (isCustomProp) {
						style.setProperty(name, value);
					} else {
						style[name] = value;
					}
				}
			} else {

				// If a hook was provided get the non-computed value from there
				if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {

					return ret;
				}

				// Otherwise just get the value from the style object
				return style[name];
			}
		},

		css: function css(elem, name, extra, styles) {
			var val,
			    num,
			    hooks,
			    origName = camelCase(name),
			    isCustomProp = rcustomProp.test(name);

			// Make sure that we're working with the right name. We don't
			// want to modify the value if it is a CSS custom property
			// since they are user-defined.
			if (!isCustomProp) {
				name = finalPropName(origName);
			}

			// Try prefixed name followed by the unprefixed name
			hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

			// If a hook was provided get the computed value from there
			if (hooks && "get" in hooks) {
				val = hooks.get(elem, true, extra);
			}

			// Otherwise, if a way to get the computed value exists, use that
			if (val === undefined) {
				val = curCSS(elem, name, styles);
			}

			// Convert "normal" to computed value
			if (val === "normal" && name in cssNormalTransform) {
				val = cssNormalTransform[name];
			}

			// Make numeric if forced or a qualifier was provided and val looks numeric
			if (extra === "" || extra) {
				num = parseFloat(val);
				return extra === true || isFinite(num) ? num || 0 : val;
			}

			return val;
		}
	});

	jQuery.each(["height", "width"], function (i, dimension) {
		jQuery.cssHooks[dimension] = {
			get: function get(elem, computed, extra) {
				if (computed) {

					// Certain elements can have dimension info if we invisibly show them
					// but it must have a current display style that would benefit
					return rdisplayswap.test(jQuery.css(elem, "display")) && (

					// Support: Safari 8+
					// Table columns in Safari have non-zero offsetWidth & zero
					// getBoundingClientRect().width unless display is changed.
					// Support: IE <=11 only
					// Running getBoundingClientRect on a disconnected node
					// in IE throws an error.
					!elem.getClientRects().length || !elem.getBoundingClientRect().width) ? swap(elem, cssShow, function () {
						return getWidthOrHeight(elem, dimension, extra);
					}) : getWidthOrHeight(elem, dimension, extra);
				}
			},

			set: function set(elem, value, extra) {
				var matches,
				    styles = getStyles(elem),


				// Only read styles.position if the test has a chance to fail
				// to avoid forcing a reflow.
				scrollboxSizeBuggy = !support.scrollboxSize() && styles.position === "absolute",


				// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)
				boxSizingNeeded = scrollboxSizeBuggy || extra,
				    isBorderBox = boxSizingNeeded && jQuery.css(elem, "boxSizing", false, styles) === "border-box",
				    subtract = extra ? boxModelAdjustment(elem, dimension, extra, isBorderBox, styles) : 0;

				// Account for unreliable border-box dimensions by comparing offset* to computed and
				// faking a content-box to get border and padding (gh-3699)
				if (isBorderBox && scrollboxSizeBuggy) {
					subtract -= Math.ceil(elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] - parseFloat(styles[dimension]) - boxModelAdjustment(elem, dimension, "border", false, styles) - 0.5);
				}

				// Convert to pixels if value adjustment is needed
				if (subtract && (matches = rcssNum.exec(value)) && (matches[3] || "px") !== "px") {

					elem.style[dimension] = value;
					value = jQuery.css(elem, dimension);
				}

				return setPositiveNumber(elem, value, subtract);
			}
		};
	});

	jQuery.cssHooks.marginLeft = addGetHookIf(support.reliableMarginLeft, function (elem, computed) {
		if (computed) {
			return (parseFloat(curCSS(elem, "marginLeft")) || elem.getBoundingClientRect().left - swap(elem, { marginLeft: 0 }, function () {
				return elem.getBoundingClientRect().left;
			})) + "px";
		}
	});

	// These hooks are used by animate to expand properties
	jQuery.each({
		margin: "",
		padding: "",
		border: "Width"
	}, function (prefix, suffix) {
		jQuery.cssHooks[prefix + suffix] = {
			expand: function expand(value) {
				var i = 0,
				    expanded = {},


				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split(" ") : [value];

				for (; i < 4; i++) {
					expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
				}

				return expanded;
			}
		};

		if (prefix !== "margin") {
			jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
		}
	});

	jQuery.fn.extend({
		css: function css(name, value) {
			return access(this, function (elem, name, value) {
				var styles,
				    len,
				    map = {},
				    i = 0;

				if (Array.isArray(name)) {
					styles = getStyles(elem);
					len = name.length;

					for (; i < len; i++) {
						map[name[i]] = jQuery.css(elem, name[i], false, styles);
					}

					return map;
				}

				return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);
			}, name, value, arguments.length > 1);
		}
	});

	function Tween(elem, options, prop, end, easing) {
		return new Tween.prototype.init(elem, options, prop, end, easing);
	}
	jQuery.Tween = Tween;

	Tween.prototype = {
		constructor: Tween,
		init: function init(elem, options, prop, end, easing, unit) {
			this.elem = elem;
			this.prop = prop;
			this.easing = easing || jQuery.easing._default;
			this.options = options;
			this.start = this.now = this.cur();
			this.end = end;
			this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
		},
		cur: function cur() {
			var hooks = Tween.propHooks[this.prop];

			return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
		},
		run: function run(percent) {
			var eased,
			    hooks = Tween.propHooks[this.prop];

			if (this.options.duration) {
				this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);
			} else {
				this.pos = eased = percent;
			}
			this.now = (this.end - this.start) * eased + this.start;

			if (this.options.step) {
				this.options.step.call(this.elem, this.now, this);
			}

			if (hooks && hooks.set) {
				hooks.set(this);
			} else {
				Tween.propHooks._default.set(this);
			}
			return this;
		}
	};

	Tween.prototype.init.prototype = Tween.prototype;

	Tween.propHooks = {
		_default: {
			get: function get(tween) {
				var result;

				// Use a property on the element directly when it is not a DOM element,
				// or when there is no matching style property that exists.
				if (tween.elem.nodeType !== 1 || tween.elem[tween.prop] != null && tween.elem.style[tween.prop] == null) {
					return tween.elem[tween.prop];
				}

				// Passing an empty string as a 3rd parameter to .css will automatically
				// attempt a parseFloat and fallback to a string if the parse fails.
				// Simple values such as "10px" are parsed to Float;
				// complex values such as "rotate(1rad)" are returned as-is.
				result = jQuery.css(tween.elem, tween.prop, "");

				// Empty strings, null, undefined and "auto" are converted to 0.
				return !result || result === "auto" ? 0 : result;
			},
			set: function set(tween) {

				// Use step hook for back compat.
				// Use cssHook if its there.
				// Use .style if available and use plain properties where available.
				if (jQuery.fx.step[tween.prop]) {
					jQuery.fx.step[tween.prop](tween);
				} else if (tween.elem.nodeType === 1 && (jQuery.cssHooks[tween.prop] || tween.elem.style[finalPropName(tween.prop)] != null)) {
					jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
				} else {
					tween.elem[tween.prop] = tween.now;
				}
			}
		}
	};

	// Support: IE <=9 only
	// Panic based approach to setting things on disconnected nodes
	Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
		set: function set(tween) {
			if (tween.elem.nodeType && tween.elem.parentNode) {
				tween.elem[tween.prop] = tween.now;
			}
		}
	};

	jQuery.easing = {
		linear: function linear(p) {
			return p;
		},
		swing: function swing(p) {
			return 0.5 - Math.cos(p * Math.PI) / 2;
		},
		_default: "swing"
	};

	jQuery.fx = Tween.prototype.init;

	// Back compat <1.8 extension point
	jQuery.fx.step = {};

	var fxNow,
	    inProgress,
	    rfxtypes = /^(?:toggle|show|hide)$/,
	    rrun = /queueHooks$/;

	function schedule() {
		if (inProgress) {
			if (document.hidden === false && window.requestAnimationFrame) {
				window.requestAnimationFrame(schedule);
			} else {
				window.setTimeout(schedule, jQuery.fx.interval);
			}

			jQuery.fx.tick();
		}
	}

	// Animations created synchronously will run synchronously
	function createFxNow() {
		window.setTimeout(function () {
			fxNow = undefined;
		});
		return fxNow = Date.now();
	}

	// Generate parameters to create a standard animation
	function genFx(type, includeWidth) {
		var which,
		    i = 0,
		    attrs = { height: type };

		// If we include width, step value is 1 to do all cssExpand values,
		// otherwise step value is 2 to skip over Left and Right
		includeWidth = includeWidth ? 1 : 0;
		for (; i < 4; i += 2 - includeWidth) {
			which = cssExpand[i];
			attrs["margin" + which] = attrs["padding" + which] = type;
		}

		if (includeWidth) {
			attrs.opacity = attrs.width = type;
		}

		return attrs;
	}

	function createTween(value, prop, animation) {
		var tween,
		    collection = (Animation.tweeners[prop] || []).concat(Animation.tweeners["*"]),
		    index = 0,
		    length = collection.length;
		for (; index < length; index++) {
			if (tween = collection[index].call(animation, prop, value)) {

				// We're done with this property
				return tween;
			}
		}
	}

	function defaultPrefilter(elem, props, opts) {
		var prop,
		    value,
		    toggle,
		    hooks,
		    oldfire,
		    propTween,
		    restoreDisplay,
		    display,
		    isBox = "width" in props || "height" in props,
		    anim = this,
		    orig = {},
		    style = elem.style,
		    hidden = elem.nodeType && isHiddenWithinTree(elem),
		    dataShow = dataPriv.get(elem, "fxshow");

		// Queue-skipping animations hijack the fx hooks
		if (!opts.queue) {
			hooks = jQuery._queueHooks(elem, "fx");
			if (hooks.unqueued == null) {
				hooks.unqueued = 0;
				oldfire = hooks.empty.fire;
				hooks.empty.fire = function () {
					if (!hooks.unqueued) {
						oldfire();
					}
				};
			}
			hooks.unqueued++;

			anim.always(function () {

				// Ensure the complete handler is called before this completes
				anim.always(function () {
					hooks.unqueued--;
					if (!jQuery.queue(elem, "fx").length) {
						hooks.empty.fire();
					}
				});
			});
		}

		// Detect show/hide animations
		for (prop in props) {
			value = props[prop];
			if (rfxtypes.test(value)) {
				delete props[prop];
				toggle = toggle || value === "toggle";
				if (value === (hidden ? "hide" : "show")) {

					// Pretend to be hidden if this is a "show" and
					// there is still data from a stopped show/hide
					if (value === "show" && dataShow && dataShow[prop] !== undefined) {
						hidden = true;

						// Ignore all other no-op show/hide data
					} else {
						continue;
					}
				}
				orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);
			}
		}

		// Bail out if this is a no-op like .hide().hide()
		propTween = !jQuery.isEmptyObject(props);
		if (!propTween && jQuery.isEmptyObject(orig)) {
			return;
		}

		// Restrict "overflow" and "display" styles during box animations
		if (isBox && elem.nodeType === 1) {

			// Support: IE <=9 - 11, Edge 12 - 15
			// Record all 3 overflow attributes because IE does not infer the shorthand
			// from identically-valued overflowX and overflowY and Edge just mirrors
			// the overflowX value there.
			opts.overflow = [style.overflow, style.overflowX, style.overflowY];

			// Identify a display type, preferring old show/hide data over the CSS cascade
			restoreDisplay = dataShow && dataShow.display;
			if (restoreDisplay == null) {
				restoreDisplay = dataPriv.get(elem, "display");
			}
			display = jQuery.css(elem, "display");
			if (display === "none") {
				if (restoreDisplay) {
					display = restoreDisplay;
				} else {

					// Get nonempty value(s) by temporarily forcing visibility
					showHide([elem], true);
					restoreDisplay = elem.style.display || restoreDisplay;
					display = jQuery.css(elem, "display");
					showHide([elem]);
				}
			}

			// Animate inline elements as inline-block
			if (display === "inline" || display === "inline-block" && restoreDisplay != null) {
				if (jQuery.css(elem, "float") === "none") {

					// Restore the original display value at the end of pure show/hide animations
					if (!propTween) {
						anim.done(function () {
							style.display = restoreDisplay;
						});
						if (restoreDisplay == null) {
							display = style.display;
							restoreDisplay = display === "none" ? "" : display;
						}
					}
					style.display = "inline-block";
				}
			}
		}

		if (opts.overflow) {
			style.overflow = "hidden";
			anim.always(function () {
				style.overflow = opts.overflow[0];
				style.overflowX = opts.overflow[1];
				style.overflowY = opts.overflow[2];
			});
		}

		// Implement show/hide animations
		propTween = false;
		for (prop in orig) {

			// General show/hide setup for this element animation
			if (!propTween) {
				if (dataShow) {
					if ("hidden" in dataShow) {
						hidden = dataShow.hidden;
					}
				} else {
					dataShow = dataPriv.access(elem, "fxshow", { display: restoreDisplay });
				}

				// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
				if (toggle) {
					dataShow.hidden = !hidden;
				}

				// Show elements before animating them
				if (hidden) {
					showHide([elem], true);
				}

				/* eslint-disable no-loop-func */

				anim.done(function () {

					/* eslint-enable no-loop-func */

					// The final step of a "hide" animation is actually hiding the element
					if (!hidden) {
						showHide([elem]);
					}
					dataPriv.remove(elem, "fxshow");
					for (prop in orig) {
						jQuery.style(elem, prop, orig[prop]);
					}
				});
			}

			// Per-property setup
			propTween = createTween(hidden ? dataShow[prop] : 0, prop, anim);
			if (!(prop in dataShow)) {
				dataShow[prop] = propTween.start;
				if (hidden) {
					propTween.end = propTween.start;
					propTween.start = 0;
				}
			}
		}
	}

	function propFilter(props, specialEasing) {
		var index, name, easing, value, hooks;

		// camelCase, specialEasing and expand cssHook pass
		for (index in props) {
			name = camelCase(index);
			easing = specialEasing[name];
			value = props[index];
			if (Array.isArray(value)) {
				easing = value[1];
				value = props[index] = value[0];
			}

			if (index !== name) {
				props[name] = value;
				delete props[index];
			}

			hooks = jQuery.cssHooks[name];
			if (hooks && "expand" in hooks) {
				value = hooks.expand(value);
				delete props[name];

				// Not quite $.extend, this won't overwrite existing keys.
				// Reusing 'index' because we have the correct "name"
				for (index in value) {
					if (!(index in props)) {
						props[index] = value[index];
						specialEasing[index] = easing;
					}
				}
			} else {
				specialEasing[name] = easing;
			}
		}
	}

	function Animation(elem, properties, options) {
		var result,
		    stopped,
		    index = 0,
		    length = Animation.prefilters.length,
		    deferred = jQuery.Deferred().always(function () {

			// Don't match elem in the :animated selector
			delete tick.elem;
		}),
		    tick = function tick() {
			if (stopped) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
			    remaining = Math.max(0, animation.startTime + animation.duration - currentTime),


			// Support: Android 2.3 only
			// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
			temp = remaining / animation.duration || 0,
			    percent = 1 - temp,
			    index = 0,
			    length = animation.tweens.length;

			for (; index < length; index++) {
				animation.tweens[index].run(percent);
			}

			deferred.notifyWith(elem, [animation, percent, remaining]);

			// If there's more to do, yield
			if (percent < 1 && length) {
				return remaining;
			}

			// If this was an empty animation, synthesize a final progress notification
			if (!length) {
				deferred.notifyWith(elem, [animation, 1, 0]);
			}

			// Resolve the animation and report its conclusion
			deferred.resolveWith(elem, [animation]);
			return false;
		},
		    animation = deferred.promise({
			elem: elem,
			props: jQuery.extend({}, properties),
			opts: jQuery.extend(true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function createTween(prop, end) {
				var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
				animation.tweens.push(tween);
				return tween;
			},
			stop: function stop(gotoEnd) {
				var index = 0,


				// If we are going to the end, we want to run all the tweens
				// otherwise we skip this part
				length = gotoEnd ? animation.tweens.length : 0;
				if (stopped) {
					return this;
				}
				stopped = true;
				for (; index < length; index++) {
					animation.tweens[index].run(1);
				}

				// Resolve when we played the last frame; otherwise, reject
				if (gotoEnd) {
					deferred.notifyWith(elem, [animation, 1, 0]);
					deferred.resolveWith(elem, [animation, gotoEnd]);
				} else {
					deferred.rejectWith(elem, [animation, gotoEnd]);
				}
				return this;
			}
		}),
		    props = animation.props;

		propFilter(props, animation.opts.specialEasing);

		for (; index < length; index++) {
			result = Animation.prefilters[index].call(animation, elem, props, animation.opts);
			if (result) {
				if (isFunction(result.stop)) {
					jQuery._queueHooks(animation.elem, animation.opts.queue).stop = result.stop.bind(result);
				}
				return result;
			}
		}

		jQuery.map(props, createTween, animation);

		if (isFunction(animation.opts.start)) {
			animation.opts.start.call(elem, animation);
		}

		// Attach callbacks from options
		animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);

		jQuery.fx.timer(jQuery.extend(tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		}));

		return animation;
	}

	jQuery.Animation = jQuery.extend(Animation, {

		tweeners: {
			"*": [function (prop, value) {
				var tween = this.createTween(prop, value);
				adjustCSS(tween.elem, prop, rcssNum.exec(value), tween);
				return tween;
			}]
		},

		tweener: function tweener(props, callback) {
			if (isFunction(props)) {
				callback = props;
				props = ["*"];
			} else {
				props = props.match(rnothtmlwhite);
			}

			var prop,
			    index = 0,
			    length = props.length;

			for (; index < length; index++) {
				prop = props[index];
				Animation.tweeners[prop] = Animation.tweeners[prop] || [];
				Animation.tweeners[prop].unshift(callback);
			}
		},

		prefilters: [defaultPrefilter],

		prefilter: function prefilter(callback, prepend) {
			if (prepend) {
				Animation.prefilters.unshift(callback);
			} else {
				Animation.prefilters.push(callback);
			}
		}
	});

	jQuery.speed = function (speed, easing, fn) {
		var opt = speed && typeof speed === "object" ? jQuery.extend({}, speed) : {
			complete: fn || !fn && easing || isFunction(speed) && speed,
			duration: speed,
			easing: fn && easing || easing && !isFunction(easing) && easing
		};

		// Go to the end state if fx are off
		if (jQuery.fx.off) {
			opt.duration = 0;
		} else {
			if (typeof opt.duration !== "number") {
				if (opt.duration in jQuery.fx.speeds) {
					opt.duration = jQuery.fx.speeds[opt.duration];
				} else {
					opt.duration = jQuery.fx.speeds._default;
				}
			}
		}

		// Normalize opt.queue - true/undefined/null -> "fx"
		if (opt.queue == null || opt.queue === true) {
			opt.queue = "fx";
		}

		// Queueing
		opt.old = opt.complete;

		opt.complete = function () {
			if (isFunction(opt.old)) {
				opt.old.call(this);
			}

			if (opt.queue) {
				jQuery.dequeue(this, opt.queue);
			}
		};

		return opt;
	};

	jQuery.fn.extend({
		fadeTo: function fadeTo(speed, to, easing, callback) {

			// Show any hidden elements after setting opacity to 0
			return this.filter(isHiddenWithinTree).css("opacity", 0).show()

			// Animate to the value specified
			.end().animate({ opacity: to }, speed, easing, callback);
		},
		animate: function animate(prop, speed, easing, callback) {
			var empty = jQuery.isEmptyObject(prop),
			    optall = jQuery.speed(speed, easing, callback),
			    doAnimation = function doAnimation() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation(this, jQuery.extend({}, prop), optall);

				// Empty animations, or finishing resolves immediately
				if (empty || dataPriv.get(this, "finish")) {
					anim.stop(true);
				}
			};
			doAnimation.finish = doAnimation;

			return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
		},
		stop: function stop(type, clearQueue, gotoEnd) {
			var stopQueue = function stopQueue(hooks) {
				var stop = hooks.stop;
				delete hooks.stop;
				stop(gotoEnd);
			};

			if (typeof type !== "string") {
				gotoEnd = clearQueue;
				clearQueue = type;
				type = undefined;
			}
			if (clearQueue && type !== false) {
				this.queue(type || "fx", []);
			}

			return this.each(function () {
				var dequeue = true,
				    index = type != null && type + "queueHooks",
				    timers = jQuery.timers,
				    data = dataPriv.get(this);

				if (index) {
					if (data[index] && data[index].stop) {
						stopQueue(data[index]);
					}
				} else {
					for (index in data) {
						if (data[index] && data[index].stop && rrun.test(index)) {
							stopQueue(data[index]);
						}
					}
				}

				for (index = timers.length; index--;) {
					if (timers[index].elem === this && (type == null || timers[index].queue === type)) {

						timers[index].anim.stop(gotoEnd);
						dequeue = false;
						timers.splice(index, 1);
					}
				}

				// Start the next in the queue if the last step wasn't forced.
				// Timers currently will call their complete callbacks, which
				// will dequeue but only if they were gotoEnd.
				if (dequeue || !gotoEnd) {
					jQuery.dequeue(this, type);
				}
			});
		},
		finish: function finish(type) {
			if (type !== false) {
				type = type || "fx";
			}
			return this.each(function () {
				var index,
				    data = dataPriv.get(this),
				    queue = data[type + "queue"],
				    hooks = data[type + "queueHooks"],
				    timers = jQuery.timers,
				    length = queue ? queue.length : 0;

				// Enable finishing flag on private data
				data.finish = true;

				// Empty the queue first
				jQuery.queue(this, type, []);

				if (hooks && hooks.stop) {
					hooks.stop.call(this, true);
				}

				// Look for any active animations, and finish them
				for (index = timers.length; index--;) {
					if (timers[index].elem === this && timers[index].queue === type) {
						timers[index].anim.stop(true);
						timers.splice(index, 1);
					}
				}

				// Look for any animations in the old queue and finish them
				for (index = 0; index < length; index++) {
					if (queue[index] && queue[index].finish) {
						queue[index].finish.call(this);
					}
				}

				// Turn off finishing flag
				delete data.finish;
			});
		}
	});

	jQuery.each(["toggle", "show", "hide"], function (i, name) {
		var cssFn = jQuery.fn[name];
		jQuery.fn[name] = function (speed, easing, callback) {
			return speed == null || typeof speed === "boolean" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);
		};
	});

	// Generate shortcuts for custom animations
	jQuery.each({
		slideDown: genFx("show"),
		slideUp: genFx("hide"),
		slideToggle: genFx("toggle"),
		fadeIn: { opacity: "show" },
		fadeOut: { opacity: "hide" },
		fadeToggle: { opacity: "toggle" }
	}, function (name, props) {
		jQuery.fn[name] = function (speed, easing, callback) {
			return this.animate(props, speed, easing, callback);
		};
	});

	jQuery.timers = [];
	jQuery.fx.tick = function () {
		var timer,
		    i = 0,
		    timers = jQuery.timers;

		fxNow = Date.now();

		for (; i < timers.length; i++) {
			timer = timers[i];

			// Run the timer and safely remove it when done (allowing for external removal)
			if (!timer() && timers[i] === timer) {
				timers.splice(i--, 1);
			}
		}

		if (!timers.length) {
			jQuery.fx.stop();
		}
		fxNow = undefined;
	};

	jQuery.fx.timer = function (timer) {
		jQuery.timers.push(timer);
		jQuery.fx.start();
	};

	jQuery.fx.interval = 13;
	jQuery.fx.start = function () {
		if (inProgress) {
			return;
		}

		inProgress = true;
		schedule();
	};

	jQuery.fx.stop = function () {
		inProgress = null;
	};

	jQuery.fx.speeds = {
		slow: 600,
		fast: 200,

		// Default speed
		_default: 400
	};

	// Based off of the plugin by Clint Helfers, with permission.
	// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
	jQuery.fn.delay = function (time, type) {
		time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
		type = type || "fx";

		return this.queue(type, function (next, hooks) {
			var timeout = window.setTimeout(next, time);
			hooks.stop = function () {
				window.clearTimeout(timeout);
			};
		});
	};

	(function () {
		var input = document.createElement("input"),
		    select = document.createElement("select"),
		    opt = select.appendChild(document.createElement("option"));

		input.type = "checkbox";

		// Support: Android <=4.3 only
		// Default value for a checkbox should be "on"
		support.checkOn = input.value !== "";

		// Support: IE <=11 only
		// Must access selectedIndex to make default options select
		support.optSelected = opt.selected;

		// Support: IE <=11 only
		// An input loses its value after becoming a radio
		input = document.createElement("input");
		input.value = "t";
		input.type = "radio";
		support.radioValue = input.value === "t";
	})();

	var boolHook,
	    attrHandle = jQuery.expr.attrHandle;

	jQuery.fn.extend({
		attr: function attr(name, value) {
			return access(this, jQuery.attr, name, value, arguments.length > 1);
		},

		removeAttr: function removeAttr(name) {
			return this.each(function () {
				jQuery.removeAttr(this, name);
			});
		}
	});

	jQuery.extend({
		attr: function attr(elem, name, value) {
			var ret,
			    hooks,
			    nType = elem.nodeType;

			// Don't get/set attributes on text, comment and attribute nodes
			if (nType === 3 || nType === 8 || nType === 2) {
				return;
			}

			// Fallback to prop when attributes are not supported
			if (typeof elem.getAttribute === "undefined") {
				return jQuery.prop(elem, name, value);
			}

			// Attribute hooks are determined by the lowercase version
			// Grab necessary hook if one is defined
			if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
				hooks = jQuery.attrHooks[name.toLowerCase()] || (jQuery.expr.match.bool.test(name) ? boolHook : undefined);
			}

			if (value !== undefined) {
				if (value === null) {
					jQuery.removeAttr(elem, name);
					return;
				}

				if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
					return ret;
				}

				elem.setAttribute(name, value + "");
				return value;
			}

			if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
				return ret;
			}

			ret = jQuery.find.attr(elem, name);

			// Non-existent attributes return null, we normalize to undefined
			return ret == null ? undefined : ret;
		},

		attrHooks: {
			type: {
				set: function set(elem, value) {
					if (!support.radioValue && value === "radio" && nodeName(elem, "input")) {
						var val = elem.value;
						elem.setAttribute("type", value);
						if (val) {
							elem.value = val;
						}
						return value;
					}
				}
			}
		},

		removeAttr: function removeAttr(elem, value) {
			var name,
			    i = 0,


			// Attribute names can contain non-HTML whitespace characters
			// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
			attrNames = value && value.match(rnothtmlwhite);

			if (attrNames && elem.nodeType === 1) {
				while (name = attrNames[i++]) {
					elem.removeAttribute(name);
				}
			}
		}
	});

	// Hooks for boolean attributes
	boolHook = {
		set: function set(elem, value, name) {
			if (value === false) {

				// Remove boolean attributes when set to false
				jQuery.removeAttr(elem, name);
			} else {
				elem.setAttribute(name, name);
			}
			return name;
		}
	};

	jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function (i, name) {
		var getter = attrHandle[name] || jQuery.find.attr;

		attrHandle[name] = function (elem, name, isXML) {
			var ret,
			    handle,
			    lowercaseName = name.toLowerCase();

			if (!isXML) {

				// Avoid an infinite loop by temporarily removing this function from the getter
				handle = attrHandle[lowercaseName];
				attrHandle[lowercaseName] = ret;
				ret = getter(elem, name, isXML) != null ? lowercaseName : null;
				attrHandle[lowercaseName] = handle;
			}
			return ret;
		};
	});

	var rfocusable = /^(?:input|select|textarea|button)$/i,
	    rclickable = /^(?:a|area)$/i;

	jQuery.fn.extend({
		prop: function prop(name, value) {
			return access(this, jQuery.prop, name, value, arguments.length > 1);
		},

		removeProp: function removeProp(name) {
			return this.each(function () {
				delete this[jQuery.propFix[name] || name];
			});
		}
	});

	jQuery.extend({
		prop: function prop(elem, name, value) {
			var ret,
			    hooks,
			    nType = elem.nodeType;

			// Don't get/set properties on text, comment and attribute nodes
			if (nType === 3 || nType === 8 || nType === 2) {
				return;
			}

			if (nType !== 1 || !jQuery.isXMLDoc(elem)) {

				// Fix name and attach hooks
				name = jQuery.propFix[name] || name;
				hooks = jQuery.propHooks[name];
			}

			if (value !== undefined) {
				if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
					return ret;
				}

				return elem[name] = value;
			}

			if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
				return ret;
			}

			return elem[name];
		},

		propHooks: {
			tabIndex: {
				get: function get(elem) {

					// Support: IE <=9 - 11 only
					// elem.tabIndex doesn't always return the
					// correct value when it hasn't been explicitly set
					// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
					// Use proper attribute retrieval(#12072)
					var tabindex = jQuery.find.attr(elem, "tabindex");

					if (tabindex) {
						return parseInt(tabindex, 10);
					}

					if (rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href) {
						return 0;
					}

					return -1;
				}
			}
		},

		propFix: {
			"for": "htmlFor",
			"class": "className"
		}
	});

	// Support: IE <=11 only
	// Accessing the selectedIndex property
	// forces the browser to respect setting selected
	// on the option
	// The getter ensures a default option is selected
	// when in an optgroup
	// eslint rule "no-unused-expressions" is disabled for this code
	// since it considers such accessions noop
	if (!support.optSelected) {
		jQuery.propHooks.selected = {
			get: function get(elem) {

				/* eslint no-unused-expressions: "off" */

				var parent = elem.parentNode;
				if (parent && parent.parentNode) {
					parent.parentNode.selectedIndex;
				}
				return null;
			},
			set: function set(elem) {

				/* eslint no-unused-expressions: "off" */

				var parent = elem.parentNode;
				if (parent) {
					parent.selectedIndex;

					if (parent.parentNode) {
						parent.parentNode.selectedIndex;
					}
				}
			}
		};
	}

	jQuery.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function () {
		jQuery.propFix[this.toLowerCase()] = this;
	});

	// Strip and collapse whitespace according to HTML spec
	// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
	function stripAndCollapse(value) {
		var tokens = value.match(rnothtmlwhite) || [];
		return tokens.join(" ");
	}

	function getClass(elem) {
		return elem.getAttribute && elem.getAttribute("class") || "";
	}

	function classesToArray(value) {
		if (Array.isArray(value)) {
			return value;
		}
		if (typeof value === "string") {
			return value.match(rnothtmlwhite) || [];
		}
		return [];
	}

	jQuery.fn.extend({
		addClass: function addClass(value) {
			var classes,
			    elem,
			    cur,
			    curValue,
			    clazz,
			    j,
			    finalValue,
			    i = 0;

			if (isFunction(value)) {
				return this.each(function (j) {
					jQuery(this).addClass(value.call(this, j, getClass(this)));
				});
			}

			classes = classesToArray(value);

			if (classes.length) {
				while (elem = this[i++]) {
					curValue = getClass(elem);
					cur = elem.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";

					if (cur) {
						j = 0;
						while (clazz = classes[j++]) {
							if (cur.indexOf(" " + clazz + " ") < 0) {
								cur += clazz + " ";
							}
						}

						// Only assign if different to avoid unneeded rendering.
						finalValue = stripAndCollapse(cur);
						if (curValue !== finalValue) {
							elem.setAttribute("class", finalValue);
						}
					}
				}
			}

			return this;
		},

		removeClass: function removeClass(value) {
			var classes,
			    elem,
			    cur,
			    curValue,
			    clazz,
			    j,
			    finalValue,
			    i = 0;

			if (isFunction(value)) {
				return this.each(function (j) {
					jQuery(this).removeClass(value.call(this, j, getClass(this)));
				});
			}

			if (!arguments.length) {
				return this.attr("class", "");
			}

			classes = classesToArray(value);

			if (classes.length) {
				while (elem = this[i++]) {
					curValue = getClass(elem);

					// This expression is here for better compressibility (see addClass)
					cur = elem.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";

					if (cur) {
						j = 0;
						while (clazz = classes[j++]) {

							// Remove *all* instances
							while (cur.indexOf(" " + clazz + " ") > -1) {
								cur = cur.replace(" " + clazz + " ", " ");
							}
						}

						// Only assign if different to avoid unneeded rendering.
						finalValue = stripAndCollapse(cur);
						if (curValue !== finalValue) {
							elem.setAttribute("class", finalValue);
						}
					}
				}
			}

			return this;
		},

		toggleClass: function toggleClass(value, stateVal) {
			var type = typeof value,
			    isValidValue = type === "string" || Array.isArray(value);

			if (typeof stateVal === "boolean" && isValidValue) {
				return stateVal ? this.addClass(value) : this.removeClass(value);
			}

			if (isFunction(value)) {
				return this.each(function (i) {
					jQuery(this).toggleClass(value.call(this, i, getClass(this), stateVal), stateVal);
				});
			}

			return this.each(function () {
				var className, i, self, classNames;

				if (isValidValue) {

					// Toggle individual class names
					i = 0;
					self = jQuery(this);
					classNames = classesToArray(value);

					while (className = classNames[i++]) {

						// Check each className given, space separated list
						if (self.hasClass(className)) {
							self.removeClass(className);
						} else {
							self.addClass(className);
						}
					}

					// Toggle whole class name
				} else if (value === undefined || type === "boolean") {
					className = getClass(this);
					if (className) {

						// Store className if set
						dataPriv.set(this, "__className__", className);
					}

					// If the element has a class name or if we're passed `false`,
					// then remove the whole classname (if there was one, the above saved it).
					// Otherwise bring back whatever was previously saved (if anything),
					// falling back to the empty string if nothing was stored.
					if (this.setAttribute) {
						this.setAttribute("class", className || value === false ? "" : dataPriv.get(this, "__className__") || "");
					}
				}
			});
		},

		hasClass: function hasClass(selector) {
			var className,
			    elem,
			    i = 0;

			className = " " + selector + " ";
			while (elem = this[i++]) {
				if (elem.nodeType === 1 && (" " + stripAndCollapse(getClass(elem)) + " ").indexOf(className) > -1) {
					return true;
				}
			}

			return false;
		}
	});

	var rreturn = /\r/g;

	jQuery.fn.extend({
		val: function val(value) {
			var hooks,
			    ret,
			    valueIsFunction,
			    elem = this[0];

			if (!arguments.length) {
				if (elem) {
					hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];

					if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== undefined) {
						return ret;
					}

					ret = elem.value;

					// Handle most common string cases
					if (typeof ret === "string") {
						return ret.replace(rreturn, "");
					}

					// Handle cases where value is null/undef or number
					return ret == null ? "" : ret;
				}

				return;
			}

			valueIsFunction = isFunction(value);

			return this.each(function (i) {
				var val;

				if (this.nodeType !== 1) {
					return;
				}

				if (valueIsFunction) {
					val = value.call(this, i, jQuery(this).val());
				} else {
					val = value;
				}

				// Treat null/undefined as ""; convert numbers to string
				if (val == null) {
					val = "";
				} else if (typeof val === "number") {
					val += "";
				} else if (Array.isArray(val)) {
					val = jQuery.map(val, function (value) {
						return value == null ? "" : value + "";
					});
				}

				hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];

				// If set returns undefined, fall back to normal setting
				if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) {
					this.value = val;
				}
			});
		}
	});

	jQuery.extend({
		valHooks: {
			option: {
				get: function get(elem) {

					var val = jQuery.find.attr(elem, "value");
					return val != null ? val :

					// Support: IE <=10 - 11 only
					// option.text throws exceptions (#14686, #14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					stripAndCollapse(jQuery.text(elem));
				}
			},
			select: {
				get: function get(elem) {
					var value,
					    option,
					    i,
					    options = elem.options,
					    index = elem.selectedIndex,
					    one = elem.type === "select-one",
					    values = one ? null : [],
					    max = one ? index + 1 : options.length;

					if (index < 0) {
						i = max;
					} else {
						i = one ? index : 0;
					}

					// Loop through all the selected options
					for (; i < max; i++) {
						option = options[i];

						// Support: IE <=9 only
						// IE8-9 doesn't update selected after form reset (#2551)
						if ((option.selected || i === index) &&

						// Don't return options that are disabled or in a disabled optgroup
						!option.disabled && (!option.parentNode.disabled || !nodeName(option.parentNode, "optgroup"))) {

							// Get the specific value for the option
							value = jQuery(option).val();

							// We don't need an array for one selects
							if (one) {
								return value;
							}

							// Multi-Selects return an array
							values.push(value);
						}
					}

					return values;
				},

				set: function set(elem, value) {
					var optionSet,
					    option,
					    options = elem.options,
					    values = jQuery.makeArray(value),
					    i = options.length;

					while (i--) {
						option = options[i];

						/* eslint-disable no-cond-assign */

						if (option.selected = jQuery.inArray(jQuery.valHooks.option.get(option), values) > -1) {
							optionSet = true;
						}

						/* eslint-enable no-cond-assign */
					}

					// Force browsers to behave consistently when non-matching value is set
					if (!optionSet) {
						elem.selectedIndex = -1;
					}
					return values;
				}
			}
		}
	});

	// Radios and checkboxes getter/setter
	jQuery.each(["radio", "checkbox"], function () {
		jQuery.valHooks[this] = {
			set: function set(elem, value) {
				if (Array.isArray(value)) {
					return elem.checked = jQuery.inArray(jQuery(elem).val(), value) > -1;
				}
			}
		};
		if (!support.checkOn) {
			jQuery.valHooks[this].get = function (elem) {
				return elem.getAttribute("value") === null ? "on" : elem.value;
			};
		}
	});

	// Return jQuery for attributes-only inclusion


	support.focusin = "onfocusin" in window;

	var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	    stopPropagationCallback = function stopPropagationCallback(e) {
		e.stopPropagation();
	};

	jQuery.extend(jQuery.event, {

		trigger: function trigger(event, data, elem, onlyHandlers) {

			var i,
			    cur,
			    tmp,
			    bubbleType,
			    ontype,
			    handle,
			    special,
			    lastElement,
			    eventPath = [elem || document],
			    type = hasOwn.call(event, "type") ? event.type : event,
			    namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];

			cur = lastElement = tmp = elem = elem || document;

			// Don't do events on text and comment nodes
			if (elem.nodeType === 3 || elem.nodeType === 8) {
				return;
			}

			// focus/blur morphs to focusin/out; ensure we're not firing them right now
			if (rfocusMorph.test(type + jQuery.event.triggered)) {
				return;
			}

			if (type.indexOf(".") > -1) {

				// Namespaced trigger; create a regexp to match event type in handle()
				namespaces = type.split(".");
				type = namespaces.shift();
				namespaces.sort();
			}
			ontype = type.indexOf(":") < 0 && "on" + type;

			// Caller can pass in a jQuery.Event object, Object, or just an event type string
			event = event[jQuery.expando] ? event : new jQuery.Event(type, typeof event === "object" && event);

			// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
			event.isTrigger = onlyHandlers ? 2 : 3;
			event.namespace = namespaces.join(".");
			event.rnamespace = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null;

			// Clean up the event in case it is being reused
			event.result = undefined;
			if (!event.target) {
				event.target = elem;
			}

			// Clone any incoming data and prepend the event, creating the handler arg list
			data = data == null ? [event] : jQuery.makeArray(data, [event]);

			// Allow special events to draw outside the lines
			special = jQuery.event.special[type] || {};
			if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
				return;
			}

			// Determine event propagation path in advance, per W3C events spec (#9951)
			// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
			if (!onlyHandlers && !special.noBubble && !isWindow(elem)) {

				bubbleType = special.delegateType || type;
				if (!rfocusMorph.test(bubbleType + type)) {
					cur = cur.parentNode;
				}
				for (; cur; cur = cur.parentNode) {
					eventPath.push(cur);
					tmp = cur;
				}

				// Only add window if we got to document (e.g., not plain obj or detached DOM)
				if (tmp === (elem.ownerDocument || document)) {
					eventPath.push(tmp.defaultView || tmp.parentWindow || window);
				}
			}

			// Fire handlers on the event path
			i = 0;
			while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
				lastElement = cur;
				event.type = i > 1 ? bubbleType : special.bindType || type;

				// jQuery handler
				handle = (dataPriv.get(cur, "events") || {})[event.type] && dataPriv.get(cur, "handle");
				if (handle) {
					handle.apply(cur, data);
				}

				// Native handler
				handle = ontype && cur[ontype];
				if (handle && handle.apply && acceptData(cur)) {
					event.result = handle.apply(cur, data);
					if (event.result === false) {
						event.preventDefault();
					}
				}
			}
			event.type = type;

			// If nobody prevented the default action, do it now
			if (!onlyHandlers && !event.isDefaultPrevented()) {

				if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && acceptData(elem)) {

					// Call a native DOM method on the target with the same name as the event.
					// Don't do default actions on window, that's where global variables be (#6170)
					if (ontype && isFunction(elem[type]) && !isWindow(elem)) {

						// Don't re-trigger an onFOO event when we call its FOO() method
						tmp = elem[ontype];

						if (tmp) {
							elem[ontype] = null;
						}

						// Prevent re-triggering of the same event, since we already bubbled it above
						jQuery.event.triggered = type;

						if (event.isPropagationStopped()) {
							lastElement.addEventListener(type, stopPropagationCallback);
						}

						elem[type]();

						if (event.isPropagationStopped()) {
							lastElement.removeEventListener(type, stopPropagationCallback);
						}

						jQuery.event.triggered = undefined;

						if (tmp) {
							elem[ontype] = tmp;
						}
					}
				}
			}

			return event.result;
		},

		// Piggyback on a donor event to simulate a different one
		// Used only for `focus(in | out)` events
		simulate: function simulate(type, elem, event) {
			var e = jQuery.extend(new jQuery.Event(), event, {
				type: type,
				isSimulated: true
			});

			jQuery.event.trigger(e, null, elem);
		}

	});

	jQuery.fn.extend({

		trigger: function trigger(type, data) {
			return this.each(function () {
				jQuery.event.trigger(type, data, this);
			});
		},
		triggerHandler: function triggerHandler(type, data) {
			var elem = this[0];
			if (elem) {
				return jQuery.event.trigger(type, data, elem, true);
			}
		}
	});

	// Support: Firefox <=44
	// Firefox doesn't have focus(in | out) events
	// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
	//
	// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
	// focus(in | out) events fire after focus & blur events,
	// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
	// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
	if (!support.focusin) {
		jQuery.each({ focus: "focusin", blur: "focusout" }, function (orig, fix) {

			// Attach a single capturing handler on the document while someone wants focusin/focusout
			var handler = function handler(event) {
				jQuery.event.simulate(fix, event.target, jQuery.event.fix(event));
			};

			jQuery.event.special[fix] = {
				setup: function setup() {
					var doc = this.ownerDocument || this,
					    attaches = dataPriv.access(doc, fix);

					if (!attaches) {
						doc.addEventListener(orig, handler, true);
					}
					dataPriv.access(doc, fix, (attaches || 0) + 1);
				},
				teardown: function teardown() {
					var doc = this.ownerDocument || this,
					    attaches = dataPriv.access(doc, fix) - 1;

					if (!attaches) {
						doc.removeEventListener(orig, handler, true);
						dataPriv.remove(doc, fix);
					} else {
						dataPriv.access(doc, fix, attaches);
					}
				}
			};
		});
	}
	var location = window.location;

	var nonce = Date.now();

	var rquery = /\?/;

	// Cross-browser xml parsing
	jQuery.parseXML = function (data) {
		var xml;
		if (!data || typeof data !== "string") {
			return null;
		}

		// Support: IE 9 - 11 only
		// IE throws on parseFromString with invalid input.
		try {
			xml = new window.DOMParser().parseFromString(data, "text/xml");
		} catch (e) {
			xml = undefined;
		}

		if (!xml || xml.getElementsByTagName("parsererror").length) {
			jQuery.error("Invalid XML: " + data);
		}
		return xml;
	};

	var rbracket = /\[\]$/,
	    rCRLF = /\r?\n/g,
	    rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	    rsubmittable = /^(?:input|select|textarea|keygen)/i;

	function buildParams(prefix, obj, traditional, add) {
		var name;

		if (Array.isArray(obj)) {

			// Serialize array item.
			jQuery.each(obj, function (i, v) {
				if (traditional || rbracket.test(prefix)) {

					// Treat each array item as a scalar.
					add(prefix, v);
				} else {

					// Item is non-scalar (array or object), encode its numeric index.
					buildParams(prefix + "[" + (typeof v === "object" && v != null ? i : "") + "]", v, traditional, add);
				}
			});
		} else if (!traditional && toType(obj) === "object") {

			// Serialize object item.
			for (name in obj) {
				buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
			}
		} else {

			// Serialize scalar item.
			add(prefix, obj);
		}
	}

	// Serialize an array of form elements or a set of
	// key/values into a query string
	jQuery.param = function (a, traditional) {
		var prefix,
		    s = [],
		    add = function add(key, valueOrFunction) {

			// If value is a function, invoke it and use its return value
			var value = isFunction(valueOrFunction) ? valueOrFunction() : valueOrFunction;

			s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value == null ? "" : value);
		};

		if (a == null) {
			return "";
		}

		// If an array was passed in, assume that it is an array of form elements.
		if (Array.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {

			// Serialize the form elements
			jQuery.each(a, function () {
				add(this.name, this.value);
			});
		} else {

			// If traditional, encode the "old" way (the way 1.3.2 or older
			// did it), otherwise encode params recursively.
			for (prefix in a) {
				buildParams(prefix, a[prefix], traditional, add);
			}
		}

		// Return the resulting serialization
		return s.join("&");
	};

	jQuery.fn.extend({
		serialize: function serialize() {
			return jQuery.param(this.serializeArray());
		},
		serializeArray: function serializeArray() {
			return this.map(function () {

				// Can add propHook for "elements" to filter or add form elements
				var elements = jQuery.prop(this, "elements");
				return elements ? jQuery.makeArray(elements) : this;
			}).filter(function () {
				var type = this.type;

				// Use .is( ":disabled" ) so that fieldset[disabled] works
				return this.name && !jQuery(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));
			}).map(function (i, elem) {
				var val = jQuery(this).val();

				if (val == null) {
					return null;
				}

				if (Array.isArray(val)) {
					return jQuery.map(val, function (val) {
						return { name: elem.name, value: val.replace(rCRLF, "\r\n") };
					});
				}

				return { name: elem.name, value: val.replace(rCRLF, "\r\n") };
			}).get();
		}
	});

	var r20 = /%20/g,
	    rhash = /#.*$/,
	    rantiCache = /([?&])_=[^&]*/,
	    rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,


	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	    rnoContent = /^(?:GET|HEAD)$/,
	    rprotocol = /^\/\//,


	/* Prefilters
  * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
  * 2) These are called:
  *    - BEFORE asking for a transport
  *    - AFTER param serialization (s.data is a string if s.processData is true)
  * 3) key is the dataType
  * 4) the catchall symbol "*" can be used
  * 5) execution will start with transport dataType and THEN continue down to "*" if needed
  */
	prefilters = {},


	/* Transports bindings
  * 1) key is the dataType
  * 2) the catchall symbol "*" can be used
  * 3) selection will start with transport dataType and THEN go to "*" if needed
  */
	transports = {},


	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat("*"),


	// Anchor tag for parsing the document origin
	originAnchor = document.createElement("a");
	originAnchor.href = location.href;

	// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
	function addToPrefiltersOrTransports(structure) {

		// dataTypeExpression is optional and defaults to "*"
		return function (dataTypeExpression, func) {

			if (typeof dataTypeExpression !== "string") {
				func = dataTypeExpression;
				dataTypeExpression = "*";
			}

			var dataType,
			    i = 0,
			    dataTypes = dataTypeExpression.toLowerCase().match(rnothtmlwhite) || [];

			if (isFunction(func)) {

				// For each dataType in the dataTypeExpression
				while (dataType = dataTypes[i++]) {

					// Prepend if requested
					if (dataType[0] === "+") {
						dataType = dataType.slice(1) || "*";
						(structure[dataType] = structure[dataType] || []).unshift(func);

						// Otherwise append
					} else {
						(structure[dataType] = structure[dataType] || []).push(func);
					}
				}
			}
		};
	}

	// Base inspection function for prefilters and transports
	function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {

		var inspected = {},
		    seekingTransport = structure === transports;

		function inspect(dataType) {
			var selected;
			inspected[dataType] = true;
			jQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {
				var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
				if (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]) {

					options.dataTypes.unshift(dataTypeOrTransport);
					inspect(dataTypeOrTransport);
					return false;
				} else if (seekingTransport) {
					return !(selected = dataTypeOrTransport);
				}
			});
			return selected;
		}

		return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
	}

	// A special extend for ajax options
	// that takes "flat" options (not to be deep extended)
	// Fixes #9887
	function ajaxExtend(target, src) {
		var key,
		    deep,
		    flatOptions = jQuery.ajaxSettings.flatOptions || {};

		for (key in src) {
			if (src[key] !== undefined) {
				(flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];
			}
		}
		if (deep) {
			jQuery.extend(true, target, deep);
		}

		return target;
	}

	/* Handles responses to an ajax request:
  * - finds the right dataType (mediates between content-type and expected dataType)
  * - returns the corresponding response
  */
	function ajaxHandleResponses(s, jqXHR, responses) {

		var ct,
		    type,
		    finalDataType,
		    firstDataType,
		    contents = s.contents,
		    dataTypes = s.dataTypes;

		// Remove auto dataType and get content-type in the process
		while (dataTypes[0] === "*") {
			dataTypes.shift();
			if (ct === undefined) {
				ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
			}
		}

		// Check if we're dealing with a known content-type
		if (ct) {
			for (type in contents) {
				if (contents[type] && contents[type].test(ct)) {
					dataTypes.unshift(type);
					break;
				}
			}
		}

		// Check to see if we have a response for the expected dataType
		if (dataTypes[0] in responses) {
			finalDataType = dataTypes[0];
		} else {

			// Try convertible dataTypes
			for (type in responses) {
				if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
					finalDataType = type;
					break;
				}
				if (!firstDataType) {
					firstDataType = type;
				}
			}

			// Or just use first one
			finalDataType = finalDataType || firstDataType;
		}

		// If we found a dataType
		// We add the dataType to the list if needed
		// and return the corresponding response
		if (finalDataType) {
			if (finalDataType !== dataTypes[0]) {
				dataTypes.unshift(finalDataType);
			}
			return responses[finalDataType];
		}
	}

	/* Chain conversions given the request and the original response
  * Also sets the responseXXX fields on the jqXHR instance
  */
	function ajaxConvert(s, response, jqXHR, isSuccess) {
		var conv2,
		    current,
		    conv,
		    tmp,
		    prev,
		    converters = {},


		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

		// Create converters map with lowercased keys
		if (dataTypes[1]) {
			for (conv in s.converters) {
				converters[conv.toLowerCase()] = s.converters[conv];
			}
		}

		current = dataTypes.shift();

		// Convert to each sequential dataType
		while (current) {

			if (s.responseFields[current]) {
				jqXHR[s.responseFields[current]] = response;
			}

			// Apply the dataFilter if provided
			if (!prev && isSuccess && s.dataFilter) {
				response = s.dataFilter(response, s.dataType);
			}

			prev = current;
			current = dataTypes.shift();

			if (current) {

				// There's only work to do if current dataType is non-auto
				if (current === "*") {

					current = prev;

					// Convert response if prev dataType is non-auto and differs from current
				} else if (prev !== "*" && prev !== current) {

					// Seek a direct converter
					conv = converters[prev + " " + current] || converters["* " + current];

					// If none found, seek a pair
					if (!conv) {
						for (conv2 in converters) {

							// If conv2 outputs current
							tmp = conv2.split(" ");
							if (tmp[1] === current) {

								// If prev can be converted to accepted input
								conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];
								if (conv) {

									// Condense equivalence converters
									if (conv === true) {
										conv = converters[conv2];

										// Otherwise, insert the intermediate dataType
									} else if (converters[conv2] !== true) {
										current = tmp[0];
										dataTypes.unshift(tmp[1]);
									}
									break;
								}
							}
						}
					}

					// Apply converter (if not an equivalence)
					if (conv !== true) {

						// Unless errors are allowed to bubble, catch and return them
						if (conv && s.throws) {
							response = conv(response);
						} else {
							try {
								response = conv(response);
							} catch (e) {
								return {
									state: "parsererror",
									error: conv ? e : "No conversion from " + prev + " to " + current
								};
							}
						}
					}
				}
			}
		}

		return { state: "success", data: response };
	}

	jQuery.extend({

		// Counter for holding the number of active queries
		active: 0,

		// Last-Modified header cache for next request
		lastModified: {},
		etag: {},

		ajaxSettings: {
			url: location.href,
			type: "GET",
			isLocal: rlocalProtocol.test(location.protocol),
			global: true,
			processData: true,
			async: true,
			contentType: "application/x-www-form-urlencoded; charset=UTF-8",

			/*
   timeout: 0,
   data: null,
   dataType: null,
   username: null,
   password: null,
   cache: null,
   throws: false,
   traditional: false,
   headers: {},
   */

			accepts: {
				"*": allTypes,
				text: "text/plain",
				html: "text/html",
				xml: "application/xml, text/xml",
				json: "application/json, text/javascript"
			},

			contents: {
				xml: /\bxml\b/,
				html: /\bhtml/,
				json: /\bjson\b/
			},

			responseFields: {
				xml: "responseXML",
				text: "responseText",
				json: "responseJSON"
			},

			// Data converters
			// Keys separate source (or catchall "*") and destination types with a single space
			converters: {

				// Convert anything to text
				"* text": String,

				// Text to html (true = no transformation)
				"text html": true,

				// Evaluate text as a json expression
				"text json": JSON.parse,

				// Parse text as xml
				"text xml": jQuery.parseXML
			},

			// For options that shouldn't be deep extended:
			// you can add your own custom options here if
			// and when you create one that shouldn't be
			// deep extended (see ajaxExtend)
			flatOptions: {
				url: true,
				context: true
			}
		},

		// Creates a full fledged settings object into target
		// with both ajaxSettings and settings fields.
		// If target is omitted, writes into ajaxSettings.
		ajaxSetup: function ajaxSetup(target, settings) {
			return settings ?

			// Building a settings object
			ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) :

			// Extending ajaxSettings
			ajaxExtend(jQuery.ajaxSettings, target);
		},

		ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
		ajaxTransport: addToPrefiltersOrTransports(transports),

		// Main method
		ajax: function ajax(url, options) {

			// If url is an object, simulate pre-1.5 signature
			if (typeof url === "object") {
				options = url;
				url = undefined;
			}

			// Force options to be an object
			options = options || {};

			var transport,


			// URL without anti-cache param
			cacheURL,


			// Response headers
			responseHeadersString,
			    responseHeaders,


			// timeout handle
			timeoutTimer,


			// Url cleanup var
			urlAnchor,


			// Request state (becomes false upon send and true upon completion)
			completed,


			// To know if global events are to be dispatched
			fireGlobals,


			// Loop variable
			i,


			// uncached part of the url
			uncached,


			// Create the final options object
			s = jQuery.ajaxSetup({}, options),


			// Callbacks context
			callbackContext = s.context || s,


			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event,


			// Deferreds
			deferred = jQuery.Deferred(),
			    completeDeferred = jQuery.Callbacks("once memory"),


			// Status-dependent callbacks
			_statusCode = s.statusCode || {},


			// Headers (they are sent all at once)
			requestHeaders = {},
			    requestHeadersNames = {},


			// Default abort message
			strAbort = "canceled",


			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function getResponseHeader(key) {
					var match;
					if (completed) {
						if (!responseHeaders) {
							responseHeaders = {};
							while (match = rheaders.exec(responseHeadersString)) {
								responseHeaders[match[1].toLowerCase() + " "] = (responseHeaders[match[1].toLowerCase() + " "] || []).concat(match[2]);
							}
						}
						match = responseHeaders[key.toLowerCase() + " "];
					}
					return match == null ? null : match.join(", ");
				},

				// Raw string
				getAllResponseHeaders: function getAllResponseHeaders() {
					return completed ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function setRequestHeader(name, value) {
					if (completed == null) {
						name = requestHeadersNames[name.toLowerCase()] = requestHeadersNames[name.toLowerCase()] || name;
						requestHeaders[name] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function overrideMimeType(type) {
					if (completed == null) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function statusCode(map) {
					var code;
					if (map) {
						if (completed) {

							// Execute the appropriate callbacks
							jqXHR.always(map[jqXHR.status]);
						} else {

							// Lazy-add the new callbacks in a way that preserves old ones
							for (code in map) {
								_statusCode[code] = [_statusCode[code], map[code]];
							}
						}
					}
					return this;
				},

				// Cancel the request
				abort: function abort(statusText) {
					var finalText = statusText || strAbort;
					if (transport) {
						transport.abort(finalText);
					}
					done(0, finalText);
					return this;
				}
			};

			// Attach deferreds
			deferred.promise(jqXHR);

			// Add protocol if not provided (prefilters might expect it)
			// Handle falsy url in the settings object (#10093: consistency with old signature)
			// We also use the url parameter if available
			s.url = ((url || s.url || location.href) + "").replace(rprotocol, location.protocol + "//");

			// Alias method option to type as per ticket #12004
			s.type = options.method || options.type || s.method || s.type;

			// Extract dataTypes list
			s.dataTypes = (s.dataType || "*").toLowerCase().match(rnothtmlwhite) || [""];

			// A cross-domain request is in order when the origin doesn't match the current origin.
			if (s.crossDomain == null) {
				urlAnchor = document.createElement("a");

				// Support: IE <=8 - 11, Edge 12 - 15
				// IE throws exception on accessing the href property if url is malformed,
				// e.g. http://example.com:80x/
				try {
					urlAnchor.href = s.url;

					// Support: IE <=8 - 11 only
					// Anchor's host property isn't correctly set when s.url is relative
					urlAnchor.href = urlAnchor.href;
					s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !== urlAnchor.protocol + "//" + urlAnchor.host;
				} catch (e) {

					// If there is an error parsing the URL, assume it is crossDomain,
					// it can be rejected by the transport if it is invalid
					s.crossDomain = true;
				}
			}

			// Convert data if not already a string
			if (s.data && s.processData && typeof s.data !== "string") {
				s.data = jQuery.param(s.data, s.traditional);
			}

			// Apply prefilters
			inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);

			// If request was aborted inside a prefilter, stop there
			if (completed) {
				return jqXHR;
			}

			// We can fire global events as of now if asked to
			// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
			fireGlobals = jQuery.event && s.global;

			// Watch for a new set of requests
			if (fireGlobals && jQuery.active++ === 0) {
				jQuery.event.trigger("ajaxStart");
			}

			// Uppercase the type
			s.type = s.type.toUpperCase();

			// Determine if request has content
			s.hasContent = !rnoContent.test(s.type);

			// Save the URL in case we're toying with the If-Modified-Since
			// and/or If-None-Match header later on
			// Remove hash to simplify url manipulation
			cacheURL = s.url.replace(rhash, "");

			// More options handling for requests with no content
			if (!s.hasContent) {

				// Remember the hash so we can put it back
				uncached = s.url.slice(cacheURL.length);

				// If data is available and should be processed, append data to url
				if (s.data && (s.processData || typeof s.data === "string")) {
					cacheURL += (rquery.test(cacheURL) ? "&" : "?") + s.data;

					// #9682: remove data so that it's not used in an eventual retry
					delete s.data;
				}

				// Add or update anti-cache param if needed
				if (s.cache === false) {
					cacheURL = cacheURL.replace(rantiCache, "$1");
					uncached = (rquery.test(cacheURL) ? "&" : "?") + "_=" + nonce++ + uncached;
				}

				// Put hash and anti-cache on the URL that will be requested (gh-1732)
				s.url = cacheURL + uncached;

				// Change '%20' to '+' if this is encoded form body content (gh-2658)
			} else if (s.data && s.processData && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0) {
				s.data = s.data.replace(r20, "+");
			}

			// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
			if (s.ifModified) {
				if (jQuery.lastModified[cacheURL]) {
					jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);
				}
				if (jQuery.etag[cacheURL]) {
					jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);
				}
			}

			// Set the correct header, if data is being sent
			if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
				jqXHR.setRequestHeader("Content-Type", s.contentType);
			}

			// Set the Accepts header for the server, depending on the dataType
			jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]);

			// Check for headers option
			for (i in s.headers) {
				jqXHR.setRequestHeader(i, s.headers[i]);
			}

			// Allow custom headers/mimetypes and early abort
			if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || completed)) {

				// Abort if not done already and return
				return jqXHR.abort();
			}

			// Aborting is no longer a cancellation
			strAbort = "abort";

			// Install callbacks on deferreds
			completeDeferred.add(s.complete);
			jqXHR.done(s.success);
			jqXHR.fail(s.error);

			// Get transport
			transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);

			// If no transport, we auto-abort
			if (!transport) {
				done(-1, "No Transport");
			} else {
				jqXHR.readyState = 1;

				// Send global event
				if (fireGlobals) {
					globalEventContext.trigger("ajaxSend", [jqXHR, s]);
				}

				// If request was aborted inside ajaxSend, stop there
				if (completed) {
					return jqXHR;
				}

				// Timeout
				if (s.async && s.timeout > 0) {
					timeoutTimer = window.setTimeout(function () {
						jqXHR.abort("timeout");
					}, s.timeout);
				}

				try {
					completed = false;
					transport.send(requestHeaders, done);
				} catch (e) {

					// Rethrow post-completion exceptions
					if (completed) {
						throw e;
					}

					// Propagate others as results
					done(-1, e);
				}
			}

			// Callback for when everything is done
			function done(status, nativeStatusText, responses, headers) {
				var isSuccess,
				    success,
				    error,
				    response,
				    modified,
				    statusText = nativeStatusText;

				// Ignore repeat invocations
				if (completed) {
					return;
				}

				completed = true;

				// Clear timeout if it exists
				if (timeoutTimer) {
					window.clearTimeout(timeoutTimer);
				}

				// Dereference transport for early garbage collection
				// (no matter how long the jqXHR object will be used)
				transport = undefined;

				// Cache response headers
				responseHeadersString = headers || "";

				// Set readyState
				jqXHR.readyState = status > 0 ? 4 : 0;

				// Determine if successful
				isSuccess = status >= 200 && status < 300 || status === 304;

				// Get response data
				if (responses) {
					response = ajaxHandleResponses(s, jqXHR, responses);
				}

				// Convert no matter what (that way responseXXX fields are always set)
				response = ajaxConvert(s, response, jqXHR, isSuccess);

				// If successful, handle type chaining
				if (isSuccess) {

					// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
					if (s.ifModified) {
						modified = jqXHR.getResponseHeader("Last-Modified");
						if (modified) {
							jQuery.lastModified[cacheURL] = modified;
						}
						modified = jqXHR.getResponseHeader("etag");
						if (modified) {
							jQuery.etag[cacheURL] = modified;
						}
					}

					// if no content
					if (status === 204 || s.type === "HEAD") {
						statusText = "nocontent";

						// if not modified
					} else if (status === 304) {
						statusText = "notmodified";

						// If we have data, let's convert it
					} else {
						statusText = response.state;
						success = response.data;
						error = response.error;
						isSuccess = !error;
					}
				} else {

					// Extract error from statusText and normalize for non-aborts
					error = statusText;
					if (status || !statusText) {
						statusText = "error";
						if (status < 0) {
							status = 0;
						}
					}
				}

				// Set data for the fake xhr object
				jqXHR.status = status;
				jqXHR.statusText = (nativeStatusText || statusText) + "";

				// Success/Error
				if (isSuccess) {
					deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);
				} else {
					deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);
				}

				// Status-dependent callbacks
				jqXHR.statusCode(_statusCode);
				_statusCode = undefined;

				if (fireGlobals) {
					globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [jqXHR, s, isSuccess ? success : error]);
				}

				// Complete
				completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);

				if (fireGlobals) {
					globalEventContext.trigger("ajaxComplete", [jqXHR, s]);

					// Handle the global AJAX counter
					if (! --jQuery.active) {
						jQuery.event.trigger("ajaxStop");
					}
				}
			}

			return jqXHR;
		},

		getJSON: function getJSON(url, data, callback) {
			return jQuery.get(url, data, callback, "json");
		},

		getScript: function getScript(url, callback) {
			return jQuery.get(url, undefined, callback, "script");
		}
	});

	jQuery.each(["get", "post"], function (i, method) {
		jQuery[method] = function (url, data, callback, type) {

			// Shift arguments if data argument was omitted
			if (isFunction(data)) {
				type = type || callback;
				callback = data;
				data = undefined;
			}

			// The url can be an options object (which then must have .url)
			return jQuery.ajax(jQuery.extend({
				url: url,
				type: method,
				dataType: type,
				data: data,
				success: callback
			}, jQuery.isPlainObject(url) && url));
		};
	});

	jQuery._evalUrl = function (url, options) {
		return jQuery.ajax({
			url: url,

			// Make this explicit, since user can override this through ajaxSetup (#11264)
			type: "GET",
			dataType: "script",
			cache: true,
			async: false,
			global: false,

			// Only evaluate the response if it is successful (gh-4126)
			// dataFilter is not invoked for failure responses, so using it instead
			// of the default converter is kludgy but it works.
			converters: {
				"text script": function textScript() {}
			},
			dataFilter: function dataFilter(response) {
				jQuery.globalEval(response, options);
			}
		});
	};

	jQuery.fn.extend({
		wrapAll: function wrapAll(html) {
			var wrap;

			if (this[0]) {
				if (isFunction(html)) {
					html = html.call(this[0]);
				}

				// The elements to wrap the target around
				wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);

				if (this[0].parentNode) {
					wrap.insertBefore(this[0]);
				}

				wrap.map(function () {
					var elem = this;

					while (elem.firstElementChild) {
						elem = elem.firstElementChild;
					}

					return elem;
				}).append(this);
			}

			return this;
		},

		wrapInner: function wrapInner(html) {
			if (isFunction(html)) {
				return this.each(function (i) {
					jQuery(this).wrapInner(html.call(this, i));
				});
			}

			return this.each(function () {
				var self = jQuery(this),
				    contents = self.contents();

				if (contents.length) {
					contents.wrapAll(html);
				} else {
					self.append(html);
				}
			});
		},

		wrap: function wrap(html) {
			var htmlIsFunction = isFunction(html);

			return this.each(function (i) {
				jQuery(this).wrapAll(htmlIsFunction ? html.call(this, i) : html);
			});
		},

		unwrap: function unwrap(selector) {
			this.parent(selector).not("body").each(function () {
				jQuery(this).replaceWith(this.childNodes);
			});
			return this;
		}
	});

	jQuery.expr.pseudos.hidden = function (elem) {
		return !jQuery.expr.pseudos.visible(elem);
	};
	jQuery.expr.pseudos.visible = function (elem) {
		return !!(elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length);
	};

	jQuery.ajaxSettings.xhr = function () {
		try {
			return new window.XMLHttpRequest();
		} catch (e) {}
	};

	var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
		0: 200,

		// Support: IE <=9 only
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	    xhrSupported = jQuery.ajaxSettings.xhr();

	support.cors = !!xhrSupported && "withCredentials" in xhrSupported;
	support.ajax = xhrSupported = !!xhrSupported;

	jQuery.ajaxTransport(function (options) {
		var _callback, errorCallback;

		// Cross domain only allowed if supported through XMLHttpRequest
		if (support.cors || xhrSupported && !options.crossDomain) {
			return {
				send: function send(headers, complete) {
					var i,
					    xhr = options.xhr();

					xhr.open(options.type, options.url, options.async, options.username, options.password);

					// Apply custom fields if provided
					if (options.xhrFields) {
						for (i in options.xhrFields) {
							xhr[i] = options.xhrFields[i];
						}
					}

					// Override mime type if needed
					if (options.mimeType && xhr.overrideMimeType) {
						xhr.overrideMimeType(options.mimeType);
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if (!options.crossDomain && !headers["X-Requested-With"]) {
						headers["X-Requested-With"] = "XMLHttpRequest";
					}

					// Set headers
					for (i in headers) {
						xhr.setRequestHeader(i, headers[i]);
					}

					// Callback
					_callback = function callback(type) {
						return function () {
							if (_callback) {
								_callback = errorCallback = xhr.onload = xhr.onerror = xhr.onabort = xhr.ontimeout = xhr.onreadystatechange = null;

								if (type === "abort") {
									xhr.abort();
								} else if (type === "error") {

									// Support: IE <=9 only
									// On a manual native abort, IE9 throws
									// errors on any property access that is not readyState
									if (typeof xhr.status !== "number") {
										complete(0, "error");
									} else {
										complete(

										// File: protocol always yields status 0; see #8605, #14207
										xhr.status, xhr.statusText);
									}
								} else {
									complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText,

									// Support: IE <=9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									(xhr.responseType || "text") !== "text" || typeof xhr.responseText !== "string" ? { binary: xhr.response } : { text: xhr.responseText }, xhr.getAllResponseHeaders());
								}
							}
						};
					};

					// Listen to events
					xhr.onload = _callback();
					errorCallback = xhr.onerror = xhr.ontimeout = _callback("error");

					// Support: IE 9 only
					// Use onreadystatechange to replace onabort
					// to handle uncaught aborts
					if (xhr.onabort !== undefined) {
						xhr.onabort = errorCallback;
					} else {
						xhr.onreadystatechange = function () {

							// Check readyState before timeout as it changes
							if (xhr.readyState === 4) {

								// Allow onerror to be called first,
								// but that will not handle a native abort
								// Also, save errorCallback to a variable
								// as xhr.onerror cannot be accessed
								window.setTimeout(function () {
									if (_callback) {
										errorCallback();
									}
								});
							}
						};
					}

					// Create the abort callback
					_callback = _callback("abort");

					try {

						// Do send the request (this may raise an exception)
						xhr.send(options.hasContent && options.data || null);
					} catch (e) {

						// #14683: Only rethrow if this hasn't been notified as an error yet
						if (_callback) {
							throw e;
						}
					}
				},

				abort: function abort() {
					if (_callback) {
						_callback();
					}
				}
			};
		}
	});

	// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
	jQuery.ajaxPrefilter(function (s) {
		if (s.crossDomain) {
			s.contents.script = false;
		}
	});

	// Install script dataType
	jQuery.ajaxSetup({
		accepts: {
			script: "text/javascript, application/javascript, " + "application/ecmascript, application/x-ecmascript"
		},
		contents: {
			script: /\b(?:java|ecma)script\b/
		},
		converters: {
			"text script": function textScript(text) {
				jQuery.globalEval(text);
				return text;
			}
		}
	});

	// Handle cache's special case and crossDomain
	jQuery.ajaxPrefilter("script", function (s) {
		if (s.cache === undefined) {
			s.cache = false;
		}
		if (s.crossDomain) {
			s.type = "GET";
		}
	});

	// Bind script tag hack transport
	jQuery.ajaxTransport("script", function (s) {

		// This transport only deals with cross domain or forced-by-attrs requests
		if (s.crossDomain || s.scriptAttrs) {
			var script, _callback2;
			return {
				send: function send(_, complete) {
					script = jQuery("<script>").attr(s.scriptAttrs || {}).prop({ charset: s.scriptCharset, src: s.url }).on("load error", _callback2 = function callback(evt) {
						script.remove();
						_callback2 = null;
						if (evt) {
							complete(evt.type === "error" ? 404 : 200, evt.type);
						}
					});

					// Use native DOM manipulation to avoid our domManip AJAX trickery
					document.head.appendChild(script[0]);
				},
				abort: function abort() {
					if (_callback2) {
						_callback2();
					}
				}
			};
		}
	});

	var oldCallbacks = [],
	    rjsonp = /(=)\?(?=&|$)|\?\?/;

	// Default jsonp settings
	jQuery.ajaxSetup({
		jsonp: "callback",
		jsonpCallback: function jsonpCallback() {
			var callback = oldCallbacks.pop() || jQuery.expando + "_" + nonce++;
			this[callback] = true;
			return callback;
		}
	});

	// Detect, normalize options and install callbacks for jsonp requests
	jQuery.ajaxPrefilter("json jsonp", function (s, originalSettings, jqXHR) {

		var callbackName,
		    overwritten,
		    responseContainer,
		    jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? "url" : typeof s.data === "string" && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0 && rjsonp.test(s.data) && "data");

		// Handle iff the expected data type is "jsonp" or we have a parameter to set
		if (jsonProp || s.dataTypes[0] === "jsonp") {

			// Get callback name, remembering preexisting value associated with it
			callbackName = s.jsonpCallback = isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;

			// Insert callback into url or form data
			if (jsonProp) {
				s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);
			} else if (s.jsonp !== false) {
				s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;
			}

			// Use data converter to retrieve json after script execution
			s.converters["script json"] = function () {
				if (!responseContainer) {
					jQuery.error(callbackName + " was not called");
				}
				return responseContainer[0];
			};

			// Force json dataType
			s.dataTypes[0] = "json";

			// Install callback
			overwritten = window[callbackName];
			window[callbackName] = function () {
				responseContainer = arguments;
			};

			// Clean-up function (fires after converters)
			jqXHR.always(function () {

				// If previous value didn't exist - remove it
				if (overwritten === undefined) {
					jQuery(window).removeProp(callbackName);

					// Otherwise restore preexisting value
				} else {
					window[callbackName] = overwritten;
				}

				// Save back as free
				if (s[callbackName]) {

					// Make sure that re-using the options doesn't screw things around
					s.jsonpCallback = originalSettings.jsonpCallback;

					// Save the callback name for future use
					oldCallbacks.push(callbackName);
				}

				// Call if it was a function and we have a response
				if (responseContainer && isFunction(overwritten)) {
					overwritten(responseContainer[0]);
				}

				responseContainer = overwritten = undefined;
			});

			// Delegate to script
			return "script";
		}
	});

	// Support: Safari 8 only
	// In Safari 8 documents created via document.implementation.createHTMLDocument
	// collapse sibling forms: the second one becomes a child of the first one.
	// Because of that, this security measure has to be disabled in Safari 8.
	// https://bugs.webkit.org/show_bug.cgi?id=137337
	support.createHTMLDocument = function () {
		var body = document.implementation.createHTMLDocument("").body;
		body.innerHTML = "<form></form><form></form>";
		return body.childNodes.length === 2;
	}();

	// Argument "data" should be string of html
	// context (optional): If specified, the fragment will be created in this context,
	// defaults to document
	// keepScripts (optional): If true, will include scripts passed in the html string
	jQuery.parseHTML = function (data, context, keepScripts) {
		if (typeof data !== "string") {
			return [];
		}
		if (typeof context === "boolean") {
			keepScripts = context;
			context = false;
		}

		var base, parsed, scripts;

		if (!context) {

			// Stop scripts or inline event handlers from being executed immediately
			// by using document.implementation
			if (support.createHTMLDocument) {
				context = document.implementation.createHTMLDocument("");

				// Set the base href for the created document
				// so any parsed elements with URLs
				// are based on the document's URL (gh-2965)
				base = context.createElement("base");
				base.href = document.location.href;
				context.head.appendChild(base);
			} else {
				context = document;
			}
		}

		parsed = rsingleTag.exec(data);
		scripts = !keepScripts && [];

		// Single tag
		if (parsed) {
			return [context.createElement(parsed[1])];
		}

		parsed = buildFragment([data], context, scripts);

		if (scripts && scripts.length) {
			jQuery(scripts).remove();
		}

		return jQuery.merge([], parsed.childNodes);
	};

	/**
  * Load a url into a page
  */
	jQuery.fn.load = function (url, params, callback) {
		var selector,
		    type,
		    response,
		    self = this,
		    off = url.indexOf(" ");

		if (off > -1) {
			selector = stripAndCollapse(url.slice(off));
			url = url.slice(0, off);
		}

		// If it's a function
		if (isFunction(params)) {

			// We assume that it's the callback
			callback = params;
			params = undefined;

			// Otherwise, build a param string
		} else if (params && typeof params === "object") {
			type = "POST";
		}

		// If we have elements to modify, make the request
		if (self.length > 0) {
			jQuery.ajax({
				url: url,

				// If "type" variable is undefined, then "GET" method will be used.
				// Make value of this field explicit since
				// user can override it through ajaxSetup method
				type: type || "GET",
				dataType: "html",
				data: params
			}).done(function (responseText) {

				// Save response for use in complete callback
				response = arguments;

				self.html(selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) :

				// Otherwise use the full result
				responseText);

				// If the request succeeds, this function gets "data", "status", "jqXHR"
				// but they are ignored because response was set above.
				// If it fails, this function gets "jqXHR", "status", "error"
			}).always(callback && function (jqXHR, status) {
				self.each(function () {
					callback.apply(this, response || [jqXHR.responseText, status, jqXHR]);
				});
			});
		}

		return this;
	};

	// Attach a bunch of functions for handling common AJAX events
	jQuery.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function (i, type) {
		jQuery.fn[type] = function (fn) {
			return this.on(type, fn);
		};
	});

	jQuery.expr.pseudos.animated = function (elem) {
		return jQuery.grep(jQuery.timers, function (fn) {
			return elem === fn.elem;
		}).length;
	};

	jQuery.offset = {
		setOffset: function setOffset(elem, options, i) {
			var curPosition,
			    curLeft,
			    curCSSTop,
			    curTop,
			    curOffset,
			    curCSSLeft,
			    calculatePosition,
			    position = jQuery.css(elem, "position"),
			    curElem = jQuery(elem),
			    props = {};

			// Set position first, in-case top/left are set even on static elem
			if (position === "static") {
				elem.style.position = "relative";
			}

			curOffset = curElem.offset();
			curCSSTop = jQuery.css(elem, "top");
			curCSSLeft = jQuery.css(elem, "left");
			calculatePosition = (position === "absolute" || position === "fixed") && (curCSSTop + curCSSLeft).indexOf("auto") > -1;

			// Need to be able to calculate position if either
			// top or left is auto and position is either absolute or fixed
			if (calculatePosition) {
				curPosition = curElem.position();
				curTop = curPosition.top;
				curLeft = curPosition.left;
			} else {
				curTop = parseFloat(curCSSTop) || 0;
				curLeft = parseFloat(curCSSLeft) || 0;
			}

			if (isFunction(options)) {

				// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
				options = options.call(elem, i, jQuery.extend({}, curOffset));
			}

			if (options.top != null) {
				props.top = options.top - curOffset.top + curTop;
			}
			if (options.left != null) {
				props.left = options.left - curOffset.left + curLeft;
			}

			if ("using" in options) {
				options.using.call(elem, props);
			} else {
				curElem.css(props);
			}
		}
	};

	jQuery.fn.extend({

		// offset() relates an element's border box to the document origin
		offset: function offset(options) {

			// Preserve chaining for setter
			if (arguments.length) {
				return options === undefined ? this : this.each(function (i) {
					jQuery.offset.setOffset(this, options, i);
				});
			}

			var rect,
			    win,
			    elem = this[0];

			if (!elem) {
				return;
			}

			// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
			// Support: IE <=11 only
			// Running getBoundingClientRect on a
			// disconnected node in IE throws an error
			if (!elem.getClientRects().length) {
				return { top: 0, left: 0 };
			}

			// Get document-relative position by adding viewport scroll to viewport-relative gBCR
			rect = elem.getBoundingClientRect();
			win = elem.ownerDocument.defaultView;
			return {
				top: rect.top + win.pageYOffset,
				left: rect.left + win.pageXOffset
			};
		},

		// position() relates an element's margin box to its offset parent's padding box
		// This corresponds to the behavior of CSS absolute positioning
		position: function position() {
			if (!this[0]) {
				return;
			}

			var offsetParent,
			    offset,
			    doc,
			    elem = this[0],
			    parentOffset = { top: 0, left: 0 };

			// position:fixed elements are offset from the viewport, which itself always has zero offset
			if (jQuery.css(elem, "position") === "fixed") {

				// Assume position:fixed implies availability of getBoundingClientRect
				offset = elem.getBoundingClientRect();
			} else {
				offset = this.offset();

				// Account for the *real* offset parent, which can be the document or its root element
				// when a statically positioned element is identified
				doc = elem.ownerDocument;
				offsetParent = elem.offsetParent || doc.documentElement;
				while (offsetParent && (offsetParent === doc.body || offsetParent === doc.documentElement) && jQuery.css(offsetParent, "position") === "static") {

					offsetParent = offsetParent.parentNode;
				}
				if (offsetParent && offsetParent !== elem && offsetParent.nodeType === 1) {

					// Incorporate borders into its offset, since they are outside its content origin
					parentOffset = jQuery(offsetParent).offset();
					parentOffset.top += jQuery.css(offsetParent, "borderTopWidth", true);
					parentOffset.left += jQuery.css(offsetParent, "borderLeftWidth", true);
				}
			}

			// Subtract parent offsets and element margins
			return {
				top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),
				left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)
			};
		},

		// This method will return documentElement in the following cases:
		// 1) For the element inside the iframe without offsetParent, this method will return
		//    documentElement of the parent window
		// 2) For the hidden or detached element
		// 3) For body or html element, i.e. in case of the html node - it will return itself
		//
		// but those exceptions were never presented as a real life use-cases
		// and might be considered as more preferable results.
		//
		// This logic, however, is not guaranteed and can change at any point in the future
		offsetParent: function offsetParent() {
			return this.map(function () {
				var offsetParent = this.offsetParent;

				while (offsetParent && jQuery.css(offsetParent, "position") === "static") {
					offsetParent = offsetParent.offsetParent;
				}

				return offsetParent || documentElement;
			});
		}
	});

	// Create scrollLeft and scrollTop methods
	jQuery.each({ scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function (method, prop) {
		var top = "pageYOffset" === prop;

		jQuery.fn[method] = function (val) {
			return access(this, function (elem, method, val) {

				// Coalesce documents and windows
				var win;
				if (isWindow(elem)) {
					win = elem;
				} else if (elem.nodeType === 9) {
					win = elem.defaultView;
				}

				if (val === undefined) {
					return win ? win[prop] : elem[method];
				}

				if (win) {
					win.scrollTo(!top ? val : win.pageXOffset, top ? val : win.pageYOffset);
				} else {
					elem[method] = val;
				}
			}, method, val, arguments.length);
		};
	});

	// Support: Safari <=7 - 9.1, Chrome <=37 - 49
	// Add the top/left cssHooks using jQuery.fn.position
	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
	// getComputedStyle returns percent when specified for top/left/bottom/right;
	// rather than make the css module depend on the offset module, just check for it here
	jQuery.each(["top", "left"], function (i, prop) {
		jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function (elem, computed) {
			if (computed) {
				computed = curCSS(elem, prop);

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + "px" : computed;
			}
		});
	});

	// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
	jQuery.each({ Height: "height", Width: "width" }, function (name, type) {
		jQuery.each({ padding: "inner" + name, content: type, "": "outer" + name }, function (defaultExtra, funcName) {

			// Margin is only for outerHeight, outerWidth
			jQuery.fn[funcName] = function (margin, value) {
				var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"),
				    extra = defaultExtra || (margin === true || value === true ? "margin" : "border");

				return access(this, function (elem, type, value) {
					var doc;

					if (isWindow(elem)) {

						// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
						return funcName.indexOf("outer") === 0 ? elem["inner" + name] : elem.document.documentElement["client" + name];
					}

					// Get document width or height
					if (elem.nodeType === 9) {
						doc = elem.documentElement;

						// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
						// whichever is greatest
						return Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name]);
					}

					return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css(elem, type, extra) :

					// Set width or height on the element
					jQuery.style(elem, type, value, extra);
				}, type, chainable ? margin : undefined, chainable);
			};
		});
	});

	jQuery.each(("blur focus focusin focusout resize scroll click dblclick " + "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " + "change select submit keydown keypress keyup contextmenu").split(" "), function (i, name) {

		// Handle event binding
		jQuery.fn[name] = function (data, fn) {
			return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
		};
	});

	jQuery.fn.extend({
		hover: function hover(fnOver, fnOut) {
			return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
		}
	});

	jQuery.fn.extend({

		bind: function bind(types, data, fn) {
			return this.on(types, null, data, fn);
		},
		unbind: function unbind(types, fn) {
			return this.off(types, null, fn);
		},

		delegate: function delegate(selector, types, data, fn) {
			return this.on(types, selector, data, fn);
		},
		undelegate: function undelegate(selector, types, fn) {

			// ( namespace ) or ( selector, types [, fn] )
			return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn);
		}
	});

	// Bind a function to a context, optionally partially applying any
	// arguments.
	// jQuery.proxy is deprecated to promote standards (specifically Function#bind)
	// However, it is not slated for removal any time soon
	jQuery.proxy = function (fn, context) {
		var tmp, args, proxy;

		if (typeof context === "string") {
			tmp = fn[context];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if (!isFunction(fn)) {
			return undefined;
		}

		// Simulated bind
		args = _slice.call(arguments, 2);
		proxy = function proxy() {
			return fn.apply(context || this, args.concat(_slice.call(arguments)));
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	};

	jQuery.holdReady = function (hold) {
		if (hold) {
			jQuery.readyWait++;
		} else {
			jQuery.ready(true);
		}
	};
	jQuery.isArray = Array.isArray;
	jQuery.parseJSON = JSON.parse;
	jQuery.nodeName = nodeName;
	jQuery.isFunction = isFunction;
	jQuery.isWindow = isWindow;
	jQuery.camelCase = camelCase;
	jQuery.type = toType;

	jQuery.now = Date.now;

	jQuery.isNumeric = function (obj) {

		// As of jQuery 3.0, isNumeric is limited to
		// strings and numbers (primitives or objects)
		// that can be coerced to finite numbers (gh-2662)
		var type = jQuery.type(obj);
		return (type === "number" || type === "string") &&

		// parseFloat NaNs numeric-cast false positives ("")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		!isNaN(obj - parseFloat(obj));
	};

	// Register as a named AMD module, since jQuery can be concatenated with other
	// files that may use define, but not via a proper concatenation script that
	// understands anonymous AMD modules. A named AMD is safest and most robust
	// way to register. Lowercase jquery is used because AMD module names are
	// derived from file names, and jQuery is normally delivered in a lowercase
	// file name. Do this after creating the global so that if an AMD module wants
	// to call noConflict to hide this version of jQuery, it will work.

	// Note that for maximum portability, libraries that are not jQuery should
	// declare themselves as anonymous modules, and avoid setting a global if an
	// AMD loader is present. jQuery is a special case. For more information, see
	// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

	if (true) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {
			return jQuery;
		}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}

	var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,


	// Map over the $ in case of overwrite
	_$ = window.$;

	jQuery.noConflict = function (deep) {
		if (window.$ === jQuery) {
			window.$ = _$;
		}

		if (deep && window.jQuery === jQuery) {
			window.jQuery = _jQuery;
		}

		return jQuery;
	};

	// Expose jQuery and $ identifiers, even in AMD
	// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
	// and CommonJS for browser emulators (#13566)
	if (!noGlobal) {
		window.jQuery = window.$ = jQuery;
	}

	return jQuery;
});

/***/ }),

/***/ "pv+l":
/***/ (function(module, exports) {

module.exports = function (originalModule) {
	if (!originalModule.webpackPolyfill) {
		var module = Object.create(originalModule);
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function get() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function get() {
				return module.i;
			}
		});
		Object.defineProperty(module, "exports", {
			enumerable: true
		});
		module.webpackPolyfill = 1;
	}
	return module;
};

/***/ }),

/***/ "rq4c":
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),

/***/ "sw5u":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.Link = exports.Match = undefined;

var _extends = Object.assign || function (target) {
	for (var i = 1; i < arguments.length; i++) {
		var source = arguments[i];for (var key in source) {
			if (Object.prototype.hasOwnProperty.call(source, key)) {
				target[key] = source[key];
			}
		}
	}return target;
};

var _preact = __webpack_require__("KM04");

var _preactRouter = __webpack_require__("/QC5");

function _objectWithoutProperties(obj, keys) {
	var target = {};for (var i in obj) {
		if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
	}return target;
}

function _classCallCheck(instance, Constructor) {
	if (!(instance instanceof Constructor)) {
		throw new TypeError("Cannot call a class as a function");
	}
}

function _possibleConstructorReturn(self, call) {
	if (!self) {
		throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	}return call && (typeof call === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
	if (typeof superClass !== "function" && superClass !== null) {
		throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
	}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var Match = exports.Match = function (_Component) {
	_inherits(Match, _Component);

	function Match() {
		var _temp, _this, _ret;

		_classCallCheck(this, Match);

		for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
			args[_key] = arguments[_key];
		}

		return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.update = function (url) {
			_this.nextUrl = url;
			_this.setState({});
		}, _temp), _possibleConstructorReturn(_this, _ret);
	}

	Match.prototype.componentDidMount = function componentDidMount() {
		_preactRouter.subscribers.push(this.update);
	};

	Match.prototype.componentWillUnmount = function componentWillUnmount() {
		_preactRouter.subscribers.splice(_preactRouter.subscribers.indexOf(this.update) >>> 0, 1);
	};

	Match.prototype.render = function render(props) {
		var url = this.nextUrl || (0, _preactRouter.getCurrentUrl)(),
		    path = url.replace(/\?.+$/, '');
		this.nextUrl = null;
		return props.children[0] && props.children[0]({
			url: url,
			path: path,
			matches: path === props.path
		});
	};

	return Match;
}(_preact.Component);

var Link = function Link(_ref) {
	var activeClassName = _ref.activeClassName,
	    path = _ref.path,
	    props = _objectWithoutProperties(_ref, ['activeClassName', 'path']);

	return (0, _preact.h)(Match, { path: path || props.href }, function (_ref2) {
		var matches = _ref2.matches;
		return (0, _preact.h)(_preactRouter.Link, _extends({}, props, { 'class': [props.class || props.className, matches && activeClassName].filter(Boolean).join(' ') }));
	});
};

exports.Link = Link;
exports.default = Match;

Match.Link = Link;

/***/ }),

/***/ "wHSP":
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin
module.exports = {"video_controls":"video_controls__2tjne"};

/***/ }),

/***/ "wV7G":
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin
module.exports = {"buttonn":"buttonn__2e4is","buttonImage":"buttonImage___DtHL","imageClass":"imageClass__21xb6"};

/***/ }),

/***/ "xGwg":
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin
module.exports = {"profile":"profile__2qsXp"};

/***/ })

/******/ });
//# sourceMappingURL=ssr-bundle.js.map